{"version":3,"sources":["./providers/webpack/universalModuleDefinition","./providers/webpack/bootstrap","./providers/./util/error/error.js","./providers/./util/error/severity.js","./providers/./util/error/category.js","./providers/./util/error/code.js","./providers/./util/logger.js","./providers/./entities/media-entry.js","./providers/./util/request-builder.js","./providers/../node_modules/js-logger/src/logger.js","./providers/./entities/media-format.js","./providers/./k-provider/common/base-service-result.js","./providers/./k-provider/common/response-types/kaltura-drm-playback-plugin-data.js","./providers/./entities/media-sources.js","./providers/./entities/media-source.js","./providers/./k-provider/common/data-loader-manager.js","./providers/./k-provider/common/multi-request-builder.js","./providers/./k-provider/common/response-types/kaltura-access-control-message.js","./providers/./entities/drm.js","./providers/./k-provider/common/base-provider.js","./providers/./util/clone.js","./providers/./entities/entry-list.js","./providers/./k-provider/ott/config.js","./providers/./k-provider/ott/services/ott-service.js","./providers/./k-provider/ott/loaders/data-loader-manager.js","./providers/./k-provider/ott/services/user-service.js","./providers/./k-provider/ott/loaders/session-loader.js","./providers/./k-provider/ott/services/asset-service.js","./providers/./k-provider/ott/response-types/kaltura-rule-action.js","./providers/./k-provider/ott/response-types/kaltura-playback-source.js","./providers/./k-provider/ott/response-types/kaltura-bumper-playback-plugin-data.js","./providers/./k-provider/ott/response-types/kaltura-playback-context.js","./providers/./k-provider/ott/response-types/kaltura-asset.js","./providers/./k-provider/ott/loaders/asset-loader.js","./providers/./k-provider/ott/loaders/asset-list-loader.js","./providers/./entities/bumper.js","./providers/./k-provider/ott/provider-parser.js","./providers/./k-provider/ott/provider.js","./providers/./k-provider/ott/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Error","severity","category","code","data","this","getLogLevel","LogLevel","OFF","_logger","error","RECOVERABLE","CRITICAL","NETWORK","SERVICE","PROVIDER","UNSUPPORTED_SCHEME","BAD_HTTP_STATUS","HTTP_ERROR","TIMEOUT","MALFORMED_DATA_URI","BAD_SERVER_RESPONSE","MULTIREQUEST_API_ERROR","API_RESPONSE_MISMATCH","ERROR","BLOCK_ACTION","MEDIA_STATUS_NOT_READY","MISSING_MANDATORY_PARAMS","MISSING_PLAY_SOURCE","METHOD_NOT_IMPLEMENTED","getLogger","DEBUG","JsLogger","INFO","TIME","WARN","setLogHandler","handler","messages","context","getLevel","setLogLevel","level","setLevel","defaultLevel","MediaEntry","metadata","Map","sources","MediaSources","type","Type","UNKNOWN","id","toJSON","duration","dvrStatus","status","poster","assetReferenceType","VOD","LIVE","IMAGE","AUDIO","RequestBuilder","headers","async","timeout","maxAttempts","serviceUrl","service","action","promise","Promise","resolve","reject","_requestPromise","url","Severity","Category","Code","_createXHR","request","XMLHttpRequest","onreadystatechange","readyState","response","JSON","parse","responseText","responseHeaders","_getResponseHeaders","_createError","text","open","method","retryConfig","requestTime","performance","now","ontimeout","_handleError","statusText","onerror","onabort","forEach","setRequestHeader","send","params","getAllResponseHeaders","split","filter","header","toLowerCase","indexOf","_attemptCounter","assign","attempt","global","logHandler","Logger","VERSION","contextualLoggersByNameMap","scope","func","apply","arguments","merge","args","target","length","defineLogLevel","TRACE","ContextualLogger","defaultContext","filterLevel","log","info","newLevel","enabledFor","lvl","trace","invoke","debug","warn","time","label","timeEnd","msgArgs","L","globalLogger","setHandler","createDefaultHandler","options","formatter","unshift","timerStartTimeByLabelMap","invokeConsoleMethod","hdlr","Function","console","Array","slice","timerLabel","Date","getTime","useDefaults","MediaFormat","DASH","mimeType","pathExt","HLS","WVM","MP4","MP3","SupportedStreamFormat","isProgressiveSource","formatName","sourceFormat","ServiceResult","objectType","hasError","ServiceError","message","KalturaDrmPlaybackPluginData","drm","scheme","licenseURL","certificate","WIDEVINE_CENC","PLAYREADY_CENC","FAIRPLAY","progressive","dash","hls","source","mediaFormat","push","h","MediaSource","mimetype","bandwidth","width","height","drmData","isArray","DataLoaderManager","networkRetryConfig","_networkRetryConfig","loader","execution_loader","isValid","_loaders","set","startIndex","_multiRequest","requests","add","executionLoaderResponseMap","from","val","index","_loadersResponseMap","execute","then","_multiResponse","prepareData","success","err","loaderDataIndexes","results","MultiRequestBuilder","requestParams","serviceDef","stringify","FAILED_PARSING_REQUEST","doHttpRequest","multiRequestResult","MultiRequestResult","result","serviceResult","KalturaAccessControlMessage","Drm","licenseUrl","BaseProvider","playerVersion","_partnerId","partnerId","_widgetId","widgetId","_uiConfId","uiConfId","_isAnonymous","ks","_ks","_playerVersion","defaultWidgetId","mediaInfo","playlistInfo","entryListInfo","concat","clone","node","e","keys","EntryList","items","defaultConfig","serviceParams","apiVersion","OTTConfiguration","clientConfig","OTTService","config","ottParams","multiReq","getUrl","OTTDataLoaderManager","getMultiRequest","OTTUserService","udid","OTTSessionLoader","buildRequests","UserService","anonymousLogin","_requests","_response","OTTAssetService","assetId","playbackContextOptions","contextDataParams","assetType","KalturaRuleAction","BLOCK","START_DATE_OFFSET","END_DATE_OFFSET","USER_BLOCK","ALLOW_PLAYBACK","BLOCK_PLAYBACK","APPLY_DISCOUNT_MODULE","KalturaPlaybackSource","format","adsPolicy","adsParam","fileId","protocols","map","protocol","returnValue","KalturaBumpersPlaybackPluginData","streamertype","PROGRESSIVE","KalturaPlaybackContext","actions","plugins","plugin","undefined","getBlockAction","find","TRAILER","CATCHUP","START_OVER","PLAYBACK","KalturaAsset","description","metas","_formatTagsMetas","tags","pictures","images","objectToParse","parsed","objects","MEDIA","RECORDING","EPG","EPG_INTERNAL","EPG_EXTERNAL","NPVR","OTTAssetLoader","_entryId","entryId","getPlaybackContext","playbackContext","mediaDataResult","playBackContextResult","OTTAssetListLoader","playlistItems","entries","_entries","entry","AssetReferenceType","item","Bumper","MediaTypeCombinations","mediaAssetData","parseInt","externalIds","OTTProviderParser","assetResponse","requestData","mediaEntry","_fillBaseData","mediaAsset","kalturaSources","filteredKalturaSources","_filterSourcesByFormats","formats","_getParsedSources","typeData","_getMediaType","mediaType","contextType","Math","max","playlistResponse","requestEntries","entryList","requestEntry","progressiveBumper","bumper","StreamerType","metaData","reconstructMetadata","_getPoster","addToMetaObject","list","categoryObj","test","pic","includes","addAdaptiveSource","parsedSource","_parseAdaptiveSource","kalturaSource","mediaSource","playUrl","hasDrmData","drmParams","Scheme","hasBlockAction","getErrorMessages","OTTProvider","env","networkRetryParameters","_dataLoader","mediaProtocol","assetFileIds","fileIds","fetchData","_parseDataFromResponse","mediaConfig","session","isAnonymous","_getDefaultSourcesObject","has","sessionLoader","assetLoader","getMediaEntry","_getSourcesObject","_verifyHasSources","getBumper","_parseEntryListDataFromResponse","playlistConfig","playlistLoader","getEntryList","dvr","vr","sourcesObject","mediaSources","NAME","__NAME__","__VERSION__","ContextType","MediaType"],"mappings":"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","file":"playkit-ott-provider.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ott\"] = factory();\n\telse\n\t\troot[\"playkit\"] = root[\"playkit\"] || {}, root[\"playkit\"][\"providers\"] = root[\"playkit\"][\"providers\"] || {}, root[\"playkit\"][\"providers\"][\"ott\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","//@flow\nimport getLogger, {getLogLevel, LogLevel} from '../logger';\nimport {Severity} from './severity';\nimport type {SeverityType} from './severity';\nimport {Code} from './code';\nimport type {CodeType} from './code';\nimport {Category} from './category';\nimport type {CategoryType} from './category';\n\nconst CLASS_NAME: string = 'Error';\n\n/**\n * @classdesc This is a description of the error class.\n */\nexport default class Error {\n  severity: number;\n  category: number;\n  code: number;\n  data: any;\n  /**\n   * @enum {number}\n   */\n  static Severity: SeverityType = Severity;\n  /**\n   * @enum {number}\n   */\n  static Category: CategoryType = Category;\n  /**\n   * @enum {number}\n   */\n  static Code: CodeType = Code;\n  static _logger: any = getLogger(CLASS_NAME);\n\n  /**\n   * @constructor\n   * @param {number} severity - error's severity\n   * @param {number} category - error's category.\n   * @param {number} code - error's code.\n   * @param {any} data - additional data for the error.\n   */\n  constructor(severity: number, category: number, code: number, data: any = {}) {\n    this.severity = severity;\n    this.category = category;\n    this.code = code;\n    this.data = data;\n    if (getLogLevel(CLASS_NAME) !== LogLevel.OFF) {\n      Error._logger.error(`Category:${category} | Code:${code} |`, data);\n    }\n  }\n}\n","//@flow\n\ntype SeverityType = {[severity: string]: number};\n\nconst Severity: SeverityType = {\n  /**\n   * An error occurred, but the Player is attempting to recover from the error.\n   *\n   * If the Player cannot ultimately recover, it still may not throw a CRITICAL\n   * error.  For example, retrying for a media segment will never result in\n   * a CRITICAL error (the Player will just retry forever).\n   */\n  RECOVERABLE: 1,\n  /**\n   * A critical error that the library cannot recover from.  These usually cause\n   * the Player to stop loading or updating.  A new manifest must be loaded\n   * to reset the library.\n   */\n  CRITICAL: 2\n};\n\nexport {Severity};\nexport type {SeverityType};\n","//@flow\ntype CategoryType = {[category: string]: number};\n\nconst Category: CategoryType = {\n  /** Errors from the network stack. */\n  NETWORK: 1,\n  SERVICE: 2,\n  PROVIDER: 3\n};\n\nexport {Category};\nexport type {CategoryType};\n","//@flow\n\ntype CodeType = {[code: string]: number};\n\nconst Code: CodeType = {\n  /**\n   * A network request was made using an unsupported URI scheme.\n   */\n  UNSUPPORTED_SCHEME: 1000,\n\n  /**\n   * An HTTP network request returned an HTTP status that indicated a failure.\n   */\n  BAD_HTTP_STATUS: 1001,\n\n  /**\n   * An HTTP network request failed with an error, but not from the server.\n   */\n  HTTP_ERROR: 1002,\n\n  /**\n   * A network request timed out.\n   */\n  TIMEOUT: 1003,\n\n  /**\n   * A network request was made with a malformed data URI.\n   */\n  MALFORMED_DATA_URI: 1004,\n\n  /**\n   * The server responsded with 2xx response, but it couldn't be parsed\n   */\n  BAD_SERVER_RESPONSE: 1005,\n\n  /**\n   * The server response had a valid structure but contained an error from the API\n   */\n  MULTIREQUEST_API_ERROR: 1006,\n\n  /**\n   * The server response had a valid structure and valid API result, but it did not match the request\n   */\n  API_RESPONSE_MISMATCH: 1007,\n\n  /**\n   * The server responded with an error\n   */\n  ERROR: 2000,\n\n  /**\n   * The server responded with a block action\n   */\n  BLOCK_ACTION: 2001,\n\n  /**\n   * The server responded with status import or pre convert\n   */\n  MEDIA_STATUS_NOT_READY: 2002,\n\n  /**\n   * The provider is missing mandatory parameter/s\n   */\n\n  MISSING_MANDATORY_PARAMS: 3000,\n\n  /**\n   * The server responded with empty sources objects (for HLS, Dash and progressive)\n   */\n  MISSING_PLAY_SOURCE: 3001,\n\n  /**\n   * The provider doesn't implement the called api\n   */\n  METHOD_NOT_IMPLEMENTED: 3002\n};\n\nexport {Code};\nexport type {CodeType};\n","//@flow\nimport * as JsLogger from 'js-logger';\n\nexport type LogLevelObject = {value: number, name: string};\nexport type LogLevelType = {[level: string]: LogLevelObject};\n\nconst LogLevel: LogLevelType = {\n  DEBUG: JsLogger.DEBUG,\n  INFO: JsLogger.INFO,\n  TIME: JsLogger.TIME,\n  WARN: JsLogger.WARN,\n  ERROR: JsLogger.ERROR,\n  OFF: JsLogger.OFF\n};\n\nJsLogger.useDefaults({defaultLevel: JsLogger.ERROR});\n\n/**\n * sets the logger handler\n * @param {LogHandlerType} handler - the log level\n * @returns {void}\n */\nfunction setLogHandler(handler: LogHandlerType): void {\n  JsLogger.setHandler((messages, context) => handler(messages, context));\n}\n/**\n * get a logger\n * @param {?string} name - the logger name\n * @returns {Object} - the logger class\n */\nfunction getLogger(name?: string): Object {\n  if (!name) {\n    return JsLogger;\n  }\n  return JsLogger.get(name);\n}\n\n/**\n * get the log level\n * @param {?string} name - the logger name\n * @returns {LogLevelObject} - the log level\n */\nfunction getLogLevel(name?: string): LogLevelObject {\n  return getLogger(name).getLevel();\n}\n\n/**\n * sets the logger level\n * @param {LogLevelObject} level - the log level\n * @param {?string} name - the logger name\n * @returns {void}\n */\nfunction setLogLevel(level: LogLevelObject, name?: string): void {\n  getLogger(name).setLevel(level);\n}\n\nexport default getLogger;\nexport {LogLevel, getLogLevel, setLogLevel, setLogHandler};\n","//@flow\nimport MediaSources from './media-sources';\n\nexport default class MediaEntry {\n  static Type: {[type: string]: string} = {\n    VOD: 'Vod',\n    LIVE: 'Live',\n    IMAGE: 'Image',\n    AUDIO: 'Audio',\n    UNKNOWN: 'Unknown'\n  };\n\n  /**\n   * @member - entry id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - entry name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - entry sources\n   * @type {MediaSources}\n   */\n  sources: MediaSources;\n  /**\n   * @member - entry duration\n   * @type {number}\n   */\n  duration: number;\n  /**\n   * @member - entry type\n   * @type {string}\n   */\n  type: string;\n  /**\n   * @member - entry metadata\n   * @type {Object}\n   */\n  metadata: Object;\n  /**\n   * @member - DVR status\n   * @type {number}\n   */\n  dvrStatus: number;\n  /**\n   * @member - media status\n   * @type {number}\n   */\n  status: number;\n  /**\n   * @member - media poster\n   * @type {string | Array<Object>}\n   */\n  poster: string | Array<Object>;\n\n  /**\n   * @member - assetReferenceType\n   * @type {string }\n   */\n  assetReferenceType: string;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.metadata = new Map();\n    this.sources = new MediaSources();\n    this.type = MediaEntry.Type.UNKNOWN;\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaEntryObject} - The json class object.\n   */\n  toJSON(): ProviderMediaEntryObject {\n    return {\n      id: this.id,\n      name: this.name,\n      sources: this.sources.toJSON(),\n      duration: this.duration,\n      dvrStatus: this.dvrStatus,\n      status: this.status,\n      metadata: this.metadata,\n      type: this.type,\n      poster: this.poster,\n      assetReferenceType: this.assetReferenceType\n    };\n  }\n}\n","//@flow\nimport Error from './error/error';\n\nconst KALTURA_HEADER_PREFIX: string = 'x-';\n\nexport default class RequestBuilder {\n  /**\n   * @member - Service name\n   * @type {string}\n   */\n  service: string;\n  /**\n   * @member - Service action\n   * @type {string}\n   */\n  action: string;\n  /**\n   * @member - Service params\n   * @type {any}\n   */\n  params: any;\n  /**\n   * @memberof - Service headers\n   * @type {Map<string, string>}\n   */\n  headers: Map<string, string>;\n  /**\n   * @memberof - Service URL\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @memberof - Service method (POST,GET,DELETE etc..)\n   * @type {string}\n   */\n  method: string;\n  /**\n   * @memberof - Service tag\n   * @type {string}\n   */\n  tag: string;\n  /**\n   * @memberof - the response headers of the arra\n   * @type {Array<string>}\n   */\n  responseHeaders: Array<string>;\n  /**\n   * @description network retry configuration\n   * @memberof RequestBuilder\n   * @type {ProviderNetworkRetryParameters}\n   */\n  retryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  /**\n   * @description number of xhr attempts for the same multi - request.\n   * @memberof RequestBuilder\n   * @type {number}\n   * @private\n   */\n  _attemptCounter: number = 1;\n\n  /**\n   * @description hold the promise result of the XHR request(s) - if all tries fails, it rejects with the error.\n   * @memberof RequestBuilder\n   * @type {Object}\n   * @private\n   */\n  _requestPromise: Object;\n\n  /**\n   * @constructor\n   * @param {Map<string, string>} headers The request headers\n   */\n  constructor(headers: Map<string, string> = new Map()) {\n    this.headers = headers;\n  }\n\n  /**\n   * Builds restful service URL\n   * @function getUrl\n   * @param {string} serviceUrl - The service base URL\n   * @returns {string} The service URL\n   */\n  getUrl(serviceUrl: string): string {\n    return serviceUrl + '/service/' + this.service + (this.action ? '/action/' + this.action : '');\n  }\n\n  /**\n   * Executes service\n   * @function doHttpRequest\n   * @returns {Promise.<any>} Service response as promise\n   */\n  doHttpRequest(): Promise<any> {\n    const promise = new Promise((resolve, reject) => {\n      this._requestPromise = {\n        resolve,\n        reject\n      };\n    });\n    if (!this.url) {\n      this._requestPromise.reject(\n        new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MALFORMED_DATA_URI, {\n          url: this.url\n        })\n      );\n    }\n    this._createXHR();\n    return promise;\n  }\n\n  _createXHR(): void {\n    let request = new XMLHttpRequest();\n    request.onreadystatechange = () => {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          try {\n            const response = JSON.parse(request.responseText);\n            this.responseHeaders = this._getResponseHeaders(request);\n            // the promise returns the response for backwards compatibility\n            return this._requestPromise.resolve(response);\n          } catch (error) {\n            this._requestPromise.reject(\n              this._createError(request, Error.Code.BAD_SERVER_RESPONSE, {\n                text: request.responseText\n              })\n            );\n          }\n        }\n      }\n    };\n    request.open(this.method, this.url, this.retryConfig.async);\n    if (this.retryConfig.async && this.retryConfig.timeout) {\n      request.timeout = this.retryConfig.timeout;\n    }\n    const requestTime = performance.now();\n    request.ontimeout = () => {\n      this._handleError(request, Error.Code.TIMEOUT, {\n        timeout: (performance.now() - requestTime) / 1000,\n        statusText: request.statusText\n      });\n    };\n    request.onerror = request.onabort = () => {\n      this._handleError(request, Error.Code.HTTP_ERROR, {\n        text: request.responseText,\n        statusText: request.statusText\n      });\n    };\n    this.headers.forEach((value, key) => {\n      request.setRequestHeader(key, value);\n    });\n    request.send(this.params);\n  }\n\n  _getResponseHeaders(request: XMLHttpRequest): Array<string> {\n    return request\n      .getAllResponseHeaders()\n      .split('\\n')\n      .filter(header => header.toLowerCase().indexOf(KALTURA_HEADER_PREFIX) === 0);\n  }\n\n  _handleError(request: XMLHttpRequest, code: number, data: Object): Promise<*> | void {\n    const error = this._createError(request, code, data);\n    request.onreadystatechange = function () {};\n    request.onerror = function () {};\n    request.ontimeout = function () {};\n    request.onabort = function () {};\n    if (this.retryConfig.maxAttempts && this._attemptCounter < this.retryConfig.maxAttempts) {\n      this._attemptCounter++;\n      this._createXHR();\n    } else {\n      return this._requestPromise.reject(error);\n    }\n  }\n\n  _createError(request: XMLHttpRequest, code: number, data: Object): Error {\n    Object.assign(data, {\n      url: this.url,\n      headers: this._getResponseHeaders(request),\n      attempt: this._attemptCounter\n    });\n    return new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, code, data);\n  }\n}\n","/*!\r\n * js-logger - http://github.com/jonnyreeves/js-logger\r\n * Jonny Reeves, http://jonnyreeves.co.uk/\r\n * js-logger may be freely distributed under the MIT license.\r\n */\r\n(function (global) {\r\n\t\"use strict\";\r\n\r\n\t// Top level module for the global, static logger instance.\r\n\tvar Logger = { };\r\n\r\n\t// For those that are at home that are keeping score.\r\n\tLogger.VERSION = \"1.6.0\";\r\n\r\n\t// Function which handles all incoming log messages.\r\n\tvar logHandler;\r\n\r\n\t// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.\r\n\tvar contextualLoggersByNameMap = {};\r\n\r\n\t// Polyfill for ES5's Function.bind.\r\n\tvar bind = function(scope, func) {\r\n\t\treturn function() {\r\n\t\t\treturn func.apply(scope, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// Super exciting object merger-matron 9000 adding another 100 bytes to your download.\r\n\tvar merge = function () {\r\n\t\tvar args = arguments, target = args[0], key, i;\r\n\t\tfor (i = 1; i < args.length; i++) {\r\n\t\t\tfor (key in args[i]) {\r\n\t\t\t\tif (!(key in target) && args[i].hasOwnProperty(key)) {\r\n\t\t\t\t\ttarget[key] = args[i][key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t};\r\n\r\n\t// Helper to define a logging level object; helps with optimisation.\r\n\tvar defineLogLevel = function(value, name) {\r\n\t\treturn { value: value, name: name };\r\n\t};\r\n\r\n\t// Predefined logging levels.\r\n\tLogger.TRACE = defineLogLevel(1, 'TRACE');\r\n\tLogger.DEBUG = defineLogLevel(2, 'DEBUG');\r\n\tLogger.INFO = defineLogLevel(3, 'INFO');\r\n\tLogger.TIME = defineLogLevel(4, 'TIME');\r\n\tLogger.WARN = defineLogLevel(5, 'WARN');\r\n\tLogger.ERROR = defineLogLevel(8, 'ERROR');\r\n\tLogger.OFF = defineLogLevel(99, 'OFF');\r\n\r\n\t// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently\r\n\t// of each other.\r\n\tvar ContextualLogger = function(defaultContext) {\r\n\t\tthis.context = defaultContext;\r\n\t\tthis.setLevel(defaultContext.filterLevel);\r\n\t\tthis.log = this.info;  // Convenience alias.\r\n\t};\r\n\r\n\tContextualLogger.prototype = {\r\n\t\t// Changes the current logging level for the logging instance.\r\n\t\tsetLevel: function (newLevel) {\r\n\t\t\t// Ensure the supplied Level object looks valid.\r\n\t\t\tif (newLevel && \"value\" in newLevel) {\r\n\t\t\t\tthis.context.filterLevel = newLevel;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t// Gets the current logging level for the logging instance\r\n\t\tgetLevel: function () {\r\n\t\t\treturn this.context.filterLevel;\r\n\t\t},\r\n\r\n\t\t// Is the logger configured to output messages at the supplied level?\r\n\t\tenabledFor: function (lvl) {\r\n\t\t\tvar filterLevel = this.context.filterLevel;\r\n\t\t\treturn lvl.value >= filterLevel.value;\r\n\t\t},\r\n\r\n\t\ttrace: function () {\r\n\t\t\tthis.invoke(Logger.TRACE, arguments);\r\n\t\t},\r\n\r\n\t\tdebug: function () {\r\n\t\t\tthis.invoke(Logger.DEBUG, arguments);\r\n\t\t},\r\n\r\n\t\tinfo: function () {\r\n\t\t\tthis.invoke(Logger.INFO, arguments);\r\n\t\t},\r\n\r\n\t\twarn: function () {\r\n\t\t\tthis.invoke(Logger.WARN, arguments);\r\n\t\t},\r\n\r\n\t\terror: function () {\r\n\t\t\tthis.invoke(Logger.ERROR, arguments);\r\n\t\t},\r\n\r\n\t\ttime: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'start' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttimeEnd: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'end' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Invokes the logger callback if it's not being filtered.\r\n\t\tinvoke: function (level, msgArgs) {\r\n\t\t\tif (logHandler && this.enabledFor(level)) {\r\n\t\t\t\tlogHandler(msgArgs, merge({ level: level }, this.context));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Protected instance which all calls to the to level `Logger` module will be routed through.\r\n\tvar globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });\r\n\r\n\t// Configure the global Logger instance.\r\n\t(function() {\r\n\t\t// Shortcut for optimisers.\r\n\t\tvar L = Logger;\r\n\r\n\t\tL.enabledFor = bind(globalLogger, globalLogger.enabledFor);\r\n\t\tL.trace = bind(globalLogger, globalLogger.trace);\r\n\t\tL.debug = bind(globalLogger, globalLogger.debug);\r\n\t\tL.time = bind(globalLogger, globalLogger.time);\r\n\t\tL.timeEnd = bind(globalLogger, globalLogger.timeEnd);\r\n\t\tL.info = bind(globalLogger, globalLogger.info);\r\n\t\tL.warn = bind(globalLogger, globalLogger.warn);\r\n\t\tL.error = bind(globalLogger, globalLogger.error);\r\n\r\n\t\t// Don't forget the convenience alias!\r\n\t\tL.log = L.info;\r\n\t}());\r\n\r\n\t// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments\r\n\t// object with the supplied log messages and the second being a context object which contains a hash of stateful\r\n\t// parameters which the logging function can consume.\r\n\tLogger.setHandler = function (func) {\r\n\t\tlogHandler = func;\r\n\t};\r\n\r\n\t// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.\r\n\t// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).\r\n\tLogger.setLevel = function(level) {\r\n\t\t// Set the globalLogger's level.\r\n\t\tglobalLogger.setLevel(level);\r\n\r\n\t\t// Apply this level to all registered contextual loggers.\r\n\t\tfor (var key in contextualLoggersByNameMap) {\r\n\t\t\tif (contextualLoggersByNameMap.hasOwnProperty(key)) {\r\n\t\t\t\tcontextualLoggersByNameMap[key].setLevel(level);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Gets the global logging filter level\r\n\tLogger.getLevel = function() {\r\n\t\treturn globalLogger.getLevel();\r\n\t};\r\n\r\n\t// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,\r\n\t// default context and log handler.\r\n\tLogger.get = function (name) {\r\n\t\t// All logger instances are cached so they can be configured ahead of use.\r\n\t\treturn contextualLoggersByNameMap[name] ||\r\n\t\t\t(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));\r\n\t};\r\n\r\n\t// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will\r\n\t// write to the window's console object (if present); the optional options object can be used to customise the\r\n\t// formatter used to format each log message.\r\n\tLogger.createDefaultHandler = function (options) {\r\n\t\toptions = options || {};\r\n\r\n\t\toptions.formatter = options.formatter || function defaultMessageFormatter(messages, context) {\r\n\t\t\t// Prepend the logger's name to the log message for easy identification.\r\n\t\t\tif (context.name) {\r\n\t\t\t\tmessages.unshift(\"[\" + context.name + \"]\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments\r\n\t\t// that don't offer a native console method.\r\n\t\tvar timerStartTimeByLabelMap = {};\r\n\r\n\t\t// Support for IE8+ (and other, slightly more sane environments)\r\n\t\tvar invokeConsoleMethod = function (hdlr, messages) {\r\n\t\t\tFunction.prototype.apply.call(hdlr, console, messages);\r\n\t\t};\r\n\r\n\t\t// Check for the presence of a logger.\r\n\t\tif (typeof console === \"undefined\") {\r\n\t\t\treturn function () { /* no console */ };\r\n\t\t}\r\n\r\n\t\treturn function(messages, context) {\r\n\t\t\t// Convert arguments object to Array.\r\n\t\t\tmessages = Array.prototype.slice.call(messages);\r\n\r\n\t\t\tvar hdlr = console.log;\r\n\t\t\tvar timerLabel;\r\n\r\n\t\t\tif (context.level === Logger.TIME) {\r\n\t\t\t\ttimerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];\r\n\r\n\t\t\t\tif (messages[1] === 'start') {\r\n\t\t\t\t\tif (console.time) {\r\n\t\t\t\t\t\tconsole.time(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttimerStartTimeByLabelMap[timerLabel] = new Date().getTime();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (console.timeEnd) {\r\n\t\t\t\t\t\tconsole.timeEnd(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinvokeConsoleMethod(hdlr, [ timerLabel + ': ' +\r\n\t\t\t\t\t\t\t(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Delegate through to custom warn/error loggers if present on the console.\r\n\t\t\t\tif (context.level === Logger.WARN && console.warn) {\r\n\t\t\t\t\thdlr = console.warn;\r\n\t\t\t\t} else if (context.level === Logger.ERROR && console.error) {\r\n\t\t\t\t\thdlr = console.error;\r\n\t\t\t\t} else if (context.level === Logger.INFO && console.info) {\r\n\t\t\t\t\thdlr = console.info;\r\n\t\t\t\t} else if (context.level === Logger.DEBUG && console.debug) {\r\n\t\t\t\t\thdlr = console.debug;\r\n\t\t\t\t} else if (context.level === Logger.TRACE && console.trace) {\r\n\t\t\t\t\thdlr = console.trace;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toptions.formatter(messages, context);\r\n\t\t\t\tinvokeConsoleMethod(hdlr, messages);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// Configure and example a Default implementation which writes to the `window.console` (if present).  The\r\n\t// `options` hash can be used to configure the default logLevel and provide a custom message formatter.\r\n\tLogger.useDefaults = function(options) {\r\n\t\tLogger.setLevel(options && options.defaultLevel || Logger.DEBUG);\r\n\t\tLogger.setHandler(Logger.createDefaultHandler(options));\r\n\t};\r\n\r\n\t// Export to popular environments boilerplate.\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine(Logger);\r\n\t}\r\n\telse if (typeof module !== 'undefined' && module.exports) {\r\n\t\tmodule.exports = Logger;\r\n\t}\r\n\telse {\r\n\t\tLogger._prevLogger = global.Logger;\r\n\r\n\t\tLogger.noConflict = function () {\r\n\t\t\tglobal.Logger = Logger._prevLogger;\r\n\t\t\treturn Logger;\r\n\t\t};\r\n\r\n\t\tglobal.Logger = Logger;\r\n\t}\r\n}(this));\r\n","//@flow\nexport const MediaFormat: {[name: string]: ProviderMediaFormatType} = {\n  DASH: {\n    name: 'dash',\n    mimeType: 'application/dash+xml',\n    pathExt: 'mpd'\n  },\n  HLS: {\n    name: 'hls',\n    mimeType: 'application/x-mpegURL',\n    pathExt: 'm3u8'\n  },\n  WVM: {\n    name: 'wvm',\n    mimeType: 'video/wvm',\n    pathExt: 'wvm'\n  },\n  MP4: {\n    name: 'mp4',\n    mimeType: 'video/mp4',\n    pathExt: 'mp4'\n  },\n  MP3: {\n    name: 'mp3',\n    mimeType: 'audio/mpeg',\n    pathExt: 'mp3'\n  }\n};\n\nexport const SupportedStreamFormat: Map<string, ProviderMediaFormatType> = new Map([\n  ['mpegdash', MediaFormat.DASH],\n  ['applehttp', MediaFormat.HLS],\n  ['url', MediaFormat.MP4]\n]);\n\n/**\n * returns a boolean whether a source is progressive or not\n * @param {string} formatName - the format name\n * @returns {boolean} - if source is progressive or not\n */\nfunction isProgressiveSource(formatName: string): boolean {\n  const sourceFormat = SupportedStreamFormat.get(formatName);\n  return !!sourceFormat && sourceFormat.name === MediaFormat.MP4.name;\n}\n\nexport {isProgressiveSource};\n","//@flow\nexport default class ServiceResult {\n  /**\n   * @member - Is service returned an error\n   * @type {boolean}\n   */\n  hasError: boolean = false;\n  /**\n   * @member - The service error\n   * @type {ServiceError}\n   */\n  error: ServiceError;\n  /**\n   * @member - The service result data\n   * @type {Object}\n   */\n  data: Object;\n\n  /**\n   * @constructor\n   * @param {Object} response - Service response\n   */\n  constructor(response: Object) {\n    if (response.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.code, response.message);\n    } else if (response.error && response.error.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.error.code, response.error.message);\n    } else {\n      this.data = response;\n    }\n  }\n}\n\nclass ServiceError {\n  /**\n   * @member - The error code\n   * @type {string}\n   */\n  code: string;\n  /**\n   * @member - The error message\n   * @type {string}\n   */\n  message: string;\n\n  /**\n   * @constructor\n   * @param {string} code - The result code\n   * @param {string} message - The result message\n   */\n  constructor(code: string, message: string) {\n    this.code = code;\n    this.message = message;\n  }\n}\n","//@flow\nexport default class KalturaDrmPlaybackPluginData {\n  static Scheme: {[scheme: string]: string} = {\n    'drm.PLAYREADY_CENC': 'com.microsoft.playready',\n    'drm.WIDEVINE_CENC': 'com.widevine.alpha',\n    'fairplay.FAIRPLAY': 'com.apple.fairplay',\n    WIDEVINE_CENC: 'com.widevine.alpha',\n    PLAYREADY_CENC: 'com.microsoft.playready',\n    FAIRPLAY: 'com.apple.fairplay'\n  };\n\n  /**\n   * @member - The drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - The license URL\n   * @type {string}\n   */\n  licenseURL: string;\n\n  /**\n   * @member - The drm certificate\n   * @type {?string}\n   */\n  certificate: ?string;\n\n  /**\n   * @constructor\n   * @param {Object} drm The json response\n   */\n  constructor(drm: any) {\n    this.scheme = drm.scheme;\n    this.licenseURL = drm.licenseURL;\n    this.certificate = drm.certificate;\n  }\n}\n","// @flow\nimport MediaSource from './media-source';\nimport {MediaFormat} from './media-format';\n\nexport default class MediaSources {\n  /**\n   * Progressive download media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  progressive: Array<MediaSource>;\n  /**\n   * Dash media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  dash: Array<MediaSource>;\n  /**\n   * Hls media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  hls: Array<MediaSource>;\n  captions: Array<PKExternalCaptionObject>;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.progressive = [];\n    this.dash = [];\n    this.hls = [];\n  }\n\n  /**\n   * Maps the source to one of the containers according to his media format.\n   * @param {MediaSource} source - The source to add to one of the containers.\n   * @param {MediaFormat} mediaFormat - The media format of the source.\n   * @returns {void}\n   */\n  map(source: MediaSource, mediaFormat: ?ProviderMediaFormatType) {\n    if (mediaFormat) {\n      switch (mediaFormat.name) {\n        case MediaFormat.MP4.name:\n          this.progressive.push(source);\n          break;\n        case MediaFormat.DASH.name:\n          this.dash.push(source);\n          break;\n        case MediaFormat.HLS.name:\n          this.hls.push(source);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourcesObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourcesObject {\n    const response: ProviderMediaSourcesObject = {\n      progressive: [],\n      dash: [],\n      hls: []\n    };\n    this.progressive.forEach(p => response.progressive.push(p.toJSON()));\n    this.hls.forEach(h => response.hls.push(h.toJSON()));\n    this.dash.forEach(d => response.dash.push(d.toJSON()));\n    return response;\n  }\n}\n","//@flow\nimport Drm from './drm';\n\nexport default class MediaSource {\n  /**\n   * @member - media source id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - media source url\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - media source mimetype\n   * @type {string}\n   */\n  mimetype: string;\n  /**\n   * @member - media source drm data\n   * @type {Array<Drm>}\n   */\n  drmData: Array<Drm>;\n  /**\n   * @member - media source bandwidth\n   * @type {number}\n   */\n  bandwidth: number;\n  /**\n   * @member - media source width\n   * @type {number}\n   */\n  width: number;\n  /**\n   * @member - media source height\n   * @type {number}\n   */\n  height: number;\n  /**\n   * @member - media source label\n   * @type {string}\n   */\n  label: string;\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourceObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourceObject {\n    const response: ProviderMediaSourceObject = {\n      id: this.id,\n      url: this.url,\n      mimetype: this.mimetype\n    };\n    if (this.bandwidth) response.bandwidth = this.bandwidth;\n    if (this.width) response.width = this.width;\n    if (this.height) response.height = this.height;\n    if (this.label) response.label = this.label;\n    if (this.drmData && this.drmData.length > 0) {\n      response.drmData = [];\n      this.drmData.forEach(d => {\n        if (Array.isArray(response.drmData)) {\n          response.drmData.push(d.toJSON());\n        }\n      });\n    }\n    return response;\n  }\n}\n","// @flow\nimport MultiRequestBuilder, {MultiRequestResult} from './multi-request-builder';\nimport Error from '../../util/error/error';\n\nexport default class DataLoaderManager {\n  /**\n   * @member - Loaders response map index\n   * @type {Map<string,Array<number>>}\n   * @private\n   */\n  _loadersResponseMap: Map<string, Array<number>> = new Map();\n  /**\n   * @member - Loaders multi request\n   * @type {MultiRequestBuilder}\n   * @protected\n   */\n  _multiRequest: MultiRequestBuilder;\n  /**\n   * @member - Loaders multi response\n   * @type {MultiRequestResult}\n   * @private\n   */\n  _multiResponse: MultiRequestResult;\n  /**\n   * @member - Loaders to execute\n   * @type {Map<string,Function>}\n   * @private\n   */\n  _loaders: Map<string, ILoader> = new Map();\n\n  _networkRetryConfig: ProviderNetworkRetryParameters;\n\n  constructor(networkRetryConfig: ProviderNetworkRetryParameters) {\n    this._networkRetryConfig = networkRetryConfig;\n  }\n\n  /**\n   * Add loader too execution loaders map\n   * @function\n   * @param {Function} loader Loader to add\n   * @param {Object} params Loader params\n   * @returns {void}\n   */\n  add(loader: Function, params: Object): void {\n    let execution_loader = new loader(params);\n    if (execution_loader.isValid()) {\n      this._loaders.set(loader.id, execution_loader);\n      // Get the start index from the multiReqeust before adding current execution_loader requests\n      let startIndex = this._multiRequest.requests.length;\n      // Get the requests\n      let requests = execution_loader.requests;\n      this._multiRequest.retryConfig = this._networkRetryConfig;\n      // Add requests to muktiRequest queue\n      requests.forEach(request => {\n        this._multiRequest.add(request);\n      });\n      // Create range array of current execution_loader requests\n      let executionLoaderResponseMap = Array.from(new Array(requests.length), (val, index) => index + startIndex);\n      // Add to map\n      this._loadersResponseMap.set(loader.id, executionLoaderResponseMap);\n    }\n  }\n\n  /**\n   * Get data from all loaders using multi request\n   * @function\n   * @returns {Promise} Promise\n   */\n  fetchData(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this._multiRequest.execute().then(\n        data => {\n          this._multiResponse = data.response;\n          let preparedData: Object = this.prepareData(data.response);\n          if (preparedData.success) {\n            resolve(this._loaders);\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.API_RESPONSE_MISMATCH, {\n                headers: data.headers\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n\n  /**\n   * Prepare fetched data\n   * @function\n   * @param {MultiRequestResult} response - The multi request result\n   * @returns {Object} - The prepared data\n   */\n  prepareData(response: MultiRequestResult): Object {\n    this._loaders.forEach((loader, name) => {\n      let loaderDataIndexes = this._loadersResponseMap.get(name);\n      try {\n        if (loaderDataIndexes && loaderDataIndexes.length > 0) {\n          loader.response = response.results.slice(loaderDataIndexes[0], loaderDataIndexes[loaderDataIndexes.length - 1] + 1);\n        }\n      } catch (err) {\n        return {success: false, error: err};\n      }\n    });\n    return {success: true, data: this._loaders};\n  }\n}\n","//@flow\nimport RequestBuilder from '../../util/request-builder';\nimport getLogger from '../../util/logger';\nimport ServiceResult from './base-service-result';\nimport Error from '../../util/error/error';\n\nexport default class MultiRequestBuilder extends RequestBuilder {\n  static _logger = getLogger('MultiRequestBuilder');\n  /**\n   * @memberof - MultiRequestBuilder\n   * @type {Array<RequestBuilder>}\n   */\n  requests: Array<RequestBuilder> = [];\n  /**\n   * Adds request to requests array\n   * @function add\n   * @param {RequestBuilder} request The request\n   * @returns {MultiRequestBuilder} The multiRequest\n   */\n  add(request: RequestBuilder): MultiRequestBuilder {\n    this.requests.push(request);\n    const requestParams = {};\n    const serviceDef: Object = {service: request.service, action: request.action};\n    Object.assign(requestParams, {[this.requests.length]: Object.assign(serviceDef, request.params)});\n    Object.assign(requestParams, this.params);\n    this.params = requestParams;\n    return this;\n  }\n\n  /**\n   * Executes a multi request\n   * @function execute\n   * @returns {Promise} The multirequest execution promise\n   */\n  execute(): Promise<Object> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.params = JSON.stringify(this.params);\n      } catch (err) {\n        MultiRequestBuilder._logger.error(`${err.message}`);\n        reject(\n          new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.FAILED_PARSING_REQUEST, {\n            error: err,\n            params: this.params\n          })\n        );\n      }\n      this.doHttpRequest().then(\n        data => {\n          const multiRequestResult = new MultiRequestResult(data);\n          if (multiRequestResult.success) {\n            resolve({\n              headers: this.responseHeaders,\n              response: multiRequestResult\n            });\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MULTIREQUEST_API_ERROR, {\n                url: this.url,\n                headers: this.responseHeaders,\n                results: multiRequestResult.results\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n}\n\nexport class MultiRequestResult {\n  static _logger = getLogger('MultiRequestResult');\n  /**\n   * @memberof MultiRequestResult\n   * @type {boolean}\n   */\n  success: boolean;\n  /**\n   * @memberof MultiRequestResult\n   * @type {Object}\n   */\n  results: Array<ServiceResult> = [];\n  /**\n   * @constructor\n   * @param {Object} response data\n   */\n  constructor(response: Object) {\n    this.success = true;\n    const responseArr = response.result ? response.result : response;\n    responseArr.forEach(result => {\n      const serviceResult: ServiceResult = new ServiceResult(result);\n      this.results.push(serviceResult);\n      if (serviceResult.hasError) {\n        MultiRequestResult._logger.error(\n          `Service returned an error with error code: ${serviceResult.error.code} and message: ${serviceResult.error.message}.`\n        );\n        this.success = false;\n        return;\n      }\n    });\n  }\n}\n","//@flow\nexport default class KalturaAccessControlMessage {\n  /**\n   * @member - The access control message\n   * @type {string}\n   */\n  message: string;\n  /**\n   *  @member - The access control message code\n   * @@type {string}\n   */\n  code: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The json response\n   */\n  constructor(data: Object) {\n    this.message = data.message;\n    this.code = data.code;\n  }\n}\n","//@flow\nexport default class Drm {\n  /**\n   * @member - license url\n   * @type {string}\n   */\n  licenseUrl: string;\n  /**\n   * @member - drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - drm certificate\n   * @type {string}\n   */\n  certificate: string;\n\n  /**\n   * @constructor\n   * @param {string} licenseUrl - the license url\n   * @param {string} scheme - the drm scheme\n   * @param {?string} certificate - the drm certificate\n   */\n  constructor(licenseUrl: string, scheme: string, certificate: ?string) {\n    this.licenseUrl = licenseUrl;\n    this.scheme = scheme;\n    if (certificate) {\n      this.certificate = certificate;\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderDrmDataObject} - The json class object.\n   */\n  toJSON(): ProviderDrmDataObject {\n    const response: ProviderDrmDataObject = {\n      licenseUrl: this.licenseUrl,\n      scheme: this.scheme\n    };\n    if (this.certificate) response.certificate = this.certificate;\n    return response;\n  }\n}\n","// @flow\nimport {setLogLevel, getLogLevel, LogLevel, setLogHandler} from '../../util/logger';\nimport DataLoaderManager from './data-loader-manager';\nimport Error from '../../util/error/error';\n\nexport default class BaseProvider<MI> {\n  _partnerId: number;\n  _widgetId: ?string;\n  _ks: string;\n  _uiConfId: ?number;\n  _dataLoader: DataLoaderManager;\n  _playerVersion: string;\n  _logger: any;\n  _isAnonymous: boolean;\n  _networkRetryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  get partnerId(): number {\n    return this._partnerId;\n  }\n\n  get widgetId(): string {\n    return this._widgetId || this.defaultWidgetId;\n  }\n\n  get defaultWidgetId(): string {\n    return '_' + this._partnerId;\n  }\n\n  get uiConfId(): ?number {\n    return this._uiConfId;\n  }\n\n  get ks(): string {\n    return this._ks;\n  }\n\n  set ks(value: string): void {\n    this._ks = value;\n  }\n\n  get playerVersion(): string {\n    return this._playerVersion;\n  }\n\n  get isAnonymous(): boolean {\n    return this._isAnonymous;\n  }\n\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    this._partnerId = options.partnerId;\n    this._widgetId = options.widgetId;\n    this._uiConfId = options.uiConfId;\n    this._isAnonymous = !options.ks;\n    this._ks = options.ks || '';\n    this._playerVersion = playerVersion;\n    if (options.log && options.log.level && this.LogLevel[options.log.level]) {\n      setLogLevel(this.LogLevel[options.log.level]);\n    }\n    if (options.log && typeof options.log.handler === 'function') {\n      setLogHandler(options.log.handler);\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getMediaConfig(mediaInfo: MI): Promise<ProviderMediaConfigObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'getMediaConfig method must be implement by the derived class'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getPlaylistConfig(playlistInfo: ProviderPlaylistInfoObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading playlist by id'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading entry list'\n      })\n    );\n  }\n\n  _verifyHasSources(sources: ProviderMediaConfigSourcesObject) {\n    if (sources.hls.concat(sources.dash, sources.progressive).length === 0) {\n      throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.MISSING_PLAY_SOURCE, {\n        action: '',\n        messages: `No play source for entry id: ${sources.id}`\n      });\n    }\n  }\n\n  get LogLevel(): {[level: string]: Object} {\n    return LogLevel;\n  }\n\n  getLogLevel(name?: string): Object {\n    return getLogLevel(name);\n  }\n\n  setLogLevel(level: Object, name?: string): void {\n    setLogLevel(level, name);\n  }\n}\n","const clone = data => {\n  let node;\n  if (Array.isArray(data)) {\n    node = data.length > 0 ? data.slice(0) : [];\n    node.forEach((e, i) => {\n      if ((typeof e === 'object' && e !== {}) || (Array.isArray(e) && e.length > 0)) {\n        node[i] = clone(e);\n      }\n    });\n  } else if (typeof data === 'object') {\n    node = Object.assign({}, data);\n    Object.keys(node).forEach(key => {\n      if ((typeof node[key] === 'object' && node[key] !== {}) || (Array.isArray(node[key]) && node[key].length > 0)) {\n        node[key] = clone(node[key]);\n      }\n    });\n  } else {\n    node = data;\n  }\n  return node;\n};\n\nexport {clone};\n","//@flow\n\nimport MediaEntry from '../entities/media-entry';\n\nexport default class EntryList {\n  /**\n   * @member - entry list items\n   * @type {Array<MediaEntry>}\n   */\n  items: Array<MediaEntry>;\n\n  constructor() {\n    this.items = [];\n  }\n}\n","//@flow\nimport {clone} from '../../util/clone';\n\nconst defaultConfig: Object = {\n  serviceParams: {\n    apiVersion: '5.2.6'\n  }\n};\n\nexport default class OTTConfiguration {\n  static set(clientConfig?: ProviderEnvConfigObject) {\n    if (clientConfig) {\n      Object.assign(defaultConfig, clientConfig);\n    }\n  }\n\n  static get(): Object {\n    return clone(defaultConfig);\n  }\n}\n\nexport {OTTConfiguration};\n","//@flow\nimport MultiRequestBuilder from '../../common/multi-request-builder';\nimport OTTConfiguration from '../config';\n\nconst SERVICE_NAME: string = 'multirequest';\n\nexport default class OTTService {\n  /**\n   * Gets a new instance of MultiRequestBuilder with ott params\n   * @function getMultiRequest\n   * @param {string} ks The ks\n   * @param {string} partnerId The partner ID\n   * @returns {MultiRequestBuilder} The multi request builder\n   * @static\n   */\n  static getMultiRequest(ks: string, partnerId?: number): MultiRequestBuilder {\n    const config = OTTConfiguration.get();\n    const ottParams = config.serviceParams;\n    if (ks) {\n      Object.assign(ottParams, {ks: ks});\n    }\n    if (partnerId) {\n      Object.assign(ottParams, {partnerId: partnerId});\n    }\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const multiReq = new MultiRequestBuilder(headers);\n    multiReq.method = 'POST';\n    multiReq.service = SERVICE_NAME;\n    multiReq.url = multiReq.getUrl(config.serviceUrl);\n    multiReq.params = ottParams;\n    return multiReq;\n  }\n}\n","// @flow\nimport DataLoaderManager from '../../common/data-loader-manager';\nimport OTTService from '../services/ott-service';\n/**\n * OTTDataLoaderManager is a class that handles the OTT data loading\n * @param {string} partnerId - partner id\n * @param {string} ks - ks\n * @param {ProviderNetworkRetryParameters} [networkRetryConfig] - network retry configuration\n */\nexport default class OTTDataLoaderManager extends DataLoaderManager {\n  constructor(partnerId: number, ks: string = '', networkRetryConfig: ProviderNetworkRetryParameters) {\n    super(networkRetryConfig);\n    this._multiRequest = OTTService.getMultiRequest(ks, partnerId);\n  }\n}\n","//@flow\nimport OTTService from './ott-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'ottuser';\n\nexport default class OTTUserService extends OTTService {\n  /**\n   * Creates an instance of RequestBuilder for session.startWidgetSession\n   * @function anonymousSession\n   * @param {string} serviceUrl The service base URL\n   * @param {string} partnerId The partner ID\n   * @param {string} udid The udid\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static anonymousLogin(serviceUrl: string, partnerId: number, udid?: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'anonymousLogin';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    const params: Object = {partnerId: partnerId};\n    if (udid) {\n      Object.assign(params, {udid: udid});\n    }\n    request.params = params;\n    return request;\n  }\n}\n","//@flow\nimport UserService from '../services/user-service';\nimport OTTConfiguration from '../config';\nimport RequestBuilder from '../../../util/request-builder';\n\nexport default class OTTSessionLoader implements ILoader {\n  _partnerId: number;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'session';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._partnerId = params.partnerId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.ks = response[0].data.ks;\n  }\n\n  get response(): any {\n    return this._response.ks;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OTTConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(UserService.anonymousLogin(config.serviceUrl, params.partnerId, params.udid));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._partnerId;\n  }\n}\n","//@flow\nimport OTTService from './ott-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'asset';\n\nexport default class OTTAssetService extends OTTService {\n  /**\n   * Creates an instance of RequestBuilder for session.startWidgetSession\n   * @function anonymousSession\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The partner ID\n   * @param {string} assetId The asset ID\n   * @param {string} type The asset type (media/recording/epg)\n   * @param {ProviderPlaybackContextOptions} playbackContextOptions The playbackContextOptions\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static getPlaybackContext(\n    serviceUrl: string,\n    ks: string,\n    assetId: string,\n    type: string,\n    playbackContextOptions: ProviderPlaybackContextOptions\n  ): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'getPlaybackContext';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    const contextDataParams: Object = {objectType: 'KalturaPlaybackContextOptions'};\n    Object.assign(contextDataParams, playbackContextOptions);\n    request.params = {assetId: assetId, assetType: type, contextDataParams: contextDataParams, ks: ks};\n    return request;\n  }\n\n  static get(serviceUrl: string, ks: string, assetId: string, assetReferenceType: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'get';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.params = {id: assetId, assetReferenceType: assetReferenceType, ks: ks};\n    return request;\n  }\n}\n","//@flow\nexport default class KalturaRuleAction {\n  static Type: {[type: string]: string | number} = {\n    BLOCK: 'BLOCK',\n    START_DATE_OFFSET: 'START_DATE_OFFSET',\n    END_DATE_OFFSET: 'END_DATE_OFFSET',\n    USER_BLOCK: 'USER_BLOCK',\n    ALLOW_PLAYBACK: 'ALLOW_PLAYBACK',\n    BLOCK_PLAYBACK: 'BLOCK_PLAYBACK',\n    APPLY_DISCOUNT_MODULE: 'APPLY_DISCOUNT_MODULE'\n  };\n\n  /**\n   * @member - The type of the action\n   * @type {string|number}\n   */\n  type: string | number;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    this.type = data.type;\n  }\n}\n","//@flow\nimport KalturaDrmPlaybackPluginData from '../../common/response-types/kaltura-drm-playback-plugin-data';\n\nexport type OTTKalturaPlaybackSource = KalturaPlaybackSource;\n\nexport default class KalturaPlaybackSource {\n  format: string;\n  protocols: string;\n  drm: Array<KalturaDrmPlaybackPluginData> = [];\n  adsPolicy: string;\n  adsParam: string;\n  duration: number;\n  url: string;\n  type: string;\n  fileId: number;\n\n  /**\n   * @constructor\n   * @param {Object} source The response\n   */\n  constructor(source: Object) {\n    this.format = source.format;\n    this.adsPolicy = source.adsPolicy;\n    this.adsParam = source.adsParam;\n    this.duration = source.duration;\n    this.url = source.url;\n    this.type = source.type;\n    this.fileId = source.id;\n    this.protocols = source.protocols;\n    if (source.drm) {\n      source.drm.map(drm => this.drm.push(new KalturaDrmPlaybackPluginData(drm)));\n    }\n  }\n\n  /**\n   * Checks if source has DRM data\n   * @function hasDrmData\n   * @returns {boolean} Is source has DRM\n   */\n  hasDrmData(): boolean {\n    return this.drm && this.drm.length > 0;\n  }\n\n  /**\n   * Returns source desired protocol if supported\n   * @param {string} protocol - the desired protocol for the source (base play url protocol)\n   * @returns {string} - protocol if protocol is in the protocols list - if not empty string returned\n   */\n  getProtocol(protocol: string): string {\n    let returnValue: string = '';\n    if (this.protocols && this.protocols.length > 0) {\n      let protocolsArr: Array<string> = this.protocols.split(',');\n      protocolsArr.forEach(p => {\n        if (p === protocol) {\n          returnValue = p;\n        }\n      });\n    } else if (protocol === 'http') {\n      return protocol;\n    }\n    return returnValue;\n  }\n}\n","//@flow\nexport default class KalturaBumpersPlaybackPluginData {\n  static StreamerType: {[type: string]: string} = {\n    HLS: 'hls',\n    DASH: 'dash',\n    PROGRESSIVE: 'progressive'\n  };\n\n  /**\n   * @member - The streamer type\n   * @type {string}\n   */\n  streamertype: string;\n  /**\n   * @member - The url\n   * @type {string}\n   */\n  url: string;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    this.streamertype = data.streamertype;\n    this.url = data.url;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaAccessControlMessage from '../../common/response-types/kaltura-access-control-message';\nimport KalturaRuleAction from './kaltura-rule-action';\nimport KalturaPlaybackSource from './kaltura-playback-source';\nimport KalturaBumpersPlaybackPluginData from './kaltura-bumper-playback-plugin-data';\n\nexport default class KalturaPlaybackContext extends ServiceResult {\n  static Type: {[type: string]: string} = {\n    TRAILER: 'TRAILER',\n    CATCHUP: 'CATCHUP',\n    START_OVER: 'START_OVER',\n    PLAYBACK: 'PLAYBACK'\n  };\n  /**\n   * @member - The playback sources\n   * @type {Array<KalturaPlaybackSource>}\n   */\n  sources: Array<KalturaPlaybackSource> = [];\n  /**\n   * @member - Array of actions as received from the rules that invalidated\n   * @type {Array<KalturaRuleAction>}\n   */\n  actions: Array<KalturaRuleAction> = [];\n  /**\n   * @member - Array of access control massages\n   * @type {Array<KalturaAccessControlMessage>}\n   */\n  messages: Array<KalturaAccessControlMessage> = [];\n  /**\n   * @member - Array of bumper plugins\n   * @type {Array<KalturaBumpersPlaybackPluginData>}\n   */\n  plugins: Array<KalturaBumpersPlaybackPluginData> = [];\n\n  /**\n   * @constructor\n   * @param {Object} response The response\n   */\n  constructor(response: Object) {\n    super(response);\n    if (!this.hasError) {\n      const messages = response.messages;\n      if (messages) {\n        messages.map(message => this.messages.push(new KalturaAccessControlMessage(message)));\n      }\n      const actions = response.actions;\n      if (actions) {\n        actions.map(action => this.actions.push(new KalturaRuleAction(action)));\n      }\n      const sources = response.sources;\n      if (sources) {\n        sources.map(source => this.sources.push(new KalturaPlaybackSource(source)));\n      }\n      const plugins = response.plugins;\n      if (plugins) {\n        plugins.map(plugin => this.plugins.push(new KalturaBumpersPlaybackPluginData(plugin)));\n      }\n    }\n  }\n\n  hasBlockAction(): boolean {\n    return this.getBlockAction() !== undefined;\n  }\n\n  getBlockAction(): ?KalturaRuleAction {\n    return this.actions.find(action => action.type === KalturaRuleAction.Type.BLOCK);\n  }\n\n  getErrorMessages(): Array<KalturaAccessControlMessage> {\n    return this.messages;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\n\nexport default class KalturaAsset extends ServiceResult {\n  static Type: {[type: string]: string} = {\n    MEDIA: 'media',\n    RECORDING: 'recording',\n    EPG: 'epg'\n  };\n\n  static AssetReferenceType: {[type: string]: string} = {\n    MEDIA: 'media',\n    EPG_INTERNAL: 'epg_internal',\n    EPG_EXTERNAL: 'epg_external',\n    NPVR: 'nPVR'\n  };\n  /**\n   * @member - The asset id\n   * @type {number}\n   */\n  id: number;\n  /**\n   * @member - The asset name\n   * @type {string}\n   */\n  name: string = '';\n  /**\n   * @member - The asset name description\n   * @type {string}\n   */\n  description: string = '';\n  /**\n   * @member - The asset tags\n   * @type {Array<Object>}\n   */\n  tags: Array<Object> = [];\n  /**\n   * @member - The asset metas\n   * @type {Array<Object>}\n   */\n  metas: Array<Object> = [];\n  /**\n   * @member - The asset images\n   * @type {Array<any>}\n   */\n  pictures: Array<any> = [];\n\n  /**\n   * @constructor\n   * @param {Object} response The response\n   */\n  constructor(response: Object) {\n    super(response);\n    if (!this.hasError) {\n      this.id = response.id;\n      this.name = response.name;\n      this.description = response.description;\n      this.metas = this._formatTagsMetas(response.metas);\n      this.tags = this._formatTagsMetas(response.tags);\n      this.pictures = response.images;\n    }\n  }\n\n  _formatTagsMetas(objectToParse: any): Array<Object> {\n    const parsed = [];\n    Object.keys(objectToParse).forEach(function (key) {\n      if (objectToParse[key].objects) {\n        let value = '';\n        objectToParse[key].objects.forEach(function (object) {\n          value += object.value + '|';\n        });\n        parsed.push({key: key, value: value});\n      } else {\n        parsed.push({key: key, value: objectToParse[key].value});\n      }\n    });\n    return parsed;\n  }\n}\n","//@flow\nimport OTTAssetService from '../services/asset-service';\nimport OTTConfiguration from '../config';\nimport RequestBuilder from '../../../util/request-builder';\nimport KalturaPlaybackContext from '../response-types/kaltura-playback-context';\nimport KalturaAsset from '../response-types/kaltura-asset';\n\ntype OTTAssetLoaderResponse = {mediaDataResult: KalturaAsset, playBackContextResult: KalturaPlaybackContext};\nexport type {OTTAssetLoaderResponse};\n\nexport default class OTTAssetLoader implements ILoader {\n  _entryId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'asset';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entryId = params.entryId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.mediaDataResult = new KalturaAsset(response[0].data);\n    this._response.playBackContextResult = new KalturaPlaybackContext(response[1].data);\n  }\n\n  get response(): OTTAssetLoaderResponse {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OTTConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OTTAssetService.get(config.serviceUrl, params.ks, params.entryId, params.assetReferenceType));\n    requests.push(OTTAssetService.getPlaybackContext(config.serviceUrl, params.ks, params.entryId, params.type, params.playbackContext));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._entryId;\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OTTConfiguration from '../config';\nimport OTTAssetService from '../services/asset-service';\nimport KalturaAsset from '../response-types/kaltura-asset';\n\nexport default class OTTAssetListLoader implements ILoader {\n  _entries: Array<string>;\n  _requests: Array<RequestBuilder>;\n  _response: any = {playlistItems: {entries: []}};\n\n  static get id(): string {\n    return 'asset_list';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entries = params.entries;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    response.forEach(item => {\n      this._response.playlistItems.entries.push({mediaDataResult: new KalturaAsset(item.data)});\n    });\n  }\n\n  get response(): any {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OTTConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    params.entries.forEach(entry => {\n      const assetReferenceType = entry.assetReferenceType || KalturaAsset.AssetReferenceType.MEDIA;\n      requests.push(OTTAssetService.get(config.serviceUrl, params.ks, entry.entryId || entry, assetReferenceType));\n    });\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!(this._entries && this._entries.length);\n  }\n}\n","//@flow\n\nexport default class Bumper {\n  /**\n   * @member - bumper url\n   * @type {string}\n   */\n  url: string;\n\n  /**\n   * @constructor\n   * @param {Object} data - The bumper response\n   */\n  constructor(data: Object) {\n    this.url = data.url;\n  }\n}\n","//@flow\nimport getLogger from '../../util/logger';\nimport KalturaPlaybackSource from './response-types/kaltura-playback-source';\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport KalturaAsset from './response-types/kaltura-asset';\nimport MediaEntry from '../../entities/media-entry';\nimport Drm from '../../entities/drm';\nimport MediaSource from '../../entities/media-source';\nimport MediaSources from '../../entities/media-sources';\nimport EntryList from '../../entities/entry-list';\nimport Bumper from '../../entities/bumper';\nimport {SupportedStreamFormat, isProgressiveSource} from '../../entities/media-format';\nimport KalturaDrmPlaybackPluginData from '../common/response-types/kaltura-drm-playback-plugin-data';\nimport KalturaRuleAction from './response-types/kaltura-rule-action';\nimport KalturaAccessControlMessage from '../common/response-types/kaltura-access-control-message';\nimport type {OTTAssetLoaderResponse} from './loaders/asset-loader';\nimport KalturaBumpersPlaybackPluginData from './response-types/kaltura-bumper-playback-plugin-data';\n\nconst LIVE_ASST_OBJECT_TYPE: string = 'KalturaLiveAsset';\n\nconst MediaTypeCombinations: {[mediaType: string]: Object} = {\n  [KalturaAsset.Type.MEDIA]: {\n    [KalturaPlaybackContext.Type.TRAILER]: () => ({type: MediaEntry.Type.VOD}),\n    [KalturaPlaybackContext.Type.PLAYBACK]: mediaAssetData => {\n      if (parseInt(mediaAssetData.externalIds) > 0 || mediaAssetData.objectType === LIVE_ASST_OBJECT_TYPE) {\n        return {type: MediaEntry.Type.LIVE, dvrStatus: 0};\n      }\n      return {type: MediaEntry.Type.VOD};\n    }\n  },\n  [KalturaAsset.Type.EPG]: {\n    [KalturaPlaybackContext.Type.CATCHUP]: () => ({type: MediaEntry.Type.VOD}),\n    [KalturaPlaybackContext.Type.START_OVER]: () => ({type: MediaEntry.Type.LIVE, dvrStatus: 1})\n  },\n  [KalturaAsset.Type.RECORDING]: {\n    [KalturaPlaybackContext.Type.PLAYBACK]: () => ({type: MediaEntry.Type.VOD})\n  }\n};\n\nexport default class OTTProviderParser {\n  static _logger = getLogger('OTTProviderParser');\n\n  /**\n   * Returns parsed media entry by given OTT response objects.\n   * @function getMediaEntry\n   * @param {any} assetResponse - The asset response.\n   * @param {Object} requestData - The request data object.\n   * @returns {MediaEntry} - The media entry\n   * @static\n   * @public\n   */\n  static getMediaEntry(assetResponse: any, requestData: Object): MediaEntry {\n    const mediaEntry = new MediaEntry();\n    OTTProviderParser._fillBaseData(mediaEntry, assetResponse, requestData);\n    const playbackContext = assetResponse.playBackContextResult;\n    const mediaAsset = assetResponse.mediaDataResult;\n    const kalturaSources = playbackContext.sources;\n    const filteredKalturaSources = OTTProviderParser._filterSourcesByFormats(kalturaSources, requestData.formats);\n    mediaEntry.sources = OTTProviderParser._getParsedSources(filteredKalturaSources);\n    const typeData = OTTProviderParser._getMediaType(mediaAsset.data, requestData.mediaType, requestData.contextType);\n    mediaEntry.type = typeData.type;\n    mediaEntry.dvrStatus = typeData.dvrStatus;\n    mediaEntry.duration = Math.max.apply(\n      Math,\n      kalturaSources.map(source => source.duration)\n    );\n    return mediaEntry;\n  }\n\n  /**\n   * Returns parsed entry list by given OTT response objects\n   * @function getEntryList\n   * @param {any} playlistResponse - response\n   * @param {Array<ProviderMediaInfoObject>} requestEntries - entries list\n   * @returns {Playlist} - The entry list\n   * @static\n   * @public\n   */\n  static getEntryList(playlistResponse: any, requestEntries: Array<ProviderMediaInfoObject>): EntryList {\n    const entryList = new EntryList();\n    const playlistItems = playlistResponse.playlistItems.entries;\n    playlistItems.forEach(entry => {\n      const mediaEntry = new MediaEntry();\n      const requestData = requestEntries.find(requestEntry => requestEntry.entryId === entry.mediaDataResult.id);\n      OTTProviderParser._fillBaseData(mediaEntry, entry, requestData);\n      entryList.items.push(mediaEntry);\n    });\n    return entryList;\n  }\n\n  /**\n   * Returns parsed bumper by given OTT response objects.\n   * @function getBumper\n   * @param {any} assetResponse - The asset response.\n   * @returns {?Bumper} - The bumper\n   * @static\n   * @public\n   */\n  static getBumper(assetResponse: any): ?Bumper {\n    const playbackContext = assetResponse.playBackContextResult;\n    const progressiveBumper = playbackContext.plugins.find(\n      bumper => bumper.streamertype === KalturaBumpersPlaybackPluginData.StreamerType.PROGRESSIVE\n    );\n    if (progressiveBumper) {\n      return new Bumper(progressiveBumper);\n    }\n  }\n\n  static _fillBaseData(mediaEntry: MediaEntry, assetResponse: any, requestData: any) {\n    const mediaAsset = assetResponse.mediaDataResult;\n    const metaData = OTTProviderParser.reconstructMetadata(mediaAsset);\n    metaData.description = mediaAsset.description;\n    metaData.name = mediaAsset.name;\n    if (requestData && requestData.mediaType) metaData.mediaType = requestData.mediaType;\n    mediaEntry.metadata = metaData;\n    mediaEntry.poster = OTTProviderParser._getPoster(mediaAsset.pictures);\n    mediaEntry.id = mediaAsset.id;\n    return mediaEntry;\n  }\n\n  /**\n   * reconstruct the metadata\n   * @param {Object} mediaAsset the mediaAsset that contains the response with the metadata.\n   * @returns {Object} reconstructed metadata object\n   */\n  static reconstructMetadata(mediaAsset: Object): Object {\n    const metadata = {\n      metas: OTTProviderParser.addToMetaObject(mediaAsset.metas),\n      tags: OTTProviderParser.addToMetaObject(mediaAsset.tags)\n    };\n    return metadata;\n  }\n\n  /**\n   * transform an array of [{key: value},{key: value}...] to an object\n   * @param {Array<Object>} list a list of objects\n   * @returns {Object} an mapped object of the arrayed list.\n   */\n  static addToMetaObject(list: Array<Object>): Object {\n    let categoryObj = {};\n    if (list) {\n      list.forEach(item => {\n        categoryObj[item.key] = item.value;\n      });\n    }\n    return categoryObj;\n  }\n\n  /**\n   * Gets the poster url without width and height.\n   * @param {Array<Object>} pictures - Media pictures.\n   * @returns {string | Array<Object>} - Poster base url or array of poster candidates.\n   * @private\n   */\n  static _getPoster(pictures: Array<Object>): string | Array<Object> {\n    if (pictures && pictures.length > 0) {\n      const picObj = pictures[0];\n      const url = picObj.url;\n      // Search for thumbnail service\n      const regex = /.*\\/thumbnail\\/.*(?:width|height)\\/\\d+\\/(?:height|width)\\/\\d+/;\n      if (regex.test(url)) {\n        return url;\n      }\n      return pictures.map(pic => ({url: pic.url, width: pic.width, height: pic.height}));\n    }\n    return '';\n  }\n\n  /**\n   * Gets the media type (LIVE/VOD)\n   * @param {Object} mediaAssetData - The media asset data.\n   * @param {string} mediaType - The asset media type.\n   * @param {string} contextType - The asset context type.\n   * @returns {Object} - The type data object.\n   * @private\n   */\n  static _getMediaType(mediaAssetData: Object, mediaType: string, contextType: string): Object {\n    let typeData = {type: MediaEntry.Type.UNKNOWN};\n    if (MediaTypeCombinations[mediaType] && MediaTypeCombinations[mediaType][contextType]) {\n      typeData = MediaTypeCombinations[mediaType][contextType](mediaAssetData);\n    }\n    return typeData;\n  }\n\n  /**\n   * Filtered the kalturaSources array by device type.\n   * @param {Array<KalturaPlaybackSource>} kalturaSources - The kaltura sources.\n   * @param {Array<string>} formats - Partner device formats.\n   * @returns {Array<KalturaPlaybackSource>} - Filtered kalturaSources array.\n   * @private\n   */\n  static _filterSourcesByFormats(kalturaSources: Array<KalturaPlaybackSource>, formats: Array<string>): Array<KalturaPlaybackSource> {\n    if (formats.length > 0) {\n      kalturaSources = kalturaSources.filter(source => formats.includes(source.type));\n    }\n    return kalturaSources;\n  }\n\n  /**\n   * Returns the parsed sources\n   * @function _getParsedSources\n   * @param {Array<KalturaPlaybackSource>} kalturaSources - The kaltura sources\n   * @param {Object} playbackContext - The playback context\n   * @return {MediaSources} - A media sources\n   * @static\n   * @private\n   */\n  static _getParsedSources(kalturaSources: Array<KalturaPlaybackSource>): MediaSources {\n    const sources = new MediaSources();\n    const addAdaptiveSource = (source: KalturaPlaybackSource) => {\n      const parsedSource = OTTProviderParser._parseAdaptiveSource(source);\n      if (parsedSource) {\n        const sourceFormat = SupportedStreamFormat.get(source.format);\n        sources.map(parsedSource, sourceFormat);\n      }\n    };\n    const parseAdaptiveSources = () => {\n      kalturaSources.filter(source => !isProgressiveSource(source.format)).forEach(addAdaptiveSource);\n    };\n    const parseProgressiveSources = () => {\n      kalturaSources.filter(source => isProgressiveSource(source.format)).forEach(addAdaptiveSource);\n    };\n    if (kalturaSources && kalturaSources.length > 0) {\n      parseAdaptiveSources();\n      parseProgressiveSources();\n    }\n    return sources;\n  }\n\n  /**\n   * Returns a parsed adaptive source\n   * @function _parseAdaptiveSource\n   * @param {KalturaPlaybackSource} kalturaSource - A kaltura source\n   * @returns {?MediaSource} - The parsed adaptive kalturaSource\n   * @static\n   * @private\n   */\n  static _parseAdaptiveSource(kalturaSource: ?KalturaPlaybackSource): ?MediaSource {\n    const mediaSource = new MediaSource();\n    if (kalturaSource) {\n      const playUrl = kalturaSource.url;\n      const mediaFormat = SupportedStreamFormat.get(kalturaSource.format);\n      if (mediaFormat) {\n        mediaSource.mimetype = mediaFormat.mimeType;\n      }\n      if (!playUrl) {\n        OTTProviderParser._logger.error(\n          `failed to create play url from source, discarding source: (${kalturaSource.fileId}), ${kalturaSource.format}.`\n        );\n        return null;\n      }\n      mediaSource.url = playUrl;\n      mediaSource.id = kalturaSource.fileId + ',' + kalturaSource.format;\n      if (kalturaSource.hasDrmData()) {\n        const drmParams: Array<Drm> = [];\n        kalturaSource.drm.forEach(drm => {\n          drmParams.push(new Drm(drm.licenseURL, KalturaDrmPlaybackPluginData.Scheme[drm.scheme], drm.certificate));\n        });\n        mediaSource.drmData = drmParams;\n      }\n    }\n    return mediaSource;\n  }\n\n  static hasBlockAction(response: OTTAssetLoaderResponse): boolean {\n    return response.playBackContextResult.hasBlockAction();\n  }\n\n  static getBlockAction(response: OTTAssetLoaderResponse): ?KalturaRuleAction {\n    return response.playBackContextResult.getBlockAction();\n  }\n\n  static getErrorMessages(response: OTTAssetLoaderResponse): Array<KalturaAccessControlMessage> {\n    return response.playBackContextResult.getErrorMessages();\n  }\n}\n","// @flow\nimport BaseProvider from '../common/base-provider';\nimport getLogger from '../../util/logger';\nimport OTTConfiguration from './config';\nimport OTTDataLoaderManager from './loaders/data-loader-manager';\nimport OTTSessionLoader from './loaders/session-loader';\nimport OTTAssetLoader from './loaders/asset-loader';\nimport OTTAssetListLoader from './loaders/asset-list-loader';\nimport OTTProviderParser from './provider-parser';\nimport KalturaAsset from './response-types/kaltura-asset';\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport MediaEntry from '../../entities/media-entry';\nimport Error from '../../util/error/error';\n\nexport default class OTTProvider extends BaseProvider<OTTProviderMediaInfoObject> {\n  /**\n   * @constructor\n   * @param {ProviderOptionsObject} options - provider options\n   * @param {string} playerVersion - player version\n   */\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    super(options, playerVersion);\n    this._logger = getLogger('OTTProvider');\n    OTTConfiguration.set(options.env);\n    this._networkRetryConfig = Object.assign(this._networkRetryConfig, options.networkRetryParameters);\n  }\n\n  /**\n   * Gets the backend media config.\n   * @param {OTTProviderMediaInfoObject} mediaInfo - ott media info\n   * @returns {Promise<ProviderMediaConfigObject>} - The provider media config\n   */\n  getMediaConfig(mediaInfo: OTTProviderMediaInfoObject): Promise<ProviderMediaConfigObject> {\n    if (mediaInfo.ks) {\n      this.ks = mediaInfo.ks;\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OTTDataLoaderManager(this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entryId = mediaInfo.entryId;\n      if (entryId) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OTTSessionLoader, {partnerId: this.partnerId});\n        }\n        const contextType = mediaInfo.contextType || KalturaPlaybackContext.Type.PLAYBACK;\n        const mediaType = mediaInfo.mediaType || KalturaAsset.Type.MEDIA;\n        const assetReferenceType = mediaInfo.assetReferenceType || KalturaAsset.AssetReferenceType.MEDIA;\n        const playbackContext = {\n          mediaProtocol: mediaInfo.protocol,\n          assetFileIds: mediaInfo.fileIds,\n          context: contextType\n        };\n        this._dataLoader.add(OTTAssetLoader, {\n          entryId: entryId,\n          ks: ks,\n          type: mediaType,\n          playbackContext: playbackContext,\n          assetReferenceType: assetReferenceType\n        });\n        const requestData = {\n          contextType: contextType,\n          mediaType: mediaType,\n          formats: mediaInfo.formats || []\n        };\n        return this._dataLoader.fetchData().then(\n          response => {\n            try {\n              resolve(this._parseDataFromResponse(response, requestData));\n            } catch (err) {\n              reject(err);\n            }\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject(new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.MISSING_MANDATORY_PARAMS, {message: 'missing entry id'}));\n      }\n    });\n  }\n\n  _parseDataFromResponse(data: Map<string, Function>, requestData: Object): ProviderMediaConfigObject {\n    this._logger.debug('Data parsing started');\n    const mediaConfig: ProviderMediaConfigObject = {\n      session: {\n        isAnonymous: this._isAnonymous,\n        partnerId: this.partnerId\n      },\n      sources: this._getDefaultSourcesObject(),\n      plugins: {}\n    };\n    if (this.uiConfId) {\n      mediaConfig.session.uiConfId = this.uiConfId;\n    }\n    if (data) {\n      if (data.has(OTTSessionLoader.id)) {\n        const sessionLoader = data.get(OTTSessionLoader.id);\n        if (sessionLoader && sessionLoader.response) {\n          mediaConfig.session.ks = sessionLoader.response;\n        }\n      } else {\n        mediaConfig.session.ks = this.ks;\n      }\n      if (data.has(OTTAssetLoader.id)) {\n        const assetLoader = data.get(OTTAssetLoader.id);\n        if (assetLoader && assetLoader.response && Object.keys(assetLoader.response).length) {\n          const response = (assetLoader: OTTAssetLoader).response;\n          if (OTTProviderParser.hasBlockAction(response)) {\n            throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.BLOCK_ACTION, {\n              action: OTTProviderParser.getBlockAction(response),\n              messages: OTTProviderParser.getErrorMessages(response)\n            });\n          }\n          const mediaEntry = OTTProviderParser.getMediaEntry(response, requestData);\n          Object.assign(mediaConfig.sources, this._getSourcesObject(mediaEntry));\n          this._verifyHasSources(mediaConfig.sources);\n          const bumper = OTTProviderParser.getBumper(response);\n          if (bumper) {\n            Object.assign(mediaConfig.plugins, {bumper});\n          }\n        }\n      }\n    }\n    this._logger.debug('Data parsing finished', mediaConfig);\n    return mediaConfig;\n  }\n\n  /**\n   * Gets playlist config from entry list.\n   * @param {ProviderEntryListObject} entryListInfo - ott entry list info\n   * @returns {Promise<ProviderPlaylistObject>} - The provider playlist config\n   */\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    if (entryListInfo.ks) {\n      this.ks = entryListInfo.ks;\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OTTDataLoaderManager(this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entries = entryListInfo.entries;\n      if (entries && entries.length) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OTTSessionLoader, {partnerId: this.partnerId});\n        }\n        this._dataLoader.add(OTTAssetListLoader, {entries, ks});\n        this._dataLoader.fetchData().then(\n          response => {\n            resolve(this._parseEntryListDataFromResponse(response, entries));\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject({success: false, data: 'Missing mandatory parameter'});\n      }\n    });\n  }\n\n  _parseEntryListDataFromResponse(data: Map<string, Function>, requestEntries: Array<ProviderMediaInfoObject>): ProviderPlaylistObject {\n    this._logger.debug('Data parsing started');\n    const playlistConfig: ProviderPlaylistObject = {\n      id: '',\n      metadata: {\n        name: '',\n        description: ''\n      },\n      poster: '',\n      items: []\n    };\n    if (data && data.has(OTTAssetListLoader.id)) {\n      const playlistLoader = data.get(OTTAssetListLoader.id);\n      if (playlistLoader && playlistLoader.response) {\n        const entryList = OTTProviderParser.getEntryList(playlistLoader.response, requestEntries);\n        entryList.items.forEach(i => playlistConfig.items.push({sources: this._getSourcesObject(i)}));\n      }\n    }\n    this._logger.debug('Data parsing finished', playlistConfig);\n    return playlistConfig;\n  }\n\n  _getDefaultSourcesObject(): ProviderMediaConfigSourcesObject {\n    return {\n      hls: [],\n      dash: [],\n      progressive: [],\n      id: '',\n      duration: 0,\n      type: MediaEntry.Type.UNKNOWN,\n      poster: '',\n      dvr: false,\n      vr: null,\n      metadata: {\n        name: '',\n        description: '',\n        tags: ''\n      }\n    };\n  }\n\n  _getSourcesObject(mediaEntry: MediaEntry) {\n    const sourcesObject: ProviderMediaConfigSourcesObject = this._getDefaultSourcesObject();\n    const mediaSources = mediaEntry.sources.toJSON();\n    sourcesObject.hls = mediaSources.hls;\n    sourcesObject.dash = mediaSources.dash;\n    sourcesObject.progressive = mediaSources.progressive;\n    sourcesObject.id = mediaEntry.id;\n    sourcesObject.duration = mediaEntry.duration;\n    sourcesObject.type = mediaEntry.type;\n    sourcesObject.dvr = !!mediaEntry.dvrStatus;\n    sourcesObject.poster = mediaEntry.poster;\n    if (\n      mediaEntry.metadata &&\n      mediaEntry.metadata.metas &&\n      typeof mediaEntry.metadata.metas.tags === 'string' &&\n      mediaEntry.metadata.metas.tags.indexOf('360') > -1\n    ) {\n      sourcesObject.vr = {};\n    }\n    Object.assign(sourcesObject.metadata, mediaEntry.metadata);\n    return sourcesObject;\n  }\n}\n","// @flow\nimport OTTProvider from './provider';\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport KalturaAsset from './response-types/kaltura-asset';\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nconst NAME = __NAME__ + '-ott';\nconst VERSION = __VERSION__;\n\nconst ContextType = KalturaPlaybackContext.Type;\nconst MediaType = KalturaAsset.Type;\n\nexport {OTTProvider as Provider, ContextType, MediaType, NAME, VERSION};\n"],"sourceRoot":""}