{"version":3,"sources":["./providers/webpack/universalModuleDefinition","./providers/webpack/bootstrap","./providers/./util/error/error.js","./providers/./util/error/severity.js","./providers/./util/error/category.js","./providers/./util/error/code.js","./providers/./util/logger.js","./providers/./entities/media-entry.js","./providers/./util/request-builder.js","./providers/../node_modules/js-logger/src/logger.js","./providers/./entities/media-format.js","./providers/./k-provider/common/base-service-result.js","./providers/./k-provider/common/response-types/kaltura-drm-playback-plugin-data.js","./providers/./entities/media-sources.js","./providers/./entities/media-source.js","./providers/./k-provider/common/data-loader-manager.js","./providers/./k-provider/common/multi-request-builder.js","./providers/./k-provider/common/response-types/kaltura-access-control-message.js","./providers/./entities/drm.js","./providers/./k-provider/common/base-provider.js","./providers/./util/clone.js","./providers/./entities/entry-list.js","./providers/./k-provider/ovp/config.js","./providers/./k-provider/ovp/response-types/kaltura-playback-source.js","./providers/./k-provider/ovp/response-types/kaltura-rule-action.js","./providers/./k-provider/ovp/response-types/kaltura-access-control-modify-request-host-regex-action.js","./providers/./k-provider/ovp/response-types/kaltura-flavor-asset.js","./providers/./k-provider/ovp/response-types/kaltura-playback-context.js","./providers/./k-provider/ovp/response-types/kaltura-metadata.js","./providers/./k-provider/ovp/response-types/kaltura-metadata-list-response.js","./providers/./k-provider/ovp/response-types/kaltura-media-entry.js","./providers/./k-provider/ovp/play-source-url-builder.js","./providers/./util/xml-parser.js","./providers/./entities/playlist.js","./providers/./k-provider/ovp/external-captions-builder.js","./providers/./k-provider/ovp/provider-parser.js","./providers/./k-provider/ovp/services/ovp-service.js","./providers/./k-provider/ovp/request-params/base-entry-response-profile.js","./providers/./k-provider/ovp/services/base-entry-service.js","./providers/./k-provider/ovp/services/meta-data-service.js","./providers/./k-provider/ovp/response-types/kaltura-base-entry-list-response.js","./providers/./k-provider/ovp/loaders/media-entry-loader.js","./providers/./k-provider/ovp/services/session-service.js","./providers/./k-provider/ovp/loaders/session-loader.js","./providers/./k-provider/ovp/loaders/data-loader-manager.js","./providers/./k-provider/ovp/services/playlist-service.js","./providers/./k-provider/ovp/response-types/kaltura-playlist.js","./providers/./k-provider/ovp/response-types/kaltura-media-entries.js","./providers/./k-provider/ovp/loaders/playlist-loader.js","./providers/./k-provider/ovp/loaders/entry-list-loader.js","./providers/./k-provider/ovp/provider.js","./providers/./k-provider/ovp/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Error","severity","category","code","data","this","getLogLevel","LogLevel","OFF","_logger","error","RECOVERABLE","CRITICAL","NETWORK","SERVICE","PROVIDER","UNSUPPORTED_SCHEME","BAD_HTTP_STATUS","HTTP_ERROR","TIMEOUT","MALFORMED_DATA_URI","BAD_SERVER_RESPONSE","MULTIREQUEST_API_ERROR","API_RESPONSE_MISMATCH","ERROR","BLOCK_ACTION","MEDIA_STATUS_NOT_READY","MISSING_MANDATORY_PARAMS","MISSING_PLAY_SOURCE","METHOD_NOT_IMPLEMENTED","getLogger","DEBUG","JsLogger","INFO","TIME","WARN","setLogHandler","handler","messages","context","getLevel","setLogLevel","level","setLevel","defaultLevel","MediaEntry","metadata","Map","sources","MediaSources","type","Type","UNKNOWN","id","toJSON","duration","dvrStatus","status","poster","assetReferenceType","VOD","LIVE","IMAGE","AUDIO","RequestBuilder","headers","async","timeout","maxAttempts","serviceUrl","service","action","promise","Promise","resolve","reject","_requestPromise","url","Severity","Category","Code","_createXHR","request","XMLHttpRequest","onreadystatechange","readyState","response","JSON","parse","responseText","responseHeaders","_getResponseHeaders","_createError","text","open","method","retryConfig","requestTime","performance","now","ontimeout","_handleError","statusText","onerror","onabort","forEach","setRequestHeader","send","params","getAllResponseHeaders","split","filter","header","toLowerCase","indexOf","_attemptCounter","assign","attempt","global","logHandler","Logger","VERSION","contextualLoggersByNameMap","scope","func","apply","arguments","merge","args","target","length","defineLogLevel","TRACE","ContextualLogger","defaultContext","filterLevel","log","info","newLevel","enabledFor","lvl","trace","invoke","debug","warn","time","label","timeEnd","msgArgs","L","globalLogger","setHandler","createDefaultHandler","options","formatter","unshift","timerStartTimeByLabelMap","invokeConsoleMethod","hdlr","Function","console","Array","slice","timerLabel","Date","getTime","useDefaults","MediaFormat","DASH","mimeType","pathExt","HLS","WVM","MP4","MP3","SupportedStreamFormat","isProgressiveSource","formatName","sourceFormat","ServiceResult","objectType","hasError","ServiceError","message","KalturaDrmPlaybackPluginData","drm","scheme","licenseURL","certificate","WIDEVINE_CENC","PLAYREADY_CENC","FAIRPLAY","progressive","dash","hls","source","mediaFormat","push","h","MediaSource","mimetype","bandwidth","width","height","drmData","isArray","DataLoaderManager","networkRetryConfig","_networkRetryConfig","loader","execution_loader","isValid","_loaders","set","startIndex","_multiRequest","requests","add","executionLoaderResponseMap","from","val","index","_loadersResponseMap","execute","then","_multiResponse","prepareData","success","err","loaderDataIndexes","results","MultiRequestBuilder","requestParams","serviceDef","stringify","FAILED_PARSING_REQUEST","doHttpRequest","multiRequestResult","MultiRequestResult","result","serviceResult","KalturaAccessControlMessage","Drm","licenseUrl","BaseProvider","playerVersion","_partnerId","partnerId","_widgetId","widgetId","_uiConfId","uiConfId","_isAnonymous","ks","_ks","_playerVersion","defaultWidgetId","mediaInfo","playlistInfo","entryListInfo","concat","clone","node","e","keys","EntryList","items","defaultConfig","cdnUrl","serviceParams","apiVersion","format","useApiCaptions","OVPConfiguration","clientConfig","KalturaPlaybackSource","deliveryProfileId","protocols","flavorIds","map","protocol","returnValue","KalturaRuleAction","DRM_POLICY","BLOCK","PREVIEW","LIMIT_FLAVORS","ADD_TO_STORAGE","LIMIT_DELIVERY_PROFILES","SERVE_FROM_REMOTE_SERVER","REQUEST_HOST_REGEX","LIMIT_THUMBNAIL_CAPTURE","KalturaAccessControlModifyRequestHostRegexAction","pattern","replacement","replacmenServerNodeId","KalturaFlavorAsset","flavorParamsId","fileExt","bitrate","frameRate","isOriginal","isWeb","containerFormat","videoCodecId","language","QUEUED","CONVERTING","READY","DELETED","NOT_APPLICABLE","TEMP","WAIT_FOR_CONVERT","IMPORTING","VALIDATING","EXPORTING","KalturaPlaybackContext","actions","flavorAssets","flavor","undefined","getBlockAction","find","KalturaMetadata","metadataProfileId","metadataProfileVersion","metadataObjectType","objectId","version","created","setUTCSeconds","createdAt","updated","updatedAt","xml","AD_CUE_POINT","ANNOTATION","CODE_CUE_POINT","THUMB_CUE_POINT","ENTRY","CATEGORY","USER","PARTNER","DYNAMIC_OBJECT","VALID","INVALID","KalturaMetadataListResponse","responseObj","totalCount","metas","objects","meta","KalturaMediaEntry","entry","referenceId","externalSourceType","description","dataUrl","entryType","mediaType","flavorParamsIds","thumbnailUrl","tags","AUTOMATIC","EXTERNAL_MEDIA","MEDIA_CLIP","MIX","PLAYLIST","DATA","LIVE_STREAM","LIVE_CHANNEL","DOCUMENT","VIDEO","LIVE_STREAM_FLASH","LIVE_STREAM_WINDOWS_MEDIA","LIVE_STREAM_REAL_MEDIA","LIVE_STREAM_QUICK_TIME","ERROR_IMPORTING","ERROR_CONVERTING","SCAN_FAILURE","IMPORT","INFECTED","PRECONVERT","PENDING","MODERATE","BLOCKED","NO_CONTENT","PENDING_MODERATION","APPROVED","REJECTED","FLAGGED_FOR_REVIEW","AUTO_APPROVED","PlaySourceUrlBuilder","urlParams","config","serviceUrlOrigin","substr","lastIndexOf","entryId","extension","playUrl","endsWith","XmlParser","obj","nodeType","attributes","j","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","xmlToJson","old","Playlist","KalturaCaptionType","SRT","DFXP","WEBVTT","CAP","CaptionsFormatsMap","ExternalCaptionsBuilder","captions","caption","includes","webVttUrl","default","isDefault","languageCode","OVPProviderParser","mediaEntryResponse","mediaEntry","playbackContext","playBackContextResult","metadataList","metadataListResult","kalturaSources","_getParsedSources","playbackCaptions","createConfig","_fillBaseData","playlistResponse","playlist","playlistData","playlistItems","entries","entryList","_parseMetadata","_getEntryType","entryTypeEnum","typeEnum","MediaType","EntryType","progressiveSource","mediaSource","addAdaptiveSource","parsedSource","_parseAdaptiveSource","getProtocol","_getBaseProtocol","_parseProgressiveSources","kalturaSource","hasFlavorIds","build","_applyRegexAction","hasDrmData","drmParams","Scheme","videoSources","audioSources","sourceId","metaXml","domParser","DOMParser","replace","parseFromString","metasObj","exec","document","location","hasBlockAction","getErrorMessages","regexAction","getRequestHostRegexAction","regex","RegExp","match","OVPService","ovpParams","clientTag","multiReq","getUrl","FIELDS","BaseEntryResponseProfile","responseProfile","INCLUDE_FIELDS","fields","EXCLUDE_FIELDS","OVPBaseEntryService","serviceEntryId","tag","contextDataParams","flavorTags","redirectFromEntryId","getEntryListReqParams","idEqual","OVPMetadataService","objectIdEqual","metadataObjectTypeEqual","KalturaBaseEntryListResponse","OVPMediaEntryLoader","buildRequests","_entryId","list","getPlaybackContext","_requests","_response","OVPSessionService","OVPSessionLoader","anonymousSession","OVPDataLoaderManager","getMultiRequest","OVPPlaylistService","playlistId","KalturaPlaylist","KalturaMediaEntries","OVPPlaylistLoader","_playlistId","OVPEntryListLoader","_entries","OVPProvider","env","_setFilterOptionsConfig","filterOptions","networkRetryParameters","_dataLoader","_getEntryRedirectFilter","fetchData","_parseDataFromResponse","_filterOptionsConfig","mediaConfig","session","isAnonymous","_getDefaultSourcesObject","plugins","has","sessionLoader","mediaLoader","getMediaEntry","_getSourcesObject","_verifyMediaStatus","_verifyHasSources","EntryStatus","_parsePlaylistDataFromResponse","playlistConfig","_getPlaylistObject","playlistLoader","getPlaylist","_parseEntryListDataFromResponse","getEntryList","dvr","vr","sourcesObject","mediaSources","NAME","__NAME__","__VERSION__"],"mappings":"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","file":"playkit-ovp-provider.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ovp\"] = factory();\n\telse\n\t\troot[\"playkit\"] = root[\"playkit\"] || {}, root[\"playkit\"][\"providers\"] = root[\"playkit\"][\"providers\"] || {}, root[\"playkit\"][\"providers\"][\"ovp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","//@flow\nimport getLogger, {getLogLevel, LogLevel} from '../logger';\nimport {Severity} from './severity';\nimport type {SeverityType} from './severity';\nimport {Code} from './code';\nimport type {CodeType} from './code';\nimport {Category} from './category';\nimport type {CategoryType} from './category';\n\nconst CLASS_NAME: string = 'Error';\n\n/**\n * @classdesc This is a description of the error class.\n */\nexport default class Error {\n  severity: number;\n  category: number;\n  code: number;\n  data: any;\n  /**\n   * @enum {number}\n   */\n  static Severity: SeverityType = Severity;\n  /**\n   * @enum {number}\n   */\n  static Category: CategoryType = Category;\n  /**\n   * @enum {number}\n   */\n  static Code: CodeType = Code;\n  static _logger: any = getLogger(CLASS_NAME);\n\n  /**\n   * @constructor\n   * @param {number} severity - error's severity\n   * @param {number} category - error's category.\n   * @param {number} code - error's code.\n   * @param {any} data - additional data for the error.\n   */\n  constructor(severity: number, category: number, code: number, data: any = {}) {\n    this.severity = severity;\n    this.category = category;\n    this.code = code;\n    this.data = data;\n    if (getLogLevel(CLASS_NAME) !== LogLevel.OFF) {\n      Error._logger.error(`Category:${category} | Code:${code} |`, data);\n    }\n  }\n}\n","//@flow\n\ntype SeverityType = {[severity: string]: number};\n\nconst Severity: SeverityType = {\n  /**\n   * An error occurred, but the Player is attempting to recover from the error.\n   *\n   * If the Player cannot ultimately recover, it still may not throw a CRITICAL\n   * error.  For example, retrying for a media segment will never result in\n   * a CRITICAL error (the Player will just retry forever).\n   */\n  RECOVERABLE: 1,\n  /**\n   * A critical error that the library cannot recover from.  These usually cause\n   * the Player to stop loading or updating.  A new manifest must be loaded\n   * to reset the library.\n   */\n  CRITICAL: 2\n};\n\nexport {Severity};\nexport type {SeverityType};\n","//@flow\ntype CategoryType = {[category: string]: number};\n\nconst Category: CategoryType = {\n  /** Errors from the network stack. */\n  NETWORK: 1,\n  SERVICE: 2,\n  PROVIDER: 3\n};\n\nexport {Category};\nexport type {CategoryType};\n","//@flow\n\ntype CodeType = {[code: string]: number};\n\nconst Code: CodeType = {\n  /**\n   * A network request was made using an unsupported URI scheme.\n   */\n  UNSUPPORTED_SCHEME: 1000,\n\n  /**\n   * An HTTP network request returned an HTTP status that indicated a failure.\n   */\n  BAD_HTTP_STATUS: 1001,\n\n  /**\n   * An HTTP network request failed with an error, but not from the server.\n   */\n  HTTP_ERROR: 1002,\n\n  /**\n   * A network request timed out.\n   */\n  TIMEOUT: 1003,\n\n  /**\n   * A network request was made with a malformed data URI.\n   */\n  MALFORMED_DATA_URI: 1004,\n\n  /**\n   * The server responsded with 2xx response, but it couldn't be parsed\n   */\n  BAD_SERVER_RESPONSE: 1005,\n\n  /**\n   * The server response had a valid structure but contained an error from the API\n   */\n  MULTIREQUEST_API_ERROR: 1006,\n\n  /**\n   * The server response had a valid structure and valid API result, but it did not match the request\n   */\n  API_RESPONSE_MISMATCH: 1007,\n\n  /**\n   * The server responded with an error\n   */\n  ERROR: 2000,\n\n  /**\n   * The server responded with a block action\n   */\n  BLOCK_ACTION: 2001,\n\n  /**\n   * The server responded with status import or pre convert\n   */\n  MEDIA_STATUS_NOT_READY: 2002,\n\n  /**\n   * The provider is missing mandatory parameter/s\n   */\n\n  MISSING_MANDATORY_PARAMS: 3000,\n\n  /**\n   * The server responded with empty sources objects (for HLS, Dash and progressive)\n   */\n  MISSING_PLAY_SOURCE: 3001,\n\n  /**\n   * The provider doesn't implement the called api\n   */\n  METHOD_NOT_IMPLEMENTED: 3002\n};\n\nexport {Code};\nexport type {CodeType};\n","//@flow\nimport * as JsLogger from 'js-logger';\n\nexport type LogLevelObject = {value: number, name: string};\nexport type LogLevelType = {[level: string]: LogLevelObject};\n\nconst LogLevel: LogLevelType = {\n  DEBUG: JsLogger.DEBUG,\n  INFO: JsLogger.INFO,\n  TIME: JsLogger.TIME,\n  WARN: JsLogger.WARN,\n  ERROR: JsLogger.ERROR,\n  OFF: JsLogger.OFF\n};\n\nJsLogger.useDefaults({defaultLevel: JsLogger.ERROR});\n\n/**\n * sets the logger handler\n * @param {LogHandlerType} handler - the log level\n * @returns {void}\n */\nfunction setLogHandler(handler: LogHandlerType): void {\n  JsLogger.setHandler((messages, context) => handler(messages, context));\n}\n/**\n * get a logger\n * @param {?string} name - the logger name\n * @returns {Object} - the logger class\n */\nfunction getLogger(name?: string): Object {\n  if (!name) {\n    return JsLogger;\n  }\n  return JsLogger.get(name);\n}\n\n/**\n * get the log level\n * @param {?string} name - the logger name\n * @returns {LogLevelObject} - the log level\n */\nfunction getLogLevel(name?: string): LogLevelObject {\n  return getLogger(name).getLevel();\n}\n\n/**\n * sets the logger level\n * @param {LogLevelObject} level - the log level\n * @param {?string} name - the logger name\n * @returns {void}\n */\nfunction setLogLevel(level: LogLevelObject, name?: string): void {\n  getLogger(name).setLevel(level);\n}\n\nexport default getLogger;\nexport {LogLevel, getLogLevel, setLogLevel, setLogHandler};\n","//@flow\nimport MediaSources from './media-sources';\n\nexport default class MediaEntry {\n  static Type: {[type: string]: string} = {\n    VOD: 'Vod',\n    LIVE: 'Live',\n    IMAGE: 'Image',\n    AUDIO: 'Audio',\n    UNKNOWN: 'Unknown'\n  };\n\n  /**\n   * @member - entry id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - entry name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - entry sources\n   * @type {MediaSources}\n   */\n  sources: MediaSources;\n  /**\n   * @member - entry duration\n   * @type {number}\n   */\n  duration: number;\n  /**\n   * @member - entry type\n   * @type {string}\n   */\n  type: string;\n  /**\n   * @member - entry metadata\n   * @type {Object}\n   */\n  metadata: Object;\n  /**\n   * @member - DVR status\n   * @type {number}\n   */\n  dvrStatus: number;\n  /**\n   * @member - media status\n   * @type {number}\n   */\n  status: number;\n  /**\n   * @member - media poster\n   * @type {string | Array<Object>}\n   */\n  poster: string | Array<Object>;\n\n  /**\n   * @member - assetReferenceType\n   * @type {string }\n   */\n  assetReferenceType: string;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.metadata = new Map();\n    this.sources = new MediaSources();\n    this.type = MediaEntry.Type.UNKNOWN;\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaEntryObject} - The json class object.\n   */\n  toJSON(): ProviderMediaEntryObject {\n    return {\n      id: this.id,\n      name: this.name,\n      sources: this.sources.toJSON(),\n      duration: this.duration,\n      dvrStatus: this.dvrStatus,\n      status: this.status,\n      metadata: this.metadata,\n      type: this.type,\n      poster: this.poster,\n      assetReferenceType: this.assetReferenceType\n    };\n  }\n}\n","//@flow\nimport Error from './error/error';\n\nconst KALTURA_HEADER_PREFIX: string = 'x-';\n\nexport default class RequestBuilder {\n  /**\n   * @member - Service name\n   * @type {string}\n   */\n  service: string;\n  /**\n   * @member - Service action\n   * @type {string}\n   */\n  action: string;\n  /**\n   * @member - Service params\n   * @type {any}\n   */\n  params: any;\n  /**\n   * @memberof - Service headers\n   * @type {Map<string, string>}\n   */\n  headers: Map<string, string>;\n  /**\n   * @memberof - Service URL\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @memberof - Service method (POST,GET,DELETE etc..)\n   * @type {string}\n   */\n  method: string;\n  /**\n   * @memberof - Service tag\n   * @type {string}\n   */\n  tag: string;\n  /**\n   * @memberof - the response headers of the arra\n   * @type {Array<string>}\n   */\n  responseHeaders: Array<string>;\n  /**\n   * @description network retry configuration\n   * @memberof RequestBuilder\n   * @type {ProviderNetworkRetryParameters}\n   */\n  retryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  /**\n   * @description number of xhr attempts for the same multi - request.\n   * @memberof RequestBuilder\n   * @type {number}\n   * @private\n   */\n  _attemptCounter: number = 1;\n\n  /**\n   * @description hold the promise result of the XHR request(s) - if all tries fails, it rejects with the error.\n   * @memberof RequestBuilder\n   * @type {Object}\n   * @private\n   */\n  _requestPromise: Object;\n\n  /**\n   * @constructor\n   * @param {Map<string, string>} headers The request headers\n   */\n  constructor(headers: Map<string, string> = new Map()) {\n    this.headers = headers;\n  }\n\n  /**\n   * Builds restful service URL\n   * @function getUrl\n   * @param {string} serviceUrl - The service base URL\n   * @returns {string} The service URL\n   */\n  getUrl(serviceUrl: string): string {\n    return serviceUrl + '/service/' + this.service + (this.action ? '/action/' + this.action : '');\n  }\n\n  /**\n   * Executes service\n   * @function doHttpRequest\n   * @returns {Promise.<any>} Service response as promise\n   */\n  doHttpRequest(): Promise<any> {\n    const promise = new Promise((resolve, reject) => {\n      this._requestPromise = {\n        resolve,\n        reject\n      };\n    });\n    if (!this.url) {\n      this._requestPromise.reject(\n        new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MALFORMED_DATA_URI, {\n          url: this.url\n        })\n      );\n    }\n    this._createXHR();\n    return promise;\n  }\n\n  _createXHR(): void {\n    let request = new XMLHttpRequest();\n    request.onreadystatechange = () => {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          try {\n            const response = JSON.parse(request.responseText);\n            this.responseHeaders = this._getResponseHeaders(request);\n            // the promise returns the response for backwards compatibility\n            return this._requestPromise.resolve(response);\n          } catch (error) {\n            this._requestPromise.reject(\n              this._createError(request, Error.Code.BAD_SERVER_RESPONSE, {\n                text: request.responseText\n              })\n            );\n          }\n        }\n      }\n    };\n    request.open(this.method, this.url, this.retryConfig.async);\n    if (this.retryConfig.async && this.retryConfig.timeout) {\n      request.timeout = this.retryConfig.timeout;\n    }\n    const requestTime = performance.now();\n    request.ontimeout = () => {\n      this._handleError(request, Error.Code.TIMEOUT, {\n        timeout: (performance.now() - requestTime) / 1000,\n        statusText: request.statusText\n      });\n    };\n    request.onerror = request.onabort = () => {\n      this._handleError(request, Error.Code.HTTP_ERROR, {\n        text: request.responseText,\n        statusText: request.statusText\n      });\n    };\n    this.headers.forEach((value, key) => {\n      request.setRequestHeader(key, value);\n    });\n    request.send(this.params);\n  }\n\n  _getResponseHeaders(request: XMLHttpRequest): Array<string> {\n    return request\n      .getAllResponseHeaders()\n      .split('\\n')\n      .filter(header => header.toLowerCase().indexOf(KALTURA_HEADER_PREFIX) === 0);\n  }\n\n  _handleError(request: XMLHttpRequest, code: number, data: Object): Promise<*> | void {\n    const error = this._createError(request, code, data);\n    request.onreadystatechange = function () {};\n    request.onerror = function () {};\n    request.ontimeout = function () {};\n    request.onabort = function () {};\n    if (this.retryConfig.maxAttempts && this._attemptCounter < this.retryConfig.maxAttempts) {\n      this._attemptCounter++;\n      this._createXHR();\n    } else {\n      return this._requestPromise.reject(error);\n    }\n  }\n\n  _createError(request: XMLHttpRequest, code: number, data: Object): Error {\n    Object.assign(data, {\n      url: this.url,\n      headers: this._getResponseHeaders(request),\n      attempt: this._attemptCounter\n    });\n    return new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, code, data);\n  }\n}\n","/*!\r\n * js-logger - http://github.com/jonnyreeves/js-logger\r\n * Jonny Reeves, http://jonnyreeves.co.uk/\r\n * js-logger may be freely distributed under the MIT license.\r\n */\r\n(function (global) {\r\n\t\"use strict\";\r\n\r\n\t// Top level module for the global, static logger instance.\r\n\tvar Logger = { };\r\n\r\n\t// For those that are at home that are keeping score.\r\n\tLogger.VERSION = \"1.6.0\";\r\n\r\n\t// Function which handles all incoming log messages.\r\n\tvar logHandler;\r\n\r\n\t// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.\r\n\tvar contextualLoggersByNameMap = {};\r\n\r\n\t// Polyfill for ES5's Function.bind.\r\n\tvar bind = function(scope, func) {\r\n\t\treturn function() {\r\n\t\t\treturn func.apply(scope, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// Super exciting object merger-matron 9000 adding another 100 bytes to your download.\r\n\tvar merge = function () {\r\n\t\tvar args = arguments, target = args[0], key, i;\r\n\t\tfor (i = 1; i < args.length; i++) {\r\n\t\t\tfor (key in args[i]) {\r\n\t\t\t\tif (!(key in target) && args[i].hasOwnProperty(key)) {\r\n\t\t\t\t\ttarget[key] = args[i][key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t};\r\n\r\n\t// Helper to define a logging level object; helps with optimisation.\r\n\tvar defineLogLevel = function(value, name) {\r\n\t\treturn { value: value, name: name };\r\n\t};\r\n\r\n\t// Predefined logging levels.\r\n\tLogger.TRACE = defineLogLevel(1, 'TRACE');\r\n\tLogger.DEBUG = defineLogLevel(2, 'DEBUG');\r\n\tLogger.INFO = defineLogLevel(3, 'INFO');\r\n\tLogger.TIME = defineLogLevel(4, 'TIME');\r\n\tLogger.WARN = defineLogLevel(5, 'WARN');\r\n\tLogger.ERROR = defineLogLevel(8, 'ERROR');\r\n\tLogger.OFF = defineLogLevel(99, 'OFF');\r\n\r\n\t// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently\r\n\t// of each other.\r\n\tvar ContextualLogger = function(defaultContext) {\r\n\t\tthis.context = defaultContext;\r\n\t\tthis.setLevel(defaultContext.filterLevel);\r\n\t\tthis.log = this.info;  // Convenience alias.\r\n\t};\r\n\r\n\tContextualLogger.prototype = {\r\n\t\t// Changes the current logging level for the logging instance.\r\n\t\tsetLevel: function (newLevel) {\r\n\t\t\t// Ensure the supplied Level object looks valid.\r\n\t\t\tif (newLevel && \"value\" in newLevel) {\r\n\t\t\t\tthis.context.filterLevel = newLevel;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t// Gets the current logging level for the logging instance\r\n\t\tgetLevel: function () {\r\n\t\t\treturn this.context.filterLevel;\r\n\t\t},\r\n\r\n\t\t// Is the logger configured to output messages at the supplied level?\r\n\t\tenabledFor: function (lvl) {\r\n\t\t\tvar filterLevel = this.context.filterLevel;\r\n\t\t\treturn lvl.value >= filterLevel.value;\r\n\t\t},\r\n\r\n\t\ttrace: function () {\r\n\t\t\tthis.invoke(Logger.TRACE, arguments);\r\n\t\t},\r\n\r\n\t\tdebug: function () {\r\n\t\t\tthis.invoke(Logger.DEBUG, arguments);\r\n\t\t},\r\n\r\n\t\tinfo: function () {\r\n\t\t\tthis.invoke(Logger.INFO, arguments);\r\n\t\t},\r\n\r\n\t\twarn: function () {\r\n\t\t\tthis.invoke(Logger.WARN, arguments);\r\n\t\t},\r\n\r\n\t\terror: function () {\r\n\t\t\tthis.invoke(Logger.ERROR, arguments);\r\n\t\t},\r\n\r\n\t\ttime: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'start' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttimeEnd: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'end' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Invokes the logger callback if it's not being filtered.\r\n\t\tinvoke: function (level, msgArgs) {\r\n\t\t\tif (logHandler && this.enabledFor(level)) {\r\n\t\t\t\tlogHandler(msgArgs, merge({ level: level }, this.context));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Protected instance which all calls to the to level `Logger` module will be routed through.\r\n\tvar globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });\r\n\r\n\t// Configure the global Logger instance.\r\n\t(function() {\r\n\t\t// Shortcut for optimisers.\r\n\t\tvar L = Logger;\r\n\r\n\t\tL.enabledFor = bind(globalLogger, globalLogger.enabledFor);\r\n\t\tL.trace = bind(globalLogger, globalLogger.trace);\r\n\t\tL.debug = bind(globalLogger, globalLogger.debug);\r\n\t\tL.time = bind(globalLogger, globalLogger.time);\r\n\t\tL.timeEnd = bind(globalLogger, globalLogger.timeEnd);\r\n\t\tL.info = bind(globalLogger, globalLogger.info);\r\n\t\tL.warn = bind(globalLogger, globalLogger.warn);\r\n\t\tL.error = bind(globalLogger, globalLogger.error);\r\n\r\n\t\t// Don't forget the convenience alias!\r\n\t\tL.log = L.info;\r\n\t}());\r\n\r\n\t// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments\r\n\t// object with the supplied log messages and the second being a context object which contains a hash of stateful\r\n\t// parameters which the logging function can consume.\r\n\tLogger.setHandler = function (func) {\r\n\t\tlogHandler = func;\r\n\t};\r\n\r\n\t// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.\r\n\t// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).\r\n\tLogger.setLevel = function(level) {\r\n\t\t// Set the globalLogger's level.\r\n\t\tglobalLogger.setLevel(level);\r\n\r\n\t\t// Apply this level to all registered contextual loggers.\r\n\t\tfor (var key in contextualLoggersByNameMap) {\r\n\t\t\tif (contextualLoggersByNameMap.hasOwnProperty(key)) {\r\n\t\t\t\tcontextualLoggersByNameMap[key].setLevel(level);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Gets the global logging filter level\r\n\tLogger.getLevel = function() {\r\n\t\treturn globalLogger.getLevel();\r\n\t};\r\n\r\n\t// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,\r\n\t// default context and log handler.\r\n\tLogger.get = function (name) {\r\n\t\t// All logger instances are cached so they can be configured ahead of use.\r\n\t\treturn contextualLoggersByNameMap[name] ||\r\n\t\t\t(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));\r\n\t};\r\n\r\n\t// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will\r\n\t// write to the window's console object (if present); the optional options object can be used to customise the\r\n\t// formatter used to format each log message.\r\n\tLogger.createDefaultHandler = function (options) {\r\n\t\toptions = options || {};\r\n\r\n\t\toptions.formatter = options.formatter || function defaultMessageFormatter(messages, context) {\r\n\t\t\t// Prepend the logger's name to the log message for easy identification.\r\n\t\t\tif (context.name) {\r\n\t\t\t\tmessages.unshift(\"[\" + context.name + \"]\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments\r\n\t\t// that don't offer a native console method.\r\n\t\tvar timerStartTimeByLabelMap = {};\r\n\r\n\t\t// Support for IE8+ (and other, slightly more sane environments)\r\n\t\tvar invokeConsoleMethod = function (hdlr, messages) {\r\n\t\t\tFunction.prototype.apply.call(hdlr, console, messages);\r\n\t\t};\r\n\r\n\t\t// Check for the presence of a logger.\r\n\t\tif (typeof console === \"undefined\") {\r\n\t\t\treturn function () { /* no console */ };\r\n\t\t}\r\n\r\n\t\treturn function(messages, context) {\r\n\t\t\t// Convert arguments object to Array.\r\n\t\t\tmessages = Array.prototype.slice.call(messages);\r\n\r\n\t\t\tvar hdlr = console.log;\r\n\t\t\tvar timerLabel;\r\n\r\n\t\t\tif (context.level === Logger.TIME) {\r\n\t\t\t\ttimerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];\r\n\r\n\t\t\t\tif (messages[1] === 'start') {\r\n\t\t\t\t\tif (console.time) {\r\n\t\t\t\t\t\tconsole.time(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttimerStartTimeByLabelMap[timerLabel] = new Date().getTime();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (console.timeEnd) {\r\n\t\t\t\t\t\tconsole.timeEnd(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinvokeConsoleMethod(hdlr, [ timerLabel + ': ' +\r\n\t\t\t\t\t\t\t(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Delegate through to custom warn/error loggers if present on the console.\r\n\t\t\t\tif (context.level === Logger.WARN && console.warn) {\r\n\t\t\t\t\thdlr = console.warn;\r\n\t\t\t\t} else if (context.level === Logger.ERROR && console.error) {\r\n\t\t\t\t\thdlr = console.error;\r\n\t\t\t\t} else if (context.level === Logger.INFO && console.info) {\r\n\t\t\t\t\thdlr = console.info;\r\n\t\t\t\t} else if (context.level === Logger.DEBUG && console.debug) {\r\n\t\t\t\t\thdlr = console.debug;\r\n\t\t\t\t} else if (context.level === Logger.TRACE && console.trace) {\r\n\t\t\t\t\thdlr = console.trace;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toptions.formatter(messages, context);\r\n\t\t\t\tinvokeConsoleMethod(hdlr, messages);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// Configure and example a Default implementation which writes to the `window.console` (if present).  The\r\n\t// `options` hash can be used to configure the default logLevel and provide a custom message formatter.\r\n\tLogger.useDefaults = function(options) {\r\n\t\tLogger.setLevel(options && options.defaultLevel || Logger.DEBUG);\r\n\t\tLogger.setHandler(Logger.createDefaultHandler(options));\r\n\t};\r\n\r\n\t// Export to popular environments boilerplate.\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine(Logger);\r\n\t}\r\n\telse if (typeof module !== 'undefined' && module.exports) {\r\n\t\tmodule.exports = Logger;\r\n\t}\r\n\telse {\r\n\t\tLogger._prevLogger = global.Logger;\r\n\r\n\t\tLogger.noConflict = function () {\r\n\t\t\tglobal.Logger = Logger._prevLogger;\r\n\t\t\treturn Logger;\r\n\t\t};\r\n\r\n\t\tglobal.Logger = Logger;\r\n\t}\r\n}(this));\r\n","//@flow\nexport const MediaFormat: {[name: string]: ProviderMediaFormatType} = {\n  DASH: {\n    name: 'dash',\n    mimeType: 'application/dash+xml',\n    pathExt: 'mpd'\n  },\n  HLS: {\n    name: 'hls',\n    mimeType: 'application/x-mpegURL',\n    pathExt: 'm3u8'\n  },\n  WVM: {\n    name: 'wvm',\n    mimeType: 'video/wvm',\n    pathExt: 'wvm'\n  },\n  MP4: {\n    name: 'mp4',\n    mimeType: 'video/mp4',\n    pathExt: 'mp4'\n  },\n  MP3: {\n    name: 'mp3',\n    mimeType: 'audio/mpeg',\n    pathExt: 'mp3'\n  }\n};\n\nexport const SupportedStreamFormat: Map<string, ProviderMediaFormatType> = new Map([\n  ['mpegdash', MediaFormat.DASH],\n  ['applehttp', MediaFormat.HLS],\n  ['url', MediaFormat.MP4]\n]);\n\n/**\n * returns a boolean whether a source is progressive or not\n * @param {string} formatName - the format name\n * @returns {boolean} - if source is progressive or not\n */\nfunction isProgressiveSource(formatName: string): boolean {\n  const sourceFormat = SupportedStreamFormat.get(formatName);\n  return !!sourceFormat && sourceFormat.name === MediaFormat.MP4.name;\n}\n\nexport {isProgressiveSource};\n","//@flow\nexport default class ServiceResult {\n  /**\n   * @member - Is service returned an error\n   * @type {boolean}\n   */\n  hasError: boolean = false;\n  /**\n   * @member - The service error\n   * @type {ServiceError}\n   */\n  error: ServiceError;\n  /**\n   * @member - The service result data\n   * @type {Object}\n   */\n  data: Object;\n\n  /**\n   * @constructor\n   * @param {Object} response - Service response\n   */\n  constructor(response: Object) {\n    if (response.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.code, response.message);\n    } else if (response.error && response.error.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.error.code, response.error.message);\n    } else {\n      this.data = response;\n    }\n  }\n}\n\nclass ServiceError {\n  /**\n   * @member - The error code\n   * @type {string}\n   */\n  code: string;\n  /**\n   * @member - The error message\n   * @type {string}\n   */\n  message: string;\n\n  /**\n   * @constructor\n   * @param {string} code - The result code\n   * @param {string} message - The result message\n   */\n  constructor(code: string, message: string) {\n    this.code = code;\n    this.message = message;\n  }\n}\n","//@flow\nexport default class KalturaDrmPlaybackPluginData {\n  static Scheme: {[scheme: string]: string} = {\n    'drm.PLAYREADY_CENC': 'com.microsoft.playready',\n    'drm.WIDEVINE_CENC': 'com.widevine.alpha',\n    'fairplay.FAIRPLAY': 'com.apple.fairplay',\n    WIDEVINE_CENC: 'com.widevine.alpha',\n    PLAYREADY_CENC: 'com.microsoft.playready',\n    FAIRPLAY: 'com.apple.fairplay'\n  };\n\n  /**\n   * @member - The drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - The license URL\n   * @type {string}\n   */\n  licenseURL: string;\n\n  /**\n   * @member - The drm certificate\n   * @type {?string}\n   */\n  certificate: ?string;\n\n  /**\n   * @constructor\n   * @param {Object} drm The json response\n   */\n  constructor(drm: any) {\n    this.scheme = drm.scheme;\n    this.licenseURL = drm.licenseURL;\n    this.certificate = drm.certificate;\n  }\n}\n","// @flow\nimport MediaSource from './media-source';\nimport {MediaFormat} from './media-format';\n\nexport default class MediaSources {\n  /**\n   * Progressive download media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  progressive: Array<MediaSource>;\n  /**\n   * Dash media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  dash: Array<MediaSource>;\n  /**\n   * Hls media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  hls: Array<MediaSource>;\n  captions: Array<PKExternalCaptionObject>;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.progressive = [];\n    this.dash = [];\n    this.hls = [];\n  }\n\n  /**\n   * Maps the source to one of the containers according to his media format.\n   * @param {MediaSource} source - The source to add to one of the containers.\n   * @param {MediaFormat} mediaFormat - The media format of the source.\n   * @returns {void}\n   */\n  map(source: MediaSource, mediaFormat: ?ProviderMediaFormatType) {\n    if (mediaFormat) {\n      switch (mediaFormat.name) {\n        case MediaFormat.MP4.name:\n          this.progressive.push(source);\n          break;\n        case MediaFormat.DASH.name:\n          this.dash.push(source);\n          break;\n        case MediaFormat.HLS.name:\n          this.hls.push(source);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourcesObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourcesObject {\n    const response: ProviderMediaSourcesObject = {\n      progressive: [],\n      dash: [],\n      hls: []\n    };\n    this.progressive.forEach(p => response.progressive.push(p.toJSON()));\n    this.hls.forEach(h => response.hls.push(h.toJSON()));\n    this.dash.forEach(d => response.dash.push(d.toJSON()));\n    return response;\n  }\n}\n","//@flow\nimport Drm from './drm';\n\nexport default class MediaSource {\n  /**\n   * @member - media source id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - media source url\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - media source mimetype\n   * @type {string}\n   */\n  mimetype: string;\n  /**\n   * @member - media source drm data\n   * @type {Array<Drm>}\n   */\n  drmData: Array<Drm>;\n  /**\n   * @member - media source bandwidth\n   * @type {number}\n   */\n  bandwidth: number;\n  /**\n   * @member - media source width\n   * @type {number}\n   */\n  width: number;\n  /**\n   * @member - media source height\n   * @type {number}\n   */\n  height: number;\n  /**\n   * @member - media source label\n   * @type {string}\n   */\n  label: string;\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourceObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourceObject {\n    const response: ProviderMediaSourceObject = {\n      id: this.id,\n      url: this.url,\n      mimetype: this.mimetype\n    };\n    if (this.bandwidth) response.bandwidth = this.bandwidth;\n    if (this.width) response.width = this.width;\n    if (this.height) response.height = this.height;\n    if (this.label) response.label = this.label;\n    if (this.drmData && this.drmData.length > 0) {\n      response.drmData = [];\n      this.drmData.forEach(d => {\n        if (Array.isArray(response.drmData)) {\n          response.drmData.push(d.toJSON());\n        }\n      });\n    }\n    return response;\n  }\n}\n","// @flow\nimport MultiRequestBuilder, {MultiRequestResult} from './multi-request-builder';\nimport Error from '../../util/error/error';\n\nexport default class DataLoaderManager {\n  /**\n   * @member - Loaders response map index\n   * @type {Map<string,Array<number>>}\n   * @private\n   */\n  _loadersResponseMap: Map<string, Array<number>> = new Map();\n  /**\n   * @member - Loaders multi request\n   * @type {MultiRequestBuilder}\n   * @protected\n   */\n  _multiRequest: MultiRequestBuilder;\n  /**\n   * @member - Loaders multi response\n   * @type {MultiRequestResult}\n   * @private\n   */\n  _multiResponse: MultiRequestResult;\n  /**\n   * @member - Loaders to execute\n   * @type {Map<string,Function>}\n   * @private\n   */\n  _loaders: Map<string, ILoader> = new Map();\n\n  _networkRetryConfig: ProviderNetworkRetryParameters;\n\n  constructor(networkRetryConfig: ProviderNetworkRetryParameters) {\n    this._networkRetryConfig = networkRetryConfig;\n  }\n\n  /**\n   * Add loader too execution loaders map\n   * @function\n   * @param {Function} loader Loader to add\n   * @param {Object} params Loader params\n   * @returns {void}\n   */\n  add(loader: Function, params: Object): void {\n    let execution_loader = new loader(params);\n    if (execution_loader.isValid()) {\n      this._loaders.set(loader.id, execution_loader);\n      // Get the start index from the multiReqeust before adding current execution_loader requests\n      let startIndex = this._multiRequest.requests.length;\n      // Get the requests\n      let requests = execution_loader.requests;\n      this._multiRequest.retryConfig = this._networkRetryConfig;\n      // Add requests to muktiRequest queue\n      requests.forEach(request => {\n        this._multiRequest.add(request);\n      });\n      // Create range array of current execution_loader requests\n      let executionLoaderResponseMap = Array.from(new Array(requests.length), (val, index) => index + startIndex);\n      // Add to map\n      this._loadersResponseMap.set(loader.id, executionLoaderResponseMap);\n    }\n  }\n\n  /**\n   * Get data from all loaders using multi request\n   * @function\n   * @returns {Promise} Promise\n   */\n  fetchData(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this._multiRequest.execute().then(\n        data => {\n          this._multiResponse = data.response;\n          let preparedData: Object = this.prepareData(data.response);\n          if (preparedData.success) {\n            resolve(this._loaders);\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.API_RESPONSE_MISMATCH, {\n                headers: data.headers\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n\n  /**\n   * Prepare fetched data\n   * @function\n   * @param {MultiRequestResult} response - The multi request result\n   * @returns {Object} - The prepared data\n   */\n  prepareData(response: MultiRequestResult): Object {\n    this._loaders.forEach((loader, name) => {\n      let loaderDataIndexes = this._loadersResponseMap.get(name);\n      try {\n        if (loaderDataIndexes && loaderDataIndexes.length > 0) {\n          loader.response = response.results.slice(loaderDataIndexes[0], loaderDataIndexes[loaderDataIndexes.length - 1] + 1);\n        }\n      } catch (err) {\n        return {success: false, error: err};\n      }\n    });\n    return {success: true, data: this._loaders};\n  }\n}\n","//@flow\nimport RequestBuilder from '../../util/request-builder';\nimport getLogger from '../../util/logger';\nimport ServiceResult from './base-service-result';\nimport Error from '../../util/error/error';\n\nexport default class MultiRequestBuilder extends RequestBuilder {\n  static _logger = getLogger('MultiRequestBuilder');\n  /**\n   * @memberof - MultiRequestBuilder\n   * @type {Array<RequestBuilder>}\n   */\n  requests: Array<RequestBuilder> = [];\n  /**\n   * Adds request to requests array\n   * @function add\n   * @param {RequestBuilder} request The request\n   * @returns {MultiRequestBuilder} The multiRequest\n   */\n  add(request: RequestBuilder): MultiRequestBuilder {\n    this.requests.push(request);\n    const requestParams = {};\n    const serviceDef: Object = {service: request.service, action: request.action};\n    Object.assign(requestParams, {[this.requests.length]: Object.assign(serviceDef, request.params)});\n    Object.assign(requestParams, this.params);\n    this.params = requestParams;\n    return this;\n  }\n\n  /**\n   * Executes a multi request\n   * @function execute\n   * @returns {Promise} The multirequest execution promise\n   */\n  execute(): Promise<Object> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.params = JSON.stringify(this.params);\n      } catch (err) {\n        MultiRequestBuilder._logger.error(`${err.message}`);\n        reject(\n          new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.FAILED_PARSING_REQUEST, {\n            error: err,\n            params: this.params\n          })\n        );\n      }\n      this.doHttpRequest().then(\n        data => {\n          const multiRequestResult = new MultiRequestResult(data);\n          if (multiRequestResult.success) {\n            resolve({\n              headers: this.responseHeaders,\n              response: multiRequestResult\n            });\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MULTIREQUEST_API_ERROR, {\n                url: this.url,\n                headers: this.responseHeaders,\n                results: multiRequestResult.results\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n}\n\nexport class MultiRequestResult {\n  static _logger = getLogger('MultiRequestResult');\n  /**\n   * @memberof MultiRequestResult\n   * @type {boolean}\n   */\n  success: boolean;\n  /**\n   * @memberof MultiRequestResult\n   * @type {Object}\n   */\n  results: Array<ServiceResult> = [];\n  /**\n   * @constructor\n   * @param {Object} response data\n   */\n  constructor(response: Object) {\n    this.success = true;\n    const responseArr = response.result ? response.result : response;\n    responseArr.forEach(result => {\n      const serviceResult: ServiceResult = new ServiceResult(result);\n      this.results.push(serviceResult);\n      if (serviceResult.hasError) {\n        MultiRequestResult._logger.error(\n          `Service returned an error with error code: ${serviceResult.error.code} and message: ${serviceResult.error.message}.`\n        );\n        this.success = false;\n        return;\n      }\n    });\n  }\n}\n","//@flow\nexport default class KalturaAccessControlMessage {\n  /**\n   * @member - The access control message\n   * @type {string}\n   */\n  message: string;\n  /**\n   *  @member - The access control message code\n   * @@type {string}\n   */\n  code: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The json response\n   */\n  constructor(data: Object) {\n    this.message = data.message;\n    this.code = data.code;\n  }\n}\n","//@flow\nexport default class Drm {\n  /**\n   * @member - license url\n   * @type {string}\n   */\n  licenseUrl: string;\n  /**\n   * @member - drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - drm certificate\n   * @type {string}\n   */\n  certificate: string;\n\n  /**\n   * @constructor\n   * @param {string} licenseUrl - the license url\n   * @param {string} scheme - the drm scheme\n   * @param {?string} certificate - the drm certificate\n   */\n  constructor(licenseUrl: string, scheme: string, certificate: ?string) {\n    this.licenseUrl = licenseUrl;\n    this.scheme = scheme;\n    if (certificate) {\n      this.certificate = certificate;\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderDrmDataObject} - The json class object.\n   */\n  toJSON(): ProviderDrmDataObject {\n    const response: ProviderDrmDataObject = {\n      licenseUrl: this.licenseUrl,\n      scheme: this.scheme\n    };\n    if (this.certificate) response.certificate = this.certificate;\n    return response;\n  }\n}\n","// @flow\nimport {setLogLevel, getLogLevel, LogLevel, setLogHandler} from '../../util/logger';\nimport DataLoaderManager from './data-loader-manager';\nimport Error from '../../util/error/error';\n\nexport default class BaseProvider<MI> {\n  _partnerId: number;\n  _widgetId: ?string;\n  _ks: string;\n  _uiConfId: ?number;\n  _dataLoader: DataLoaderManager;\n  _playerVersion: string;\n  _logger: any;\n  _isAnonymous: boolean;\n  _networkRetryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  get partnerId(): number {\n    return this._partnerId;\n  }\n\n  get widgetId(): string {\n    return this._widgetId || this.defaultWidgetId;\n  }\n\n  get defaultWidgetId(): string {\n    return '_' + this._partnerId;\n  }\n\n  get uiConfId(): ?number {\n    return this._uiConfId;\n  }\n\n  get ks(): string {\n    return this._ks;\n  }\n\n  set ks(value: string): void {\n    this._ks = value;\n  }\n\n  get playerVersion(): string {\n    return this._playerVersion;\n  }\n\n  get isAnonymous(): boolean {\n    return this._isAnonymous;\n  }\n\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    this._partnerId = options.partnerId;\n    this._widgetId = options.widgetId;\n    this._uiConfId = options.uiConfId;\n    this._isAnonymous = !options.ks;\n    this._ks = options.ks || '';\n    this._playerVersion = playerVersion;\n    if (options.log && options.log.level && this.LogLevel[options.log.level]) {\n      setLogLevel(this.LogLevel[options.log.level]);\n    }\n    if (options.log && typeof options.log.handler === 'function') {\n      setLogHandler(options.log.handler);\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getMediaConfig(mediaInfo: MI): Promise<ProviderMediaConfigObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'getMediaConfig method must be implement by the derived class'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getPlaylistConfig(playlistInfo: ProviderPlaylistInfoObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading playlist by id'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading entry list'\n      })\n    );\n  }\n\n  _verifyHasSources(sources: ProviderMediaConfigSourcesObject) {\n    if (sources.hls.concat(sources.dash, sources.progressive).length === 0) {\n      throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.MISSING_PLAY_SOURCE, {\n        action: '',\n        messages: `No play source for entry id: ${sources.id}`\n      });\n    }\n  }\n\n  get LogLevel(): {[level: string]: Object} {\n    return LogLevel;\n  }\n\n  getLogLevel(name?: string): Object {\n    return getLogLevel(name);\n  }\n\n  setLogLevel(level: Object, name?: string): void {\n    setLogLevel(level, name);\n  }\n}\n","const clone = data => {\n  let node;\n  if (Array.isArray(data)) {\n    node = data.length > 0 ? data.slice(0) : [];\n    node.forEach((e, i) => {\n      if ((typeof e === 'object' && e !== {}) || (Array.isArray(e) && e.length > 0)) {\n        node[i] = clone(e);\n      }\n    });\n  } else if (typeof data === 'object') {\n    node = Object.assign({}, data);\n    Object.keys(node).forEach(key => {\n      if ((typeof node[key] === 'object' && node[key] !== {}) || (Array.isArray(node[key]) && node[key].length > 0)) {\n        node[key] = clone(node[key]);\n      }\n    });\n  } else {\n    node = data;\n  }\n  return node;\n};\n\nexport {clone};\n","//@flow\n\nimport MediaEntry from '../entities/media-entry';\n\nexport default class EntryList {\n  /**\n   * @member - entry list items\n   * @type {Array<MediaEntry>}\n   */\n  items: Array<MediaEntry>;\n\n  constructor() {\n    this.items = [];\n  }\n}\n","//@flow\nimport {clone} from '../../util/clone';\n\nconst defaultConfig: Object = {\n  serviceUrl: 'https://cdnapisec.kaltura.com/api_v3',\n  cdnUrl: 'https://cdnapisec.kaltura.com',\n  serviceParams: {\n    apiVersion: '3.3.0',\n    format: 1\n  },\n  useApiCaptions: true\n};\n\nexport default class OVPConfiguration {\n  static set(clientConfig?: ProviderEnvConfigObject) {\n    if (clientConfig) {\n      Object.assign(defaultConfig, clientConfig);\n    }\n  }\n\n  static get(): Object {\n    return clone(defaultConfig);\n  }\n}\n\nexport {OVPConfiguration};\n","//@flow\nimport KalturaDrmPlaybackPluginData from '../../common/response-types/kaltura-drm-playback-plugin-data';\n\nexport type OVPKalturaPlaybackSource = KalturaPlaybackSource;\n\nexport default class KalturaPlaybackSource {\n  /**\n   * @member - source format according to delivery profile streamer type (applehttp, mpegdash etc.)\n   * @type {string}\n   */\n  format: string;\n  /**\n   * @member - delivery profile Id\n   * @type {string}\n   */\n  deliveryProfileId: string;\n  /**\n   * @member - The source URL\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - comma separated string according to deliveryProfile media protocols ('http,https' etc.)\n   * @type {string}\n   */\n  protocols: string;\n  /**\n   * @member - comma separated string of flavor ids\n   * @type {string}\n   */\n  flavorIds: string;\n  /**\n   * @member - drm data object containing relevant license url ,scheme name and certificate\n   * @type {Array<KalturaDrmPlaybackPluginData>}\n   */\n  drm: Array<KalturaDrmPlaybackPluginData> = [];\n\n  /**\n   * @constructor\n   * @param {Object} source The response\n   */\n  constructor(source: Object) {\n    this.format = source.format;\n    this.deliveryProfileId = source.deliveryProfileId;\n    this.url = source.url;\n    this.protocols = source.protocols;\n    this.flavorIds = source.flavorIds;\n    if (source.drm) {\n      source.drm.map(drm => this.drm.push(new KalturaDrmPlaybackPluginData(drm)));\n    }\n  }\n\n  /**\n   * Checks if source has DRM data\n   * @function hasDrmData\n   * @returns {boolean} Is source has DRM\n   */\n  hasDrmData(): boolean {\n    return this.drm && this.drm.length > 0;\n  }\n\n  /**\n   * Checks if source has flavor IDs\n   * @function hasFlavorIds\n   * @returns {boolean} Is source ha flavor IDs\n   */\n  hasFlavorIds(): boolean {\n    return !!this.flavorIds && this.flavorIds.length > 0;\n  }\n\n  /**\n   * Returns source desired protocol if supported\n   * @param {string} protocol - the desired protocol for the source (base play url protocol)\n   * @returns {string} - protocol if protocol is in the protocols list - if not empty string returned\n   */\n  getProtocol(protocol: string): string {\n    let returnValue: string = '';\n    if (this.protocols && this.protocols.length > 0) {\n      let protocolsArr: Array<string> = this.protocols.split(',');\n      protocolsArr.forEach(p => {\n        if (p === protocol) {\n          returnValue = p;\n        }\n      });\n    } else if (protocol === 'http') {\n      return protocol;\n    }\n    return returnValue;\n  }\n}\n","//@flow\nexport default class KalturaRuleAction {\n  static Type: {[type: string]: string | number} = {\n    DRM_POLICY: 'drm.DRM_POLICY',\n    BLOCK: 1,\n    PREVIEW: 2,\n    LIMIT_FLAVORS: 3,\n    ADD_TO_STORAGE: 4,\n    LIMIT_DELIVERY_PROFILES: 5,\n    SERVE_FROM_REMOTE_SERVER: 6,\n    REQUEST_HOST_REGEX: 7,\n    LIMIT_THUMBNAIL_CAPTURE: 8\n  };\n\n  /**\n   * @member - The type of the action\n   * @type {string|number}\n   */\n  type: string | number;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    this.type = data.type;\n  }\n}\n","//@flow\nimport KalturaRuleAction from './kaltura-rule-action';\n\nexport default class KalturaAccessControlModifyRequestHostRegexAction extends KalturaRuleAction {\n  /**\n   * @member - Request host regex pattern\n   * @type {string}\n   */\n  pattern: string;\n  /**\n   * @member - Request host regex replacement\n   * @type {string}\n   */\n  replacement: string;\n  /**\n   * @member - serverNodeId to generate replacment host from\n   * @type {number}\n   */\n  replacmenServerNodeId: number;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    super(data);\n    this.pattern = data.pattern;\n    this.replacement = data.replacement;\n    this.replacmenServerNodeId = data.replacmenServerNodeId;\n  }\n}\n","//@flow\nexport default class KalturaFlavorAsset {\n  static Status: {[status: string]: number} = {\n    ERROR: -1,\n    QUEUED: 0,\n    CONVERTING: 1,\n    READY: 2,\n    DELETED: 3,\n    NOT_APPLICABLE: 4,\n    TEMP: 5,\n    WAIT_FOR_CONVERT: 6,\n    IMPORTING: 7,\n    VALIDATING: 8,\n    EXPORTING: 9\n  };\n\n  /**\n   * @member - The ID of the Flavor Asset\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member -The Flavor Params used to create this Flavor Asset\n   * @type {string}\n   */\n  flavorParamsId: string;\n  /**\n   * @member -The file extension\n   * @type {string}\n   */\n  fileExt: string;\n  /**\n   * @member - The overall bitrate (in KBits) of the Flavor Asset\n   *  @type {string}\n   */\n  bitrate: number;\n  /**\n   * @member - The width of the Flavor Asset\n   * @type {number}\n   */\n  width: number;\n  /**\n   * @member - The height of the Flavor Asset\n   * @type {number}\n   */\n  height: number;\n  /**\n   * @member - The frame rate (in FPS) of the Flavor Asset\n   * @type {number}\n   */\n  frameRate: number;\n  /**\n   * @member - True if this Flavor Asset is the original source\n   * @type {number}\n   */\n  isOriginal: boolean;\n  /**\n   * @member - True if this Flavor Asset is playable in KDP\n   * @type {boolean}\n   */\n  isWeb: boolean;\n  /**\n   * @member - The container format\n   * @type {boolean}\n   */\n  containerFormat: string;\n  /**\n   *@member - The video codec\n   * @type {boolean}\n   */\n  videoCodecId: string;\n  /**\n   * @member - The status of the Flavor Asset\n   * @type {number}\n   */\n  status: number;\n  /**\n   * @member - The language of the flavor asset\n   * @type {Status}\n   */\n  language: string;\n  /**\n   * @member - The label of the flavor asset\n   * @type {string}\n   */\n  label: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The json response\n   */\n  constructor(data: any) {\n    this.id = data.id;\n    this.flavorParamsId = data.flavorParamsId;\n    this.fileExt = data.fileExt;\n    this.bitrate = data.bitrate;\n    this.width = data.width;\n    this.height = data.height;\n    this.id = data.id;\n    this.frameRate = data.frameRate;\n    this.isOriginal = data.isOriginal;\n    this.isWeb = data.isWeb;\n    this.containerFormat = data.containerFormat;\n    this.videoCodecId = data.videoCodecId;\n    this.status = data.status;\n    this.language = data.language;\n    this.label = data.label;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaAccessControlMessage from '../../common/response-types/kaltura-access-control-message';\nimport KalturaPlaybackSource from './kaltura-playback-source';\nimport KalturaAccessControlModifyRequestHostRegexAction from './kaltura-access-control-modify-request-host-regex-action';\nimport KalturaRuleAction from './kaltura-rule-action';\nimport KalturaFlavorAsset from './kaltura-flavor-asset';\n\nexport default class KalturaPlaybackContext extends ServiceResult {\n  /**\n   * @member - The playback sources\n   * @type {Array<KalturaPlaybackSource>}\n   */\n  sources: Array<KalturaPlaybackSource> = [];\n  /**\n   * @member - Array of actions as received from the rules that invalidated\n   * @type {Array<KalturaRuleAction>}\n   */\n  actions: Array<KalturaRuleAction> = [];\n  /**\n   * @member - Array of actions as received from the rules that invalidated\n   * @type {Array<KalturaAccessControlMessage>}\n   */\n  messages: Array<KalturaAccessControlMessage> = [];\n  /**\n   * @member - The flavor assets\n   * @type {Array<KalturaFlavorAsset>}\n   */\n  flavorAssets: Array<KalturaFlavorAsset> = [];\n\n  /**\n   * @constructor\n   * @param {Object} response The response\n   */\n  constructor(response: Object) {\n    super(response);\n    if (!this.hasError) {\n      const messages = response.messages;\n      if (messages) {\n        messages.map(message => this.messages.push(new KalturaAccessControlMessage(message)));\n      }\n      const actions = response.actions;\n      if (actions) {\n        actions.map(action => {\n          if (action.type === KalturaRuleAction.Type.REQUEST_HOST_REGEX) {\n            this.actions.push(new KalturaAccessControlModifyRequestHostRegexAction(action));\n          } else {\n            this.actions.push(new KalturaRuleAction(action));\n          }\n        });\n      }\n      const sources = response.sources;\n      if (sources) {\n        sources.map(source => this.sources.push(new KalturaPlaybackSource(source)));\n      }\n      const flavorAssets = response.flavorAssets;\n      if (flavorAssets) {\n        flavorAssets.map(flavor => this.flavorAssets.push(new KalturaFlavorAsset(flavor)));\n      }\n    }\n  }\n\n  hasBlockAction(): boolean {\n    return this.getBlockAction() !== undefined;\n  }\n\n  getBlockAction(): ?KalturaRuleAction {\n    return this.actions.find(action => action.type === KalturaRuleAction.Type.BLOCK);\n  }\n\n  getErrorMessages(): Array<KalturaAccessControlMessage> {\n    return this.messages;\n  }\n\n  /**\n   * Get the KalturaAccessControlModifyRequestHostRegexAction action\n   * @function getRequestHostRegexAction\n   * @returns {?KalturaAccessControlModifyRequestHostRegexAction} The action\n   * */\n  getRequestHostRegexAction(): ?KalturaAccessControlModifyRequestHostRegexAction {\n    const action = this.actions.find(action => action.type === KalturaRuleAction.Type.REQUEST_HOST_REGEX);\n    if (action instanceof KalturaAccessControlModifyRequestHostRegexAction) {\n      return action;\n    }\n  }\n}\n","//@flow\nexport default class KalturaMetadata {\n  static ObjectType: {[type: string]: string | number} = {\n    AD_CUE_POINT: 'adCuePointMetadata.AdCuePoint',\n    ANNOTATION: 'annotationMetadata.Annotation',\n    CODE_CUE_POINT: 'codeCuePointMetadata.CodeCuePoint',\n    THUMB_CUE_POINT: 'thumbCuePointMetadata.thumbCuePoint',\n    ENTRY: 1,\n    CATEGORY: 2,\n    USER: 3,\n    PARTNER: 4,\n    DYNAMIC_OBJECT: 5\n  };\n\n  static Status: {[status: string]: number} = {\n    VALID: 1,\n    INVALID: 2,\n    DELETED: 3\n  };\n\n  id: number;\n  metadataProfileId: number;\n  metadataProfileVersion: number;\n  metadataObjectType: string | number;\n  objectId: string;\n  version: number;\n  created: Date;\n  updated: Date;\n  status: number;\n  xml: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The response\n   */\n  constructor(data: Object) {\n    this.id = data.id;\n    this.metadataProfileId = data.metadataProfileId;\n    this.metadataProfileVersion = data.metadataProfileVersion;\n    this.metadataProfileId = data.metadataProfileId;\n    this.metadataObjectType = data.metadataObjectType;\n    this.objectId = data.objectId;\n    this.version = data.version;\n    this.created = new Date(0);\n    this.created.setUTCSeconds(data.createdAt);\n    this.updated = new Date(0);\n    this.updated.setUTCSeconds(data.updatedAt);\n    this.status = data.status;\n    this.xml = data.xml;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaMetadata from './kaltura-metadata';\n\nexport default class KalturaMetadataListResponse extends ServiceResult {\n  totalCount: number;\n  metas: Array<KalturaMetadata>;\n\n  /**\n   * @constructor\n   * @param {Object} responseObj The response\n   */\n  constructor(responseObj: Object) {\n    super(responseObj);\n    if (!this.hasError) {\n      this.totalCount = responseObj.totalCount;\n      if (this.totalCount > 0) {\n        this.metas = [];\n        responseObj.objects.map(meta => this.metas.push(new KalturaMetadata(meta)));\n      }\n    }\n  }\n}\n","//@flow\nexport default class KalturaMediaEntry {\n  static EntryType: {[entryType: string]: {value: number | string}} = {\n    AUTOMATIC: {value: -1},\n    EXTERNAL_MEDIA: {value: 'externalMedia.externalMedia'},\n    MEDIA_CLIP: {value: 1},\n    MIX: {value: 2},\n    PLAYLIST: {value: 5},\n    DATA: {value: 6},\n    LIVE_STREAM: {value: 7},\n    LIVE_CHANNEL: {value: 8},\n    DOCUMENT: {value: 10}\n  };\n\n  static MediaType: {[mediaType: string]: {value: number}} = {\n    VIDEO: {value: 1},\n    IMAGE: {value: 2},\n    AUDIO: {value: 5},\n    LIVE_STREAM_FLASH: {value: 201},\n    LIVE_STREAM_WINDOWS_MEDIA: {value: 202},\n    LIVE_STREAM_REAL_MEDIA: {value: 203},\n    LIVE_STREAM_QUICK_TIME: {value: 204}\n  };\n\n  static EntryStatus: {[status: string]: string | number} = {\n    ERROR_IMPORTING: -2,\n    ERROR_CONVERTING: -1,\n    SCAN_FAILURE: 'virusScan.ScanFailure',\n    IMPORT: 0,\n    INFECTED: 'virusScan.Infected',\n    PRECONVERT: 1,\n    READY: 2,\n    DELETED: 3,\n    PENDING: 4,\n    MODERATE: 5,\n    BLOCKED: 6,\n    NO_CONTENT: 7\n  };\n\n  static EntryModerationStatus: {[status: string]: number} = {\n    PENDING_MODERATION: 1,\n    APPROVED: 2,\n    REJECTED: 3,\n    FLAGGED_FOR_REVIEW: 4,\n    MODERATE: 5,\n    AUTO_APPROVED: 6\n  };\n\n  /**\n   * @member - The entry id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - The entry referenceId\n   * @type {string}\n   */\n  referenceId: string;\n  /**\n   * @member - The entry externalSourceType\n   * @type {string}\n   */\n  externalSourceType: string;\n  /**\n   * @member - Entry name (Min 1 chars)\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - Entry description\n   * @type {string}\n   */\n  description: string;\n  /**\n   * @member - The URL used for playback. This is not the download URL.\n   * @type {string}\n   */\n  dataUrl: string;\n  /**\n   * @member - Comma separated flavor params ids that exists for this media entry\n   * @type {string}\n   */\n  flavorParamsIds: string;\n  /**\n   * @member - The entry duration\n   * @type {number}\n   */\n  duration: number;\n  /**\n   * @member - The type of the entry, this is auto filled by the derived entry object\n   * @type {string | number}\n   */\n  type: string | number;\n  /**\n   * @member - The type of the entry, this is auto filled by the derived entry object (Image, Audio etc.)\n   * @type {number}\n   */\n  entryType: number;\n  /**\n   * @member - Entry poster image\n   * @type {string}\n   */\n  poster: string;\n  /**\n   * @member - DVR status\n   * @type {number}\n   */\n  dvrStatus: number;\n  /**\n   * @member - Entry tags\n   * @type {string}\n   */\n  tags: string;\n\n  /**\n   * @member - Entry status\n   * @type {number}\n   */\n  status: number;\n\n  /**\n   * @constructor\n   * @param {Object} entry The json response\n   */\n  constructor(entry: Object) {\n    this.id = entry.id;\n    this.referenceId = entry.referenceId;\n    this.externalSourceType = entry.externalSourceType;\n    this.name = entry.name;\n    this.description = entry.description;\n    this.dataUrl = entry.dataUrl;\n    this.type = entry.type;\n    this.entryType = entry.mediaType;\n    this.flavorParamsIds = entry.flavorParamsIds;\n    this.duration = entry.duration;\n    this.poster = entry.thumbnailUrl;\n    this.status = entry.status;\n    this.dvrStatus = entry.dvrStatus;\n    this.tags = entry.tags;\n  }\n}\n","//@flow\nimport OVPConfiguration from './config';\n\ntype urlParamsType = {\n  partnerId: number,\n  entryId: string,\n  ks: string,\n  uiConfId: ?number,\n  format: string,\n  protocol: string,\n  extension: string,\n  flavorIds: ?string\n};\n\nexport default class PlaySourceUrlBuilder {\n  /**\n   * Returns source url by given url params\n   * @function build\n   * @param {urlParamsType} urlParams The params\n   * @returns {string} The URL\n   * @static\n   */\n  static build(urlParams: urlParamsType): string {\n    const config = OVPConfiguration.get();\n    const serviceUrlOrigin: string = config.serviceUrl.substr(0, config.serviceUrl.lastIndexOf('/'));\n    const {partnerId, entryId, ks, uiConfId, format, protocol, extension, flavorIds} = urlParams;\n\n    //verify mandatory params\n    if (!serviceUrlOrigin || !partnerId || !entryId || !format || !protocol) {\n      return '';\n    }\n\n    let playUrl = serviceUrlOrigin;\n    if (!serviceUrlOrigin.endsWith('/')) {\n      playUrl += '/';\n    }\n    playUrl += 'p/' + partnerId + '/sp/' + partnerId + '00' + '/playManifest/entryId/' + entryId + '/protocol/' + protocol + '/format/' + format;\n\n    if (flavorIds) {\n      playUrl += '/flavorIds/' + flavorIds;\n    } else if (uiConfId) {\n      playUrl += '/uiConfId/' + uiConfId;\n    }\n\n    if (ks !== '') {\n      playUrl += '/ks/' + ks;\n    }\n\n    if (extension !== '') {\n      playUrl += '/a.' + extension;\n    }\n\n    if (uiConfId && flavorIds !== '') {\n      playUrl += '?uiConfId=' + uiConfId;\n    }\n\n    return playUrl;\n  }\n}\n","//@flow\nexport default class XmlParser {\n  /**\n   * Parses xml string to json object\n   * @param {string} xml The xml to parse\n   * @returns {{}} The parsed xml as Json object\n   * @static\n   */\n  static xmlToJson(xml: Object) {\n    let obj = {};\n    if (xml.nodeType === 1) {\n      if (xml.attributes.length > 0) {\n        obj['@attributes'] = {};\n        for (let j = 0; j < xml.attributes.length; j++) {\n          let attribute = xml.attributes.item(j);\n          obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\n        }\n      }\n    } else if (xml.nodeType === 3) {\n      obj = xml.nodeValue;\n    }\n    if (xml.hasChildNodes()) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        let item = xml.childNodes.item(i);\n        let nodeName = item.nodeName;\n        if (typeof obj[nodeName] === 'undefined') {\n          obj[nodeName] = this.xmlToJson(item);\n        } else {\n          if (typeof obj[nodeName].push === 'undefined') {\n            let old = obj[nodeName];\n            obj[nodeName] = [];\n            obj[nodeName].push(old);\n          }\n          obj[nodeName].push(this.xmlToJson(item));\n        }\n      }\n    }\n    return obj;\n  }\n}\n","//@flow\n\nimport MediaEntry from '../entities/media-entry';\n\nexport default class Playlist {\n  /**\n   * @member - playlist id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - playlist name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - playlist description\n   * @type {string}\n   */\n  description: string;\n\n  /**\n   * @member - playlist poster\n   * @type {string}\n   */\n  poster: string;\n\n  /**\n   * @member - playlist items\n   * @type {Array<MediaEntry>}\n   */\n  items: Array<MediaEntry>;\n\n  constructor() {\n    this.items = [];\n  }\n}\n","// @flow\n\nconst KalturaCaptionType: CaptionType = {\n  SRT: '1',\n  DFXP: '2',\n  WEBVTT: '3',\n  CAP: '4'\n};\n\nconst CaptionsFormatsMap: {[format: string]: string} = {\n  '3': 'vtt',\n  '1': 'srt'\n};\n\nclass ExternalCaptionsBuilder {\n  static createConfig(captions: Array<Object>): Array<PKExternalCaptionObject> {\n    return captions.map(caption => {\n      let url = caption.url;\n      let type = CaptionsFormatsMap[caption.format];\n      if ([KalturaCaptionType.DFXP, KalturaCaptionType.CAP].includes(caption.format)) {\n        url = caption.webVttUrl;\n        type = CaptionsFormatsMap[KalturaCaptionType.WEBVTT];\n      }\n      return {\n        default: !!caption.isDefault,\n        type: type,\n        language: caption.languageCode,\n        label: caption.label,\n        url: url\n      };\n    });\n  }\n}\n\nexport {ExternalCaptionsBuilder};\n","//@flow\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport KalturaMetadataListResponse from './response-types/kaltura-metadata-list-response';\nimport KalturaMediaEntry from './response-types/kaltura-media-entry';\nimport KalturaPlaybackSource from './response-types/kaltura-playback-source';\nimport KalturaDrmPlaybackPluginData from '../common/response-types/kaltura-drm-playback-plugin-data';\nimport PlaySourceUrlBuilder from './play-source-url-builder';\nimport XmlParser from '../../util/xml-parser';\nimport getLogger from '../../util/logger';\nimport OVPConfiguration from './config';\nimport MediaEntry from '../../entities/media-entry';\nimport Drm from '../../entities/drm';\nimport MediaSource from '../../entities/media-source';\nimport MediaSources from '../../entities/media-sources';\nimport {SupportedStreamFormat, isProgressiveSource} from '../../entities/media-format';\nimport Playlist from '../../entities/playlist';\nimport EntryList from '../../entities/entry-list';\nimport KalturaRuleAction from './response-types/kaltura-rule-action';\nimport KalturaAccessControlMessage from '../common/response-types/kaltura-access-control-message';\nimport type {OVPMediaEntryLoaderResponse} from './loaders/media-entry-loader';\nimport {ExternalCaptionsBuilder} from './external-captions-builder';\n\nexport default class OVPProviderParser {\n  static _logger = getLogger('OVPProviderParser');\n\n  /**\n   * Returns parsed media entry by given OVP response objects\n   * @function getMediaEntry\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {any} mediaEntryResponse - The media entry response\n   * @returns {MediaEntry} - The media entry\n   * @static\n   * @public\n   */\n  static getMediaEntry(ks: string, partnerId: number, uiConfId: ?number, mediaEntryResponse: any): MediaEntry {\n    const mediaEntry = new MediaEntry();\n    const entry = mediaEntryResponse.entry;\n    const playbackContext = mediaEntryResponse.playBackContextResult;\n    const metadataList = mediaEntryResponse.metadataListResult;\n    const kalturaSources = playbackContext.sources;\n\n    mediaEntry.sources = OVPProviderParser._getParsedSources(kalturaSources, ks, partnerId, uiConfId, entry, playbackContext);\n    if (OVPConfiguration.get().useApiCaptions && playbackContext.data.playbackCaptions) {\n      mediaEntry.sources.captions = ExternalCaptionsBuilder.createConfig(playbackContext.data.playbackCaptions);\n    }\n    OVPProviderParser._fillBaseData(mediaEntry, entry, metadataList);\n    return mediaEntry;\n  }\n\n  /**\n   * Returns parsed playlist by given OVP response objects\n   * @function getPlaylist\n   * @param {any} playlistResponse - The playlist response\n   * @returns {Playlist} - The playlist\n   * @static\n   * @public\n   */\n  static getPlaylist(playlistResponse: any): Playlist {\n    const playlist = new Playlist();\n    const playlistData = playlistResponse.playlistData;\n    const playlistItems = playlistResponse.playlistItems.entries;\n    playlist.id = playlistData.id;\n    playlist.name = playlistData.name;\n    playlist.description = playlistData.description;\n    playlist.poster = playlistData.poster;\n    playlistItems.forEach((entry: KalturaMediaEntry) => {\n      const mediaEntry = new MediaEntry();\n      OVPProviderParser._fillBaseData(mediaEntry, entry);\n      playlist.items.push(mediaEntry);\n    });\n    return playlist;\n  }\n\n  /**\n   * Returns parsed entry list by given OVP response objects\n   * @function getEntryList\n   * @param {any} playlistResponse - response\n   * @returns {Playlist} - The entry list\n   * @static\n   * @public\n   */\n  static getEntryList(playlistResponse: any): EntryList {\n    const entryList = new EntryList();\n    const playlistItems = playlistResponse.playlistItems.entries;\n    playlistItems.forEach(entry => {\n      const mediaEntry = new MediaEntry();\n      OVPProviderParser._fillBaseData(mediaEntry, entry);\n      entryList.items.push(mediaEntry);\n    });\n    return entryList;\n  }\n\n  static _fillBaseData(mediaEntry: MediaEntry, entry: KalturaMediaEntry, metadataList: ?KalturaMetadataListResponse) {\n    mediaEntry.poster = entry.poster;\n    mediaEntry.id = entry.id;\n    mediaEntry.duration = entry.duration;\n    mediaEntry.metadata = OVPProviderParser._parseMetadata(metadataList);\n    mediaEntry.metadata.description = entry.description || '';\n    mediaEntry.metadata.name = entry.name || '';\n    mediaEntry.metadata.tags = entry.tags || '';\n    mediaEntry.status = entry.status;\n\n    mediaEntry.type = OVPProviderParser._getEntryType(entry.entryType, entry.type);\n    if (mediaEntry.type === MediaEntry.Type.LIVE) {\n      mediaEntry.dvrStatus = entry.dvrStatus;\n    }\n\n    return mediaEntry;\n  }\n\n  static _getEntryType(entryTypeEnum: number, typeEnum: number | string): string {\n    let type = MediaEntry.Type.UNKNOWN;\n    switch (entryTypeEnum) {\n      case KalturaMediaEntry.MediaType.IMAGE.value:\n        type = MediaEntry.Type.IMAGE;\n        break;\n      case KalturaMediaEntry.MediaType.AUDIO.value:\n        type = MediaEntry.Type.AUDIO;\n        break;\n      default:\n        switch (typeEnum) {\n          case KalturaMediaEntry.EntryType.MEDIA_CLIP.value:\n            type = MediaEntry.Type.VOD;\n            break;\n          case KalturaMediaEntry.EntryType.LIVE_STREAM.value:\n          case KalturaMediaEntry.EntryType.LIVE_CHANNEL.value:\n            type = MediaEntry.Type.LIVE;\n            break;\n          default:\n            type = MediaEntry.Type.UNKNOWN;\n        }\n    }\n    return type;\n  }\n\n  /**\n   * Returns the parsed sources\n   * @function _getParsedSources\n   * @param {Array<KalturaPlaybackSource>} kalturaSources - The kaltura sources\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {Object} entry - The entry\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @return {MediaSources} - A media sources\n   * @static\n   * @private\n   */\n  static _getParsedSources(\n    kalturaSources: Array<KalturaPlaybackSource>,\n    ks: string,\n    partnerId: number,\n    uiConfId: ?number,\n    entry: Object,\n    playbackContext: KalturaPlaybackContext\n  ): MediaSources {\n    const sources = new MediaSources();\n    const addAdaptiveSource = (source: KalturaPlaybackSource) => {\n      const parsedSource = OVPProviderParser._parseAdaptiveSource(source, playbackContext, ks, partnerId, uiConfId, entry.id);\n      if (parsedSource) {\n        const sourceFormat = SupportedStreamFormat.get(source.format);\n        sources.map(parsedSource, sourceFormat);\n      }\n    };\n    const parseAdaptiveSources = () => {\n      kalturaSources.filter(source => !isProgressiveSource(source.format)).forEach(addAdaptiveSource);\n    };\n    const parseProgressiveSources = () => {\n      const progressiveSource = kalturaSources.find(source => {\n        //match progressive source with supported protocol(http/s)\n        return isProgressiveSource(source.format) && source.getProtocol(OVPProviderParser._getBaseProtocol()) !== '';\n      });\n      sources.progressive = OVPProviderParser._parseProgressiveSources(progressiveSource, playbackContext, ks, partnerId, uiConfId, entry.id);\n    };\n\n    const parseExternalMedia = () => {\n      const mediaSource = new MediaSource();\n      mediaSource.mimetype = 'video/youtube';\n      mediaSource.url = entry.referenceId;\n      mediaSource.id = entry.id + '_youtube';\n      sources.progressive.push(mediaSource);\n    };\n\n    if (entry.type === KalturaMediaEntry.EntryType.EXTERNAL_MEDIA.value) {\n      parseExternalMedia();\n    } else if (kalturaSources && kalturaSources.length > 0) {\n      parseAdaptiveSources();\n      parseProgressiveSources();\n    }\n    return sources;\n  }\n\n  /**\n   * Returns a parsed adaptive source\n   * @function _parseAdaptiveSource\n   * @param {KalturaPlaybackSource} kalturaSource - A kaltura source\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {string} entryId - The entry id\n   * @returns {?MediaSource} - The parsed adaptive kalturaSource\n   * @static\n   * @private\n   */\n  static _parseAdaptiveSource(\n    kalturaSource: ?KalturaPlaybackSource,\n    playbackContext: KalturaPlaybackContext,\n    ks: string,\n    partnerId: number,\n    uiConfId: ?number,\n    entryId: string\n  ): ?MediaSource {\n    const mediaSource: MediaSource = new MediaSource();\n    if (kalturaSource) {\n      let playUrl: string = '';\n      const mediaFormat = SupportedStreamFormat.get(kalturaSource.format);\n      const protocol = kalturaSource.getProtocol(OVPProviderParser._getBaseProtocol());\n      const deliveryProfileId = kalturaSource.deliveryProfileId;\n      const format = kalturaSource.format;\n      let extension: string = '';\n      if (mediaFormat) {\n        extension = mediaFormat.pathExt;\n        mediaSource.mimetype = mediaFormat.mimeType;\n      }\n      // in case playbackSource doesn't have flavors we don't need to build the url and we'll use the provided one.\n      if (kalturaSource.hasFlavorIds()) {\n        if (!extension && playbackContext.flavorAssets && playbackContext.flavorAssets.length > 0) {\n          extension = playbackContext.flavorAssets[0].fileExt;\n        }\n        playUrl = PlaySourceUrlBuilder.build({\n          entryId,\n          flavorIds: kalturaSource.flavorIds,\n          format,\n          ks,\n          partnerId,\n          uiConfId,\n          extension,\n          protocol\n        });\n      } else {\n        playUrl = kalturaSource.url;\n      }\n      if (!playUrl) {\n        const message = `failed to create play url from source, discarding source: (${entryId}_${deliveryProfileId}), ${format}`;\n        OVPProviderParser._logger.warn(message);\n        return null;\n      }\n      mediaSource.url = OVPProviderParser._applyRegexAction(playbackContext, playUrl);\n      mediaSource.id = entryId + '_' + deliveryProfileId + ',' + format;\n      if (kalturaSource.hasDrmData()) {\n        const drmParams: Array<Drm> = [];\n        kalturaSource.drm.forEach(drm => {\n          drmParams.push(new Drm(drm.licenseURL, KalturaDrmPlaybackPluginData.Scheme[drm.scheme], drm.certificate));\n        });\n        mediaSource.drmData = drmParams;\n      }\n    }\n    return mediaSource;\n  }\n\n  /**\n   * Returns parsed progressive sources\n   * @function _parseProgressiveSources\n   * @param {KalturaPlaybackSource} kalturaSource - A kaltura source\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {string} entryId - The entry id\n   * @returns {Array<MediaSource>} - The parsed progressive kalturaSources\n   * @static\n   * @private\n   */\n  static _parseProgressiveSources(\n    kalturaSource: ?KalturaPlaybackSource,\n    playbackContext: KalturaPlaybackContext,\n    ks: string,\n    partnerId: number,\n    uiConfId: ?number,\n    entryId: string\n  ): Array<MediaSource> {\n    const videoSources: Array<MediaSource> = [];\n    const audioSources: Array<MediaSource> = [];\n    if (kalturaSource) {\n      const protocol = kalturaSource.getProtocol(OVPProviderParser._getBaseProtocol());\n      const format = kalturaSource.format;\n      const deliveryProfileId = kalturaSource.deliveryProfileId;\n      const sourceId = deliveryProfileId + ',' + format;\n      playbackContext.flavorAssets.map(flavor => {\n        const mediaSource: MediaSource = new MediaSource();\n        mediaSource.id = flavor.id + sourceId;\n        mediaSource.mimetype = flavor.fileExt === 'mp3' ? 'audio/mp3' : 'video/mp4';\n        mediaSource.height = flavor.height;\n        mediaSource.width = flavor.width;\n        mediaSource.bandwidth = flavor.bitrate * 1024;\n        mediaSource.label = flavor.label || flavor.language;\n        const playUrl = PlaySourceUrlBuilder.build({\n          entryId,\n          flavorIds: flavor.id,\n          format,\n          ks,\n          partnerId: partnerId,\n          uiConfId: uiConfId,\n          extension: flavor.fileExt,\n          protocol\n        });\n        if (playUrl === '') {\n          OVPProviderParser._logger.warn(`failed to create play url from source, discarding source: (${entryId}_${deliveryProfileId}), ${format}.`);\n          return null;\n        } else {\n          mediaSource.url = OVPProviderParser._applyRegexAction(playbackContext, playUrl);\n          if (flavor.height && flavor.width) {\n            videoSources.push(mediaSource);\n          } else {\n            audioSources.push(mediaSource);\n          }\n        }\n      });\n    }\n    //If we have only audio flavors return them, otherwise return video flavors\n    return audioSources.length && !videoSources.length ? audioSources : videoSources;\n  }\n\n  /**\n   * Ovp metadata parser\n   * @function _parseMetaData\n   * @param {KalturaMetadataListResponse} metadataList The metadata list\n   * @returns {Object} Parsed metadata\n   * @static\n   * @private\n   */\n  static _parseMetadata(metadataList: ?KalturaMetadataListResponse): Object {\n    const metadata = {};\n    if (metadataList && metadataList.metas && metadataList.metas.length > 0) {\n      metadataList.metas.forEach(meta => {\n        let metaXml: Object;\n        const domParser: DOMParser = new DOMParser();\n        meta.xml = meta.xml.replace(/\\r?\\n|\\r/g, '');\n        meta.xml = meta.xml.replace(/>\\s*/g, '>');\n        meta.xml = meta.xml.replace(/>\\s*/g, '>');\n        metaXml = domParser.parseFromString(meta.xml, 'text/xml');\n        const metasObj: Object = XmlParser.xmlToJson(metaXml);\n        const metaKeys = Object.keys(metasObj.metadata);\n        metaKeys.forEach(key => {\n          metadata[key] = metasObj.metadata[key]['#text'];\n        });\n      });\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the base protocol\n   * @function _getBaseProtocol\n   * @returns {string} - The base protocol\n   * @static\n   * @private\n   */\n  static _getBaseProtocol(): string {\n    const config = OVPConfiguration.get();\n    const protocolRegex = /^https?:/;\n    const result = protocolRegex.exec(config.cdnUrl);\n    const protocol = result ? result[0] : document.location.protocol;\n    if (typeof protocol === 'string') {\n      return protocol.slice(0, -1); // remove ':' from the end\n    }\n    return 'https';\n  }\n\n  static hasBlockAction(response: OVPMediaEntryLoaderResponse): boolean {\n    return response.playBackContextResult.hasBlockAction();\n  }\n\n  static getBlockAction(response: OVPMediaEntryLoaderResponse): ?KalturaRuleAction {\n    return response.playBackContextResult.getBlockAction();\n  }\n\n  static getErrorMessages(response: OVPMediaEntryLoaderResponse): Array<KalturaAccessControlMessage> {\n    return response.playBackContextResult.getErrorMessages();\n  }\n\n  /**\n   * Applies the request host regex on the url\n   * @function _applyRegexAction\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @param {string} playUrl - The original url\n   * @returns {string} - The request host regex applied url\n   * @static\n   * @private\n   */\n  static _applyRegexAction(playbackContext: KalturaPlaybackContext, playUrl: string): string {\n    const regexAction = playbackContext.getRequestHostRegexAction();\n    if (regexAction) {\n      const regex = new RegExp(regexAction.pattern, 'i');\n      if (playUrl.match(regex)) {\n        return playUrl.replace(regex, regexAction.replacement + '/');\n      }\n    }\n    return playUrl;\n  }\n}\n","//@flow\nimport MultiRequestBuilder from '../../common/multi-request-builder';\nimport OVPConfiguration from '../config';\n\nconst SERVICE_NAME: string = 'multirequest';\n\nexport default class OVPService {\n  /**\n   * Gets a new instance of MultiRequestBuilder with ovp params\n   * @function getMultiRequest\n   * @param {string} playerVersion The player version\n   * @param {string} ks The ks\n   * @param {string} partnerId The partner ID\n   * @returns {MultiRequestBuilder} The multi request builder\n   * @static\n   */\n  static getMultiRequest(playerVersion: string, ks: string, partnerId?: number): MultiRequestBuilder {\n    const config = OVPConfiguration.get();\n    const ovpParams = config.serviceParams;\n    Object.assign(ovpParams, {ks: ks, clientTag: 'html5:v' + playerVersion});\n    if (partnerId) {\n      Object.assign(ovpParams, {partnerId: partnerId});\n    }\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const multiReq = new MultiRequestBuilder(headers);\n    multiReq.method = 'POST';\n    multiReq.service = SERVICE_NAME;\n    multiReq.url = multiReq.getUrl(config.serviceUrl);\n    multiReq.params = ovpParams;\n    return multiReq;\n  }\n}\n","//@flow\nconst FIELDS =\n  'id,referenceId,name,description,thumbnailUrl,dataUrl,duration,msDuration,flavorParamsIds,mediaType,type,tags,dvrStatus,externalSourceType,status';\n\nexport default class BaseEntryResponseProfile {\n  static Type: {[type: string]: number} = {\n    INCLUDE_FIELDS: 1,\n    EXCLUDE_FIELDS: 2\n  };\n  /**\n   * @member - the response profile type\n   * @type {number}\n   */\n  type: number;\n  /**\n   * @member - Comma separated fields list to be included or excluded\n   * @type {string}\n   */\n  fields: string;\n\n  /**\n   * @constructor\n   * @param {Object} responseProfile -\n   */\n  constructor(responseProfile: Object = {}) {\n    this.type = responseProfile.type || BaseEntryResponseProfile.Type.INCLUDE_FIELDS;\n    this.fields = responseProfile.fields || FIELDS;\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\nimport BaseEntryResponseProfile from '../request-params/base-entry-response-profile';\n\nconst SERVICE_NAME: string = 'baseEntry';\n\nexport default class OVPBaseEntryService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for baseentry.getPlaybackContext\n   * @function getPlaybackContext\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static getPlaybackContext(serviceUrl: string, ks: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    const serviceEntryId = ks === '{1:result:ks}' ? '{2:result:objects:0:id}' : '{1:result:objects:0:id}';\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'getPlaybackContext';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'baseEntry-getPlaybackContext';\n    const contextDataParams = {objectType: 'KalturaContextDataParams', flavorTags: 'all'};\n    request.params = {entryId: serviceEntryId, ks: ks, contextDataParams: contextDataParams};\n    return request;\n  }\n\n  /**\n   * Creates an instance of RequestBuilder for baseentry.list\n   * @function list\n   * @param {string} serviceUrl The base URL\n   * @param {string} ks The ks\n   * @param {string} entryId The entry ID\n   * @param {boolean} redirectFromEntryId whether the live entry should continue and play the VOD one after the live stream ends.\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static list(serviceUrl: string, ks: string, entryId: string, redirectFromEntryId: boolean): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'list';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'list';\n    request.params = OVPBaseEntryService.getEntryListReqParams(entryId, ks, redirectFromEntryId);\n    return request;\n  }\n\n  /**\n   * Gets  baseentry.list service params\n   * @function getEntryListReqParams\n   * @param {string} entryId The entry ID\n   * @param {string} ks The ks\n   * @param {boolean} redirectFromEntryId whether the live entry should continue and play the VOD one after the live stream ends.\n   * @returns {{ks: string, filter: {redirectFromEntryId: string}, responseProfile: {fields: string, type: number}}} The service params object\n   * @static\n   */\n  static getEntryListReqParams(entryId: string, ks: string, redirectFromEntryId: boolean): any {\n    const filterParams = redirectFromEntryId ? {redirectFromEntryId: entryId} : {idEqual: entryId};\n    return {ks: ks, filter: filterParams, responseProfile: new BaseEntryResponseProfile()};\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'metadata_metadata';\n\nexport default class OVPMetadataService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for metadata_metadata.list\n   * @function getPlaybackContext\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @param {string} entryId The entry ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static list(serviceUrl: string, ks: string, entryId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'list';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'metadata_metadata-list';\n    const filter = {objectType: 'KalturaMetadataFilter', objectIdEqual: entryId, metadataObjectTypeEqual: '1'};\n    request.params = {filter: filter, ks: ks};\n    return request;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaMediaEntry from './kaltura-media-entry';\n\nexport default class KalturaBaseEntryListResponse extends ServiceResult {\n  /**\n   * @member - The total count\n   * @type {number}\n   */\n  totalCount: number;\n  /**\n   * @member - The entries\n   * @type {Array<KalturaMediaEntry>}\n   */\n  entries: Array<KalturaMediaEntry>;\n\n  /**\n   * @constructor\n   * @param {Object} responseObj The json response\n   */\n  constructor(responseObj: Object) {\n    super(responseObj);\n    if (!this.hasError) {\n      this.totalCount = responseObj.totalCount;\n      if (this.totalCount > 0) {\n        this.entries = [];\n        responseObj.objects.map(entry => this.entries.push(new KalturaMediaEntry(entry)));\n      }\n    }\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPBaseEntryService from '../services/base-entry-service';\nimport OVPMetadataService from '../services/meta-data-service';\nimport OVPConfiguration from '../config';\nimport KalturaPlaybackContext from '../response-types/kaltura-playback-context';\nimport KalturaMetadataListResponse from '../response-types/kaltura-metadata-list-response';\nimport KalturaBaseEntryListResponse from '../response-types/kaltura-base-entry-list-response';\nimport KalturaMediaEntry from '../response-types/kaltura-media-entry';\n\ntype OVPMediaEntryLoaderResponse = {\n  entry: KalturaMediaEntry,\n  playBackContextResult: KalturaPlaybackContext,\n  metadataListResult: KalturaMetadataListResponse\n};\nexport type {OVPMediaEntryLoaderResponse};\n\nexport default class OVPMediaEntryLoader implements ILoader {\n  _entryId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'media';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   * @boolean {boolean} useExternalCaptions - if we should add captions request to the multirequests.\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entryId = params.entryId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    let mediaEntryResponse: KalturaBaseEntryListResponse = new KalturaBaseEntryListResponse(response[0].data);\n    this._response.entry = mediaEntryResponse.entries[0];\n    this._response.playBackContextResult = new KalturaPlaybackContext(response[1].data);\n    this._response.metadataListResult = new KalturaMetadataListResponse(response[2].data);\n  }\n\n  get response(): OVPMediaEntryLoaderResponse {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPBaseEntryService.list(config.serviceUrl, params.ks, params.entryId, params.redirectFromEntryId));\n    requests.push(OVPBaseEntryService.getPlaybackContext(config.serviceUrl, params.ks));\n    requests.push(OVPMetadataService.list(config.serviceUrl, params.ks, params.entryId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._entryId;\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'session';\n\nexport default class OVPSessionService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for session.startWidgetSession\n   * @function anonymousSession\n   * @param {string} serviceUrl The service base URL\n   * @param {string} widgetId The widget ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static anonymousSession(serviceUrl: string, widgetId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'startWidgetSession';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'session-startWidget';\n    request.params = {widgetId};\n    return request;\n  }\n}\n","//@flow\nimport OVPSessionService from '../services/session-service';\nimport OVPConfiguration from '../config';\nimport RequestBuilder from '../../../util/request-builder';\n\nexport default class OVPSessionLoader implements ILoader {\n  _widgetId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'session';\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.ks = response[0].data.ks;\n  }\n\n  get response(): any {\n    return this._response.ks;\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._widgetId = params.widgetId;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPSessionService.anonymousSession(config.serviceUrl, params.widgetId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._widgetId;\n  }\n}\n","// @flow\nimport DataLoaderManager from '../../common/data-loader-manager';\nimport OVPService from '../services/ovp-service';\n\n/**\n * OTTDataLoaderManager is a class that handles the OVP data loading\n * @param {string} playerVersion - player version\n * @param {string} partnerId - partner id\n * @param {string} ks - ks\n * @param {ProviderNetworkRetryParameters} [networkRetryConfig] - network retry configuration\n */\nexport default class OVPDataLoaderManager extends DataLoaderManager {\n  constructor(playerVersion: string, partnerId: number, ks: string = '', networkRetryConfig: ProviderNetworkRetryParameters) {\n    super(networkRetryConfig);\n    this._multiRequest = OVPService.getMultiRequest(playerVersion, ks, partnerId);\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\nimport BaseEntryResponseProfile from '../request-params/base-entry-response-profile';\n\nconst SERVICE_NAME: string = 'playlist';\n\nexport default class OVPPlaylistService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for playlist.getPlaybackContext\n   * @function getPlaybackContext\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @param {string} playlistId The playlist ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static execute(serviceUrl: string, ks: string, playlistId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'execute';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = `${SERVICE_NAME}-execute`;\n    request.params = {\n      ks: ks,\n      id: playlistId,\n      responseProfile: new BaseEntryResponseProfile()\n    };\n    return request;\n  }\n\n  /**\n   * Creates an instance of RequestBuilder for playlist.list\n   * @function list\n   * @param {string} serviceUrl The base URL\n   * @param {string} ks The ks\n   * @param {string} playlistId The playlist ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static get(serviceUrl: string, ks: string, playlistId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'get';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = `${SERVICE_NAME}-get`;\n    request.params = {\n      ks: ks,\n      id: playlistId,\n      responseProfile: {\n        fields: 'id,name,description,thumbnailUrl',\n        type: 1\n      }\n    };\n    return request;\n  }\n}\n","//@flow\n\nexport default class KalturaPlaylist {\n  /**\n   * @member - playlist id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - playlist name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - playlist description\n   * @type {string}\n   */\n  description: string;\n  /**\n   * @member - playlist poster image\n   * @type {string}\n   */\n  poster: string;\n\n  /**\n   * @constructor\n   * @param {Object} playlist - The json response\n   */\n  constructor(playlist: Object) {\n    this.id = playlist.id;\n    this.name = playlist.name;\n    this.description = playlist.description;\n    this.poster = playlist.thumbnailUrl;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaMediaEntry from './kaltura-media-entry';\n\nexport default class KalturaMediaEntries extends ServiceResult {\n  /**\n   * @member - The entries\n   * @type {Array<KalturaMediaEntry>}\n   */\n  entries: Array<KalturaMediaEntry>;\n\n  /**\n   * @constructor\n   * @param {Object} responseObj The json response\n   */\n  constructor(responseObj: Object) {\n    super(responseObj);\n    if (!this.hasError) {\n      this.entries = [];\n      responseObj.map(entry => this.entries.push(new KalturaMediaEntry(entry)));\n    }\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPPlaylistService from '../services/playlist-service';\nimport OVPConfiguration from '../config';\nimport KalturaPlaylist from '../response-types/kaltura-playlist';\nimport KalturaMediaEntries from '../response-types/kaltura-media-entries';\n\nexport default class OVPPlaylistLoader implements ILoader {\n  _playlistId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'playlist';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._playlistId = params.playlistId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.playlistData = new KalturaPlaylist(response[0].data);\n    this._response.playlistItems = new KalturaMediaEntries(response[1].data);\n  }\n\n  get response(): any {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPPlaylistService.get(config.serviceUrl, params.ks, params.playlistId));\n    requests.push(OVPPlaylistService.execute(config.serviceUrl, params.ks, params.playlistId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._playlistId;\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPConfiguration from '../config';\nimport OVPBaseEntryService from '../services/base-entry-service';\nimport KalturaBaseEntryListResponse from '../response-types/kaltura-base-entry-list-response';\n\nexport default class OVPEntryListLoader implements ILoader {\n  _entries: Array<string>;\n  _requests: Array<RequestBuilder>;\n  _response: any = {playlistItems: {entries: []}};\n\n  static get id(): string {\n    return 'entry_list';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entries = params.entries;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    let mediaEntryResponse: KalturaBaseEntryListResponse;\n    response.forEach(item => {\n      mediaEntryResponse = new KalturaBaseEntryListResponse(item.data);\n      this._response.playlistItems.entries.push(mediaEntryResponse.entries[0]);\n    });\n  }\n\n  get response(): any {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    params.entries.forEach(entry => {\n      requests.push(OVPBaseEntryService.list(config.serviceUrl, params.ks, entry.entryId || entry, params.redirectFromEntryId));\n    });\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!(this._entries && this._entries.length);\n  }\n}\n","//@flow\nimport getLogger from '../../util/logger';\nimport OVPConfiguration from './config';\nimport OVPProviderParser from './provider-parser';\nimport KalturaMediaEntry from './response-types/kaltura-media-entry';\nimport OVPMediaEntryLoader from './loaders/media-entry-loader';\nimport OVPSessionLoader from './loaders/session-loader';\nimport OVPDataLoaderManager from './loaders/data-loader-manager';\nimport OVPPlaylistLoader from './loaders/playlist-loader';\nimport BaseProvider from '../common/base-provider';\nimport MediaEntry from '../../entities/media-entry';\nimport OVPEntryListLoader from './loaders/entry-list-loader';\nimport Error from '../../util/error/error';\n\nexport default class OVPProvider extends BaseProvider<OVPProviderMediaInfoObject> {\n  _filterOptionsConfig: ProviderFilterOptionsObject = {redirectFromEntryId: true};\n  /**\n   * @constructor\n   * @param {ProviderOptionsObject} options - provider options\n   * @param {string} playerVersion - player version\n   */\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    super(options, playerVersion);\n    this._logger = getLogger('OVPProvider');\n    OVPConfiguration.set(options.env);\n    this._setFilterOptionsConfig(options.filterOptions);\n    this._networkRetryConfig = Object.assign(this._networkRetryConfig, options.networkRetryParameters);\n  }\n\n  /**\n   * Gets the backend media config.\n   * @param {OVPProviderMediaInfoObject} mediaInfo - ovp media info\n   * @returns {Promise<ProviderMediaConfigObject>} - The provider media config\n   */\n  getMediaConfig(mediaInfo: OVPProviderMediaInfoObject): Promise<ProviderMediaConfigObject> {\n    if (mediaInfo.ks) {\n      this.ks = mediaInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entryId = mediaInfo.entryId;\n      if (entryId) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        const redirectFromEntryId = this._getEntryRedirectFilter(mediaInfo);\n        this._dataLoader.add(OVPMediaEntryLoader, {entryId, ks, redirectFromEntryId});\n        return this._dataLoader.fetchData().then(\n          response => {\n            try {\n              resolve(this._parseDataFromResponse(response));\n            } catch (err) {\n              reject(err);\n            }\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject(new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.MISSING_MANDATORY_PARAMS, {message: 'missing entry id'}));\n      }\n    });\n  }\n\n  _getEntryRedirectFilter(mediaInfo: Object): boolean {\n    return typeof mediaInfo.redirectFromEntryId === 'boolean'\n      ? mediaInfo.redirectFromEntryId\n      : typeof this._filterOptionsConfig.redirectFromEntryId === 'boolean'\n      ? this._filterOptionsConfig.redirectFromEntryId\n      : true;\n  }\n\n  _setFilterOptionsConfig(options?: ProviderFilterOptionsObject): void {\n    if (options && typeof options.redirectFromEntryId == 'boolean') {\n      this._filterOptionsConfig.redirectFromEntryId = options.redirectFromEntryId;\n    }\n  }\n\n  _parseDataFromResponse(data: Map<string, Function>): ProviderMediaConfigObject {\n    this._logger.debug('Data parsing started');\n    const mediaConfig: ProviderMediaConfigObject = {\n      session: {\n        isAnonymous: this._isAnonymous,\n        partnerId: this.partnerId\n      },\n      sources: this._getDefaultSourcesObject(),\n      plugins: {}\n    };\n\n    if (this.uiConfId) {\n      mediaConfig.session.uiConfId = this.uiConfId;\n    }\n    if (data) {\n      if (data.has(OVPSessionLoader.id)) {\n        const sessionLoader = data.get(OVPSessionLoader.id);\n        if (sessionLoader && sessionLoader.response) {\n          mediaConfig.session.ks = sessionLoader.response;\n          if (this.widgetId !== this.defaultWidgetId) {\n            this.ks = mediaConfig.session.ks;\n          }\n        }\n      } else {\n        mediaConfig.session.ks = this.ks;\n      }\n      if (data.has(OVPMediaEntryLoader.id)) {\n        const mediaLoader = data.get(OVPMediaEntryLoader.id);\n        if (mediaLoader && mediaLoader.response) {\n          const response = (mediaLoader: OVPMediaEntryLoader).response;\n          if (OVPProviderParser.hasBlockAction(response)) {\n            throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.BLOCK_ACTION, {\n              action: OVPProviderParser.getBlockAction(response),\n              messages: OVPProviderParser.getErrorMessages(response)\n            });\n          }\n          const mediaEntry = OVPProviderParser.getMediaEntry(this.isAnonymous ? '' : this.ks, this.partnerId, this.uiConfId, response);\n          Object.assign(mediaConfig.sources, this._getSourcesObject(mediaEntry));\n          this._verifyMediaStatus(mediaEntry);\n          this._verifyHasSources(mediaConfig.sources);\n        }\n      }\n    }\n    this._logger.debug('Data parsing finished', mediaConfig);\n    return mediaConfig;\n  }\n\n  /**\n   * Checks media is ready for playback (not being imported or converted)\n   * @param {MediaEntry} mediaEntry - the media entry info\n   * @returns {void}\n   */\n  _verifyMediaStatus(mediaEntry: MediaEntry) {\n    if ([KalturaMediaEntry.EntryStatus.IMPORT, KalturaMediaEntry.EntryStatus.PRECONVERT].includes(mediaEntry.status)) {\n      throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.MEDIA_STATUS_NOT_READY, {\n        messages: `Status of entry id ${mediaEntry.id} is ${mediaEntry.status} and is still being imported or converted`,\n        data: {status}\n      });\n    }\n  }\n  /**\n   * Gets the backend playlist config.\n   * @param {ProviderPlaylistInfoObject} playlistInfo - ovp playlist info\n   * @returns {Promise<ProviderPlaylistObject>} - The provider playlist config\n   */\n  getPlaylistConfig(playlistInfo: ProviderPlaylistInfoObject): Promise<ProviderPlaylistObject> {\n    if (playlistInfo.ks) {\n      this.ks = playlistInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const playlistId = playlistInfo.playlistId;\n      if (playlistId) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        this._dataLoader.add(OVPPlaylistLoader, {playlistId, ks});\n        this._dataLoader.fetchData().then(\n          response => {\n            resolve(this._parsePlaylistDataFromResponse(response));\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject({success: false, data: 'Missing mandatory parameter'});\n      }\n    });\n  }\n\n  _parsePlaylistDataFromResponse(data: Map<string, Function>): ProviderPlaylistObject {\n    this._logger.debug('Data parsing started');\n    const playlistConfig: ProviderPlaylistObject = this._getPlaylistObject();\n    if (data && data.has(OVPPlaylistLoader.id)) {\n      const playlistLoader = data.get(OVPPlaylistLoader.id);\n      if (playlistLoader && playlistLoader.response) {\n        const playlist = OVPProviderParser.getPlaylist(playlistLoader.response);\n        playlistConfig.id = playlist.id;\n        playlistConfig.poster = playlist.poster;\n        playlistConfig.metadata.name = playlist.name;\n        playlistConfig.metadata.description = playlist.description;\n        playlist.items.forEach(i => playlistConfig.items.push({sources: this._getSourcesObject(i)}));\n      }\n    }\n    this._logger.debug('Data parsing finished', playlistConfig);\n    return playlistConfig;\n  }\n\n  /**\n   * Gets playlist config from entry list.\n   * @param {ProviderEntryListObject} entryListInfo - ovp entry list info\n   * @returns {Promise<ProviderPlaylistObject>} - The provider playlist config\n   */\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    if (entryListInfo.ks) {\n      this.ks = entryListInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entries = entryListInfo.entries;\n      if (entries && entries.length) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        const redirectFromEntryId = this._getEntryRedirectFilter(entryListInfo);\n        this._dataLoader.add(OVPEntryListLoader, {entries, ks, redirectFromEntryId});\n        this._dataLoader.fetchData().then(\n          response => {\n            resolve(this._parseEntryListDataFromResponse(response));\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject({success: false, data: 'Missing mandatory parameter'});\n      }\n    });\n  }\n\n  _parseEntryListDataFromResponse(data: Map<string, Function>): ProviderPlaylistObject {\n    this._logger.debug('Data parsing started');\n    const playlistConfig: ProviderPlaylistObject = this._getPlaylistObject();\n    if (data && data.has(OVPEntryListLoader.id)) {\n      const playlistLoader = data.get(OVPEntryListLoader.id);\n      if (playlistLoader && playlistLoader.response) {\n        const entryList = OVPProviderParser.getEntryList(playlistLoader.response);\n        entryList.items.forEach(i => playlistConfig.items.push({sources: this._getSourcesObject(i)}));\n      }\n    }\n    this._logger.debug('Data parsing finished', playlistConfig);\n    return playlistConfig;\n  }\n\n  _getPlaylistObject(): ProviderPlaylistObject {\n    return {\n      id: '',\n      metadata: {\n        name: '',\n        description: ''\n      },\n      poster: '',\n      items: []\n    };\n  }\n\n  _getDefaultSourcesObject(): ProviderMediaConfigSourcesObject {\n    return {\n      hls: [],\n      dash: [],\n      progressive: [],\n      id: '',\n      duration: 0,\n      type: MediaEntry.Type.UNKNOWN,\n      poster: '',\n      dvr: false,\n      vr: null,\n      metadata: {\n        name: '',\n        description: '',\n        tags: ''\n      }\n    };\n  }\n\n  _getSourcesObject(mediaEntry: MediaEntry) {\n    const sourcesObject: ProviderMediaConfigSourcesObject = this._getDefaultSourcesObject();\n    const mediaSources = mediaEntry.sources.toJSON();\n    sourcesObject.hls = mediaSources.hls;\n    sourcesObject.dash = mediaSources.dash;\n    sourcesObject.progressive = mediaSources.progressive;\n    sourcesObject.id = mediaEntry.id;\n    sourcesObject.duration = mediaEntry.duration;\n    sourcesObject.type = mediaEntry.type;\n    sourcesObject.dvr = !!mediaEntry.dvrStatus;\n    sourcesObject.poster = mediaEntry.poster;\n    if (mediaEntry.sources.captions) {\n      sourcesObject.captions = mediaEntry.sources.captions;\n    }\n    if (mediaEntry.metadata && typeof mediaEntry.metadata.tags === 'string' && mediaEntry.metadata.tags.indexOf('360') > -1) {\n      sourcesObject.vr = {};\n    }\n    Object.assign(sourcesObject.metadata, mediaEntry.metadata);\n    return sourcesObject;\n  }\n}\n","// @flow\nimport OVPProvider from './provider';\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nconst NAME = __NAME__ + '-ovp';\nconst VERSION = __VERSION__;\n\nexport {OVPProvider as Provider, NAME, VERSION};\n"],"sourceRoot":""}