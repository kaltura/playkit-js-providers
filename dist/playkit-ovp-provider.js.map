{"version":3,"sources":["./providers/webpack/universalModuleDefinition","./providers/webpack/bootstrap","./providers/./util/error/error.js","./providers/./util/error/severity.js","./providers/./util/error/category.js","./providers/./util/error/code.js","./providers/./util/logger.js","./providers/./entities/media-entry.js","./providers/./util/request-builder.js","./providers/./entities/media-format.js","./providers/./k-provider/common/base-service-result.js","./providers/./k-provider/common/response-types/kaltura-drm-playback-plugin-data.js","./providers/./entities/media-sources.js","./providers/./entities/media-source.js","./providers/./k-provider/common/data-loader-manager.js","./providers/./k-provider/common/multi-request-builder.js","./providers/./k-provider/common/response-types/kaltura-access-control-message.js","./providers/./entities/drm.js","./providers/./k-provider/common/base-provider.js","./providers/./util/clone.js","./providers/./entities/entry-list.js","./providers/./entities/bumper.js","./providers/./k-provider/ovp/config.js","./providers/./k-provider/ovp/response-types/kaltura-playback-source.js","./providers/./k-provider/ovp/response-types/kaltura-rule-action.js","./providers/./k-provider/ovp/response-types/kaltura-access-control-modify-request-host-regex-action.js","./providers/./k-provider/ovp/response-types/kaltura-flavor-asset.js","./providers/./k-provider/ovp/response-types/kaltura-bumper.js","./providers/./k-provider/ovp/response-types/kaltura-playback-context.js","./providers/./k-provider/ovp/response-types/kaltura-metadata.js","./providers/./k-provider/ovp/response-types/kaltura-metadata-list-response.js","./providers/./k-provider/ovp/response-types/kaltura-media-entry.js","./providers/./k-provider/ovp/play-source-url-builder.js","./providers/./util/xml-parser.js","./providers/./entities/playlist.js","./providers/./k-provider/ovp/external-captions-builder.js","./providers/./k-provider/ovp/provider-parser.js","./providers/./k-provider/ovp/services/ovp-service.js","./providers/./k-provider/ovp/request-params/base-entry-response-profile.js","./providers/./k-provider/ovp/services/base-entry-service.js","./providers/./k-provider/ovp/services/meta-data-service.js","./providers/./k-provider/ovp/response-types/kaltura-base-entry-list-response.js","./providers/./k-provider/ovp/loaders/media-entry-loader.js","./providers/./k-provider/ovp/services/session-service.js","./providers/./k-provider/ovp/loaders/session-loader.js","./providers/./k-provider/ovp/loaders/data-loader-manager.js","./providers/./k-provider/ovp/services/playlist-service.js","./providers/./k-provider/ovp/response-types/kaltura-playlist.js","./providers/./k-provider/ovp/response-types/kaltura-media-entries.js","./providers/./k-provider/ovp/loaders/playlist-loader.js","./providers/./k-provider/ovp/loaders/entry-list-loader.js","./providers/./k-provider/ovp/provider.js","./providers/./k-provider/ovp/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Error","severity","category","code","data","this","_logger","error","RECOVERABLE","CRITICAL","NETWORK","SERVICE","PROVIDER","UNSUPPORTED_SCHEME","BAD_HTTP_STATUS","HTTP_ERROR","TIMEOUT","MALFORMED_DATA_URI","BAD_SERVER_RESPONSE","MULTIREQUEST_API_ERROR","API_RESPONSE_MISMATCH","ERROR","BLOCK_ACTION","MEDIA_STATUS_NOT_READY","MISSING_MANDATORY_PARAMS","MISSING_PLAY_SOURCE","METHOD_NOT_IMPLEMENTED","getLogger","JsLogger","trace","debug","info","log","warn","time","timeEnd","getLevel","setLevel","LogLevel","setLogger","logger","getLogLevel","setLogLevel","level","MediaEntry","metadata","Map","sources","MediaSources","type","Type","UNKNOWN","toJSON","id","duration","dvrStatus","status","poster","assetReferenceType","VOD","LIVE","IMAGE","AUDIO","RequestBuilder","headers","async","timeout","maxAttempts","getUrl","serviceUrl","service","action","doHttpRequest","promise","Promise","resolve","reject","_requestPromise","url","Severity","Category","Code","_createXHR","request","XMLHttpRequest","onreadystatechange","readyState","response","JSON","parse","responseText","responseHeaders","_getResponseHeaders","_createError","text","open","method","retryConfig","requestTime","performance","now","ontimeout","_handleError","statusText","onerror","onabort","forEach","setRequestHeader","send","params","getAllResponseHeaders","split","filter","header","toLowerCase","indexOf","_attemptCounter","assign","attempt","MediaFormat","DASH","mimeType","pathExt","HLS","WVM","MP4","MP3","SupportedStreamFormat","isProgressiveSource","formatName","sourceFormat","ServiceResult","objectType","hasError","ServiceError","message","KalturaDrmPlaybackPluginData","drm","scheme","licenseURL","certificate","WIDEVINE_CENC","PLAYREADY_CENC","FAIRPLAY","progressive","dash","hls","map","source","mediaFormat","push","h","MediaSource","mimetype","bandwidth","width","height","label","drmData","length","Array","isArray","DataLoaderManager","networkRetryConfig","_networkRetryConfig","add","loader","execution_loader","isValid","_loaders","set","startIndex","_multiRequest","requests","executionLoaderResponseMap","from","val","index","_loadersResponseMap","fetchData","execute","then","_multiResponse","prepareData","success","err","loaderDataIndexes","results","slice","MultiRequestBuilder","requestParams","serviceDef","stringify","FAILED_PARSING_REQUEST","multiRequestResult","MultiRequestResult","result","serviceResult","KalturaAccessControlMessage","Drm","licenseUrl","BaseProvider","options","playerVersion","_partnerId","partnerId","_widgetId","widgetId","_uiConfId","uiConfId","_isAnonymous","ks","_ks","_playerVersion","defaultWidgetId","getMediaConfig","mediaInfo","getPlaylistConfig","playlistInfo","getEntryListConfig","entryListInfo","_verifyHasSources","concat","messages","clone","node","e","keys","EntryList","items","Bumper","clickThroughUrl","defaultConfig","cdnUrl","serviceParams","apiVersion","format","useApiCaptions","OVPConfiguration","clientConfig","KalturaPlaybackSource","deliveryProfileId","protocols","flavorIds","hasDrmData","hasFlavorIds","getProtocol","protocol","returnValue","KalturaRuleAction","DRM_POLICY","BLOCK","PREVIEW","LIMIT_FLAVORS","ADD_TO_STORAGE","LIMIT_DELIVERY_PROFILES","SERVE_FROM_REMOTE_SERVER","REQUEST_HOST_REGEX","LIMIT_THUMBNAIL_CAPTURE","KalturaAccessControlModifyRequestHostRegexAction","pattern","replacement","replacmenServerNodeId","KalturaFlavorAsset","flavorParamsId","fileExt","bitrate","frameRate","isOriginal","isWeb","containerFormat","videoCodecId","language","QUEUED","CONVERTING","READY","DELETED","NOT_APPLICABLE","TEMP","WAIT_FOR_CONVERT","IMPORTING","VALIDATING","EXPORTING","KalturaBumper","entryId","KalturaPlaybackContext","actions","flavorAssets","flavor","bumperData","bumper","hasBlockAction","undefined","getBlockAction","find","getErrorMessages","getRequestHostRegexAction","KalturaMetadata","metadataProfileId","metadataProfileVersion","metadataObjectType","objectId","version","created","Date","setUTCSeconds","createdAt","updated","updatedAt","xml","AD_CUE_POINT","ANNOTATION","CODE_CUE_POINT","THUMB_CUE_POINT","ENTRY","CATEGORY","USER","PARTNER","DYNAMIC_OBJECT","VALID","INVALID","KalturaMetadataListResponse","responseObj","totalCount","metas","objects","meta","KalturaMediaEntry","entry","referenceId","externalSourceType","description","dataUrl","entryType","mediaType","flavorParamsIds","thumbnailUrl","tags","AUTOMATIC","EXTERNAL_MEDIA","MEDIA_CLIP","MIX","PLAYLIST","DATA","LIVE_STREAM","LIVE_CHANNEL","DOCUMENT","VIDEO","LIVE_STREAM_FLASH","LIVE_STREAM_WINDOWS_MEDIA","LIVE_STREAM_REAL_MEDIA","LIVE_STREAM_QUICK_TIME","ERROR_IMPORTING","ERROR_CONVERTING","SCAN_FAILURE","IMPORT","INFECTED","PRECONVERT","PENDING","MODERATE","BLOCKED","NO_CONTENT","PENDING_MODERATION","APPROVED","REJECTED","FLAGGED_FOR_REVIEW","AUTO_APPROVED","PlaySourceUrlBuilder","build","urlParams","config","serviceUrlOrigin","substr","lastIndexOf","extension","playUrl","endsWith","XmlParser","xmlToJson","obj","nodeType","attributes","j","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","old","Playlist","KalturaCaptionType","SRT","DFXP","WEBVTT","CAP","CaptionsFormatsMap","ExternalCaptionsBuilder","createConfig","captions","caption","includes","webVttUrl","default","isDefault","languageCode","OVPProviderParser","getMediaEntry","mediaEntryResponse","mediaEntry","playbackContext","playBackContextResult","metadataList","metadataListResult","kalturaSources","_getParsedSources","playbackCaptions","_fillBaseData","getPlaylist","playlistResponse","playlist","playlistData","playlistItems","entries","getEntryList","entryList","getBumper","assetResponse","progressiveBumper","parsedSources","_parseProgressiveSources","_parseMetadata","_getEntryType","entryTypeEnum","typeEnum","MediaType","EntryType","progressiveSource","mediaSource","addAdaptiveSource","parsedSource","_parseAdaptiveSource","_getBaseProtocol","kalturaSource","_applyRegexAction","drmParams","Scheme","videoSources","audioSources","sourceId","metaXml","domParser","DOMParser","replace","parseFromString","metasObj","exec","document","location","regexAction","regex","RegExp","match","OVPService","getMultiRequest","ovpParams","clientTag","multiReq","BaseEntryResponseProfile","responseProfile","INCLUDE_FIELDS","fields","EXCLUDE_FIELDS","OVPBaseEntryService","getPlaybackContext","serviceEntryId","tag","contextDataParams","flavorTags","list","redirectFromEntryId","getEntryListReqParams","idEqual","OVPMetadataService","objectIdEqual","metadataObjectTypeEqual","KalturaBaseEntryListResponse","OVPMediaEntryLoader","buildRequests","_entryId","_requests","_response","OVPSessionService","anonymousSession","OVPSessionLoader","OVPDataLoaderManager","OVPPlaylistService","playlistId","SERVICE_NAME","KalturaPlaylist","KalturaMediaEntries","OVPPlaylistLoader","_playlistId","OVPEntryListLoader","_entries","OVPProvider","env","_setFilterOptionsConfig","filterOptions","networkRetryParameters","_dataLoader","_getEntryRedirectFilter","_parseDataFromResponse","_filterOptionsConfig","mediaConfig","session","isAnonymous","_getDefaultSourcesObject","plugins","has","sessionLoader","mediaLoader","_getSourcesObject","_verifyMediaStatus","EntryStatus","_parsePlaylistDataFromResponse","playlistConfig","_getPlaylistObject","playlistLoader","_parseEntryListDataFromResponse","dvr","vr","sourcesObject","mediaSources","NAME","__NAME__","VERSION","__VERSION__"],"mappings":"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","file":"playkit-ovp-provider.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ovp\"] = factory();\n\telse\n\t\troot[\"playkit\"] = root[\"playkit\"] || {}, root[\"playkit\"][\"providers\"] = root[\"playkit\"][\"providers\"] || {}, root[\"playkit\"][\"providers\"][\"ovp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","//@flow\nimport getLogger from '../logger';\nimport {Severity} from './severity';\nimport type {SeverityType} from './severity';\nimport {Code} from './code';\nimport type {CodeType} from './code';\nimport {Category} from './category';\nimport type {CategoryType} from './category';\n\nconst CLASS_NAME: string = 'Error';\n\n/**\n * @classdesc This is a description of the error class.\n */\nexport default class Error {\n  severity: number;\n  category: number;\n  code: number;\n  data: any;\n  /**\n   * @enum {number}\n   */\n  static Severity: SeverityType = Severity;\n  /**\n   * @enum {number}\n   */\n  static Category: CategoryType = Category;\n  /**\n   * @enum {number}\n   */\n  static Code: CodeType = Code;\n  static _logger: any = getLogger(CLASS_NAME);\n\n  /**\n   * @constructor\n   * @param {number} severity - error's severity\n   * @param {number} category - error's category.\n   * @param {number} code - error's code.\n   * @param {any} data - additional data for the error.\n   */\n  constructor(severity: number, category: number, code: number, data: any = {}) {\n    this.severity = severity;\n    this.category = category;\n    this.code = code;\n    this.data = data;\n    Error._logger.error(`Category:${category} | Code:${code} |`, data);\n  }\n}\n","//@flow\n\ntype SeverityType = {[severity: string]: number};\n\nconst Severity: SeverityType = {\n  /**\n   * An error occurred, but the Player is attempting to recover from the error.\n   *\n   * If the Player cannot ultimately recover, it still may not throw a CRITICAL\n   * error.  For example, retrying for a media segment will never result in\n   * a CRITICAL error (the Player will just retry forever).\n   */\n  RECOVERABLE: 1,\n  /**\n   * A critical error that the library cannot recover from.  These usually cause\n   * the Player to stop loading or updating.  A new manifest must be loaded\n   * to reset the library.\n   */\n  CRITICAL: 2\n};\n\nexport {Severity};\nexport type {SeverityType};\n","//@flow\ntype CategoryType = {[category: string]: number};\n\nconst Category: CategoryType = {\n  /** Errors from the network stack. */\n  NETWORK: 1,\n  SERVICE: 2,\n  PROVIDER: 3\n};\n\nexport {Category};\nexport type {CategoryType};\n","//@flow\n\ntype CodeType = {[code: string]: number};\n\nconst Code: CodeType = {\n  /**\n   * A network request was made using an unsupported URI scheme.\n   */\n  UNSUPPORTED_SCHEME: 1000,\n\n  /**\n   * An HTTP network request returned an HTTP status that indicated a failure.\n   */\n  BAD_HTTP_STATUS: 1001,\n\n  /**\n   * An HTTP network request failed with an error, but not from the server.\n   */\n  HTTP_ERROR: 1002,\n\n  /**\n   * A network request timed out.\n   */\n  TIMEOUT: 1003,\n\n  /**\n   * A network request was made with a malformed data URI.\n   */\n  MALFORMED_DATA_URI: 1004,\n\n  /**\n   * The server responsded with 2xx response, but it couldn't be parsed\n   */\n  BAD_SERVER_RESPONSE: 1005,\n\n  /**\n   * The server response had a valid structure but contained an error from the API\n   */\n  MULTIREQUEST_API_ERROR: 1006,\n\n  /**\n   * The server response had a valid structure and valid API result, but it did not match the request\n   */\n  API_RESPONSE_MISMATCH: 1007,\n\n  /**\n   * The server responded with an error\n   */\n  ERROR: 2000,\n\n  /**\n   * The server responded with a block action\n   */\n  BLOCK_ACTION: 2001,\n\n  /**\n   * The server responded with status import or pre convert\n   */\n  MEDIA_STATUS_NOT_READY: 2002,\n\n  /**\n   * The provider is missing mandatory parameter/s\n   */\n\n  MISSING_MANDATORY_PARAMS: 3000,\n\n  /**\n   * The server responded with empty sources objects (for HLS, Dash and progressive)\n   */\n  MISSING_PLAY_SOURCE: 3001,\n\n  /**\n   * The provider doesn't implement the called api\n   */\n  METHOD_NOT_IMPLEMENTED: 3002\n};\n\nexport {Code};\nexport type {CodeType};\n","//@flow\nexport type LogLevelObject = {value: number, name: string};\nexport type LogLevelType = {[level: string]: LogLevelObject};\nexport type loggerFunctionType = {\n  trace: Function,\n  debug: Function,\n  info: Function,\n  log: Function,\n  warn: Function,\n  error: Function,\n  time: Function,\n  timeEnd: Function,\n  getLevel: Function,\n  setLevel: Function\n};\n\nexport type LoggerType = {\n  getLogger: loggerFunctionType,\n  LogLevel: LogLevelType\n};\n\nlet JsLogger = {\n  get: () => ({\n    trace: () => {},\n    debug: () => {},\n    info: () => {},\n    log: () => {},\n    warn: () => {},\n    error: () => {},\n    time: () => {},\n    timeEnd: () => {},\n    getLevel: () => {},\n    setLevel: () => {}\n  })\n};\n\nlet LogLevel: LogLevelType = {};\n/**\n * set logger\n * @param {LoggerType} logger - the logger\n * @returns {void}\n */\nfunction setLogger(logger: ?LoggerType): void {\n  if (logger && typeof logger.getLogger === 'function') {\n    JsLogger.get = logger.getLogger;\n  }\n  if (logger && logger.LogLevel) {\n    LogLevel = logger.LogLevel;\n  }\n}\n\n/**\n * get a logger\n * @param {?string} name - the logger name\n * @returns {Object} - the logger class\n */\nfunction getLogger(name?: string): Object {\n  //$FlowFixMe\n  return JsLogger.get(name);\n}\n\n/**\n * get the log level\n * @param {?string} name - the logger name\n * @returns {LogLevelObject} - the log level\n */\nfunction getLogLevel(name?: string): LogLevelObject {\n  return getLogger(name).getLevel();\n}\n\n/**\n * sets the logger level\n * @param {LogLevelObject} level - the log level\n * @param {?string} name - the logger name\n * @returns {void}\n */\nfunction setLogLevel(level: LogLevelObject, name?: string): void {\n  getLogger(name).setLevel(level);\n}\n\nexport default getLogger;\nexport {getLogLevel, setLogLevel, setLogger, LogLevel};\n","//@flow\nimport MediaSources from './media-sources';\n\nexport default class MediaEntry {\n  static Type: {[type: string]: string} = {\n    VOD: 'Vod',\n    LIVE: 'Live',\n    IMAGE: 'Image',\n    AUDIO: 'Audio',\n    UNKNOWN: 'Unknown'\n  };\n\n  /**\n   * @member - entry id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - entry name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - entry sources\n   * @type {MediaSources}\n   */\n  sources: MediaSources;\n  /**\n   * @member - entry duration\n   * @type {number}\n   */\n  duration: number;\n  /**\n   * @member - entry type\n   * @type {string}\n   */\n  type: string;\n  /**\n   * @member - entry metadata\n   * @type {Object}\n   */\n  metadata: Object;\n  /**\n   * @member - DVR status\n   * @type {number}\n   */\n  dvrStatus: number;\n  /**\n   * @member - media status\n   * @type {number}\n   */\n  status: number;\n  /**\n   * @member - media poster\n   * @type {string | Array<Object>}\n   */\n  poster: string | Array<Object>;\n\n  /**\n   * @member - assetReferenceType\n   * @type {string }\n   */\n  assetReferenceType: string;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.metadata = new Map();\n    this.sources = new MediaSources();\n    this.type = MediaEntry.Type.UNKNOWN;\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaEntryObject} - The json class object.\n   */\n  toJSON(): ProviderMediaEntryObject {\n    return {\n      id: this.id,\n      name: this.name,\n      sources: this.sources.toJSON(),\n      duration: this.duration,\n      dvrStatus: this.dvrStatus,\n      status: this.status,\n      metadata: this.metadata,\n      type: this.type,\n      poster: this.poster,\n      assetReferenceType: this.assetReferenceType\n    };\n  }\n}\n","//@flow\nimport Error from './error/error';\n\nconst KALTURA_HEADER_PREFIX: string = 'x-';\n\nexport default class RequestBuilder {\n  /**\n   * @member - Service name\n   * @type {string}\n   */\n  service: string;\n  /**\n   * @member - Service action\n   * @type {string}\n   */\n  action: string;\n  /**\n   * @member - Service params\n   * @type {any}\n   */\n  params: any;\n  /**\n   * @memberof - Service headers\n   * @type {Map<string, string>}\n   */\n  headers: Map<string, string>;\n  /**\n   * @memberof - Service URL\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @memberof - Service method (POST,GET,DELETE etc..)\n   * @type {string}\n   */\n  method: string;\n  /**\n   * @memberof - Service tag\n   * @type {string}\n   */\n  tag: string;\n  /**\n   * @memberof - the response headers of the arra\n   * @type {Array<string>}\n   */\n  responseHeaders: Array<string>;\n  /**\n   * @description network retry configuration\n   * @memberof RequestBuilder\n   * @type {ProviderNetworkRetryParameters}\n   */\n  retryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  /**\n   * @description number of xhr attempts for the same multi - request.\n   * @memberof RequestBuilder\n   * @type {number}\n   * @private\n   */\n  _attemptCounter: number = 1;\n\n  /**\n   * @description hold the promise result of the XHR request(s) - if all tries fails, it rejects with the error.\n   * @memberof RequestBuilder\n   * @type {Object}\n   * @private\n   */\n  _requestPromise: Object;\n\n  /**\n   * @constructor\n   * @param {Map<string, string>} headers The request headers\n   */\n  constructor(headers: Map<string, string> = new Map()) {\n    this.headers = headers;\n  }\n\n  /**\n   * Builds restful service URL\n   * @function getUrl\n   * @param {string} serviceUrl - The service base URL\n   * @returns {string} The service URL\n   */\n  getUrl(serviceUrl: string): string {\n    return serviceUrl + '/service/' + this.service + (this.action ? '/action/' + this.action : '');\n  }\n\n  /**\n   * Executes service\n   * @function doHttpRequest\n   * @returns {Promise.<any>} Service response as promise\n   */\n  doHttpRequest(): Promise<any> {\n    const promise = new Promise((resolve, reject) => {\n      this._requestPromise = {\n        resolve,\n        reject\n      };\n    });\n    if (!this.url) {\n      this._requestPromise.reject(\n        new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MALFORMED_DATA_URI, {\n          url: this.url\n        })\n      );\n    }\n    this._createXHR();\n    return promise;\n  }\n\n  _createXHR(): void {\n    let request = new XMLHttpRequest();\n    request.onreadystatechange = () => {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          try {\n            const response = JSON.parse(request.responseText);\n            this.responseHeaders = this._getResponseHeaders(request);\n            // the promise returns the response for backwards compatibility\n            return this._requestPromise.resolve(response);\n          } catch (error) {\n            this._requestPromise.reject(\n              this._createError(request, Error.Code.BAD_SERVER_RESPONSE, {\n                text: request.responseText\n              })\n            );\n          }\n        }\n      }\n    };\n    request.open(this.method, this.url, this.retryConfig.async);\n    if (this.retryConfig.async && this.retryConfig.timeout) {\n      request.timeout = this.retryConfig.timeout;\n    }\n    const requestTime = performance.now();\n    request.ontimeout = () => {\n      this._handleError(request, Error.Code.TIMEOUT, {\n        timeout: (performance.now() - requestTime) / 1000,\n        statusText: request.statusText\n      });\n    };\n    request.onerror = request.onabort = () => {\n      this._handleError(request, Error.Code.HTTP_ERROR, {\n        text: request.responseText,\n        statusText: request.statusText\n      });\n    };\n    this.headers.forEach((value, key) => {\n      request.setRequestHeader(key, value);\n    });\n    request.send(this.params);\n  }\n\n  _getResponseHeaders(request: XMLHttpRequest): Array<string> {\n    return request\n      .getAllResponseHeaders()\n      .split('\\n')\n      .filter(header => header.toLowerCase().indexOf(KALTURA_HEADER_PREFIX) === 0);\n  }\n\n  _handleError(request: XMLHttpRequest, code: number, data: Object): Promise<*> | void {\n    const error = this._createError(request, code, data);\n    request.onreadystatechange = function () {};\n    request.onerror = function () {};\n    request.ontimeout = function () {};\n    request.onabort = function () {};\n    if (this.retryConfig.maxAttempts && this._attemptCounter < this.retryConfig.maxAttempts) {\n      this._attemptCounter++;\n      this._createXHR();\n    } else {\n      return this._requestPromise.reject(error);\n    }\n  }\n\n  _createError(request: XMLHttpRequest, code: number, data: Object): Error {\n    Object.assign(data, {\n      url: this.url,\n      headers: this._getResponseHeaders(request),\n      attempt: this._attemptCounter\n    });\n    return new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, code, data);\n  }\n}\n","//@flow\nexport const MediaFormat: {[name: string]: ProviderMediaFormatType} = {\n  DASH: {\n    name: 'dash',\n    mimeType: 'application/dash+xml',\n    pathExt: 'mpd'\n  },\n  HLS: {\n    name: 'hls',\n    mimeType: 'application/x-mpegURL',\n    pathExt: 'm3u8'\n  },\n  WVM: {\n    name: 'wvm',\n    mimeType: 'video/wvm',\n    pathExt: 'wvm'\n  },\n  MP4: {\n    name: 'mp4',\n    mimeType: 'video/mp4',\n    pathExt: 'mp4'\n  },\n  MP3: {\n    name: 'mp3',\n    mimeType: 'audio/mpeg',\n    pathExt: 'mp3'\n  }\n};\n\nexport const SupportedStreamFormat: Map<string, ProviderMediaFormatType> = new Map([\n  ['mpegdash', MediaFormat.DASH],\n  ['applehttp', MediaFormat.HLS],\n  ['url', MediaFormat.MP4]\n]);\n\n/**\n * returns a boolean whether a source is progressive or not\n * @param {string} formatName - the format name\n * @returns {boolean} - if source is progressive or not\n */\nfunction isProgressiveSource(formatName: string): boolean {\n  const sourceFormat = SupportedStreamFormat.get(formatName);\n  return !!sourceFormat && sourceFormat.name === MediaFormat.MP4.name;\n}\n\nexport {isProgressiveSource};\n","//@flow\nexport default class ServiceResult {\n  /**\n   * @member - Is service returned an error\n   * @type {boolean}\n   */\n  hasError: boolean = false;\n  /**\n   * @member - The service error\n   * @type {ServiceError}\n   */\n  error: ServiceError;\n  /**\n   * @member - The service result data\n   * @type {Object}\n   */\n  data: Object;\n\n  /**\n   * @constructor\n   * @param {Object} response - Service response\n   */\n  constructor(response: Object) {\n    if (response.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.code, response.message);\n    } else if (response.error && response.error.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.error.code, response.error.message);\n    } else {\n      this.data = response;\n    }\n  }\n}\n\nclass ServiceError {\n  /**\n   * @member - The error code\n   * @type {string}\n   */\n  code: string;\n  /**\n   * @member - The error message\n   * @type {string}\n   */\n  message: string;\n\n  /**\n   * @constructor\n   * @param {string} code - The result code\n   * @param {string} message - The result message\n   */\n  constructor(code: string, message: string) {\n    this.code = code;\n    this.message = message;\n  }\n}\n","//@flow\nexport default class KalturaDrmPlaybackPluginData {\n  static Scheme: {[scheme: string]: string} = {\n    'drm.PLAYREADY_CENC': 'com.microsoft.playready',\n    'drm.WIDEVINE_CENC': 'com.widevine.alpha',\n    'fairplay.FAIRPLAY': 'com.apple.fairplay',\n    WIDEVINE_CENC: 'com.widevine.alpha',\n    PLAYREADY_CENC: 'com.microsoft.playready',\n    FAIRPLAY: 'com.apple.fairplay'\n  };\n\n  /**\n   * @member - The drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - The license URL\n   * @type {string}\n   */\n  licenseURL: string;\n\n  /**\n   * @member - The drm certificate\n   * @type {?string}\n   */\n  certificate: ?string;\n\n  /**\n   * @constructor\n   * @param {Object} drm The json response\n   */\n  constructor(drm: any) {\n    this.scheme = drm.scheme;\n    this.licenseURL = drm.licenseURL;\n    this.certificate = drm.certificate;\n  }\n}\n","// @flow\nimport MediaSource from './media-source';\nimport {MediaFormat} from './media-format';\n\nexport default class MediaSources {\n  /**\n   * Progressive download media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  progressive: Array<MediaSource>;\n  /**\n   * Dash media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  dash: Array<MediaSource>;\n  /**\n   * Hls media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  hls: Array<MediaSource>;\n  captions: Array<PKExternalCaptionObject>;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.progressive = [];\n    this.dash = [];\n    this.hls = [];\n  }\n\n  /**\n   * Maps the source to one of the containers according to his media format.\n   * @param {MediaSource} source - The source to add to one of the containers.\n   * @param {MediaFormat} mediaFormat - The media format of the source.\n   * @returns {void}\n   */\n  map(source: MediaSource, mediaFormat: ?ProviderMediaFormatType) {\n    if (mediaFormat) {\n      switch (mediaFormat.name) {\n        case MediaFormat.MP4.name:\n          this.progressive.push(source);\n          break;\n        case MediaFormat.DASH.name:\n          this.dash.push(source);\n          break;\n        case MediaFormat.HLS.name:\n          this.hls.push(source);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourcesObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourcesObject {\n    const response: ProviderMediaSourcesObject = {\n      progressive: [],\n      dash: [],\n      hls: []\n    };\n    this.progressive.forEach(p => response.progressive.push(p.toJSON()));\n    this.hls.forEach(h => response.hls.push(h.toJSON()));\n    this.dash.forEach(d => response.dash.push(d.toJSON()));\n    return response;\n  }\n}\n","//@flow\nimport Drm from './drm';\n\nexport default class MediaSource {\n  /**\n   * @member - media source id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - media source url\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - media source mimetype\n   * @type {string}\n   */\n  mimetype: string;\n  /**\n   * @member - media source drm data\n   * @type {Array<Drm>}\n   */\n  drmData: Array<Drm>;\n  /**\n   * @member - media source bandwidth\n   * @type {number}\n   */\n  bandwidth: number;\n  /**\n   * @member - media source width\n   * @type {number}\n   */\n  width: number;\n  /**\n   * @member - media source height\n   * @type {number}\n   */\n  height: number;\n  /**\n   * @member - media source label\n   * @type {string}\n   */\n  label: string;\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourceObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourceObject {\n    const response: ProviderMediaSourceObject = {\n      id: this.id,\n      url: this.url,\n      mimetype: this.mimetype\n    };\n    if (this.bandwidth) response.bandwidth = this.bandwidth;\n    if (this.width) response.width = this.width;\n    if (this.height) response.height = this.height;\n    if (this.label) response.label = this.label;\n    if (this.drmData && this.drmData.length > 0) {\n      response.drmData = [];\n      this.drmData.forEach(d => {\n        if (Array.isArray(response.drmData)) {\n          response.drmData.push(d.toJSON());\n        }\n      });\n    }\n    return response;\n  }\n}\n","// @flow\nimport MultiRequestBuilder, {MultiRequestResult} from './multi-request-builder';\nimport Error from '../../util/error/error';\n\nexport default class DataLoaderManager {\n  /**\n   * @member - Loaders response map index\n   * @type {Map<string,Array<number>>}\n   * @private\n   */\n  _loadersResponseMap: Map<string, Array<number>> = new Map();\n  /**\n   * @member - Loaders multi request\n   * @type {MultiRequestBuilder}\n   * @protected\n   */\n  _multiRequest: MultiRequestBuilder;\n  /**\n   * @member - Loaders multi response\n   * @type {MultiRequestResult}\n   * @private\n   */\n  _multiResponse: MultiRequestResult;\n  /**\n   * @member - Loaders to execute\n   * @type {Map<string,Function>}\n   * @private\n   */\n  _loaders: Map<string, ILoader> = new Map();\n\n  _networkRetryConfig: ProviderNetworkRetryParameters;\n\n  constructor(networkRetryConfig: ProviderNetworkRetryParameters) {\n    this._networkRetryConfig = networkRetryConfig;\n  }\n\n  /**\n   * Add loader too execution loaders map\n   * @function\n   * @param {Function} loader Loader to add\n   * @param {Object} params Loader params\n   * @returns {void}\n   */\n  add(loader: Function, params: Object): void {\n    let execution_loader = new loader(params);\n    if (execution_loader.isValid()) {\n      this._loaders.set(loader.id, execution_loader);\n      // Get the start index from the multiReqeust before adding current execution_loader requests\n      let startIndex = this._multiRequest.requests.length;\n      // Get the requests\n      let requests = execution_loader.requests;\n      this._multiRequest.retryConfig = this._networkRetryConfig;\n      // Add requests to muktiRequest queue\n      requests.forEach(request => {\n        this._multiRequest.add(request);\n      });\n      // Create range array of current execution_loader requests\n      let executionLoaderResponseMap = Array.from(new Array(requests.length), (val, index) => index + startIndex);\n      // Add to map\n      this._loadersResponseMap.set(loader.id, executionLoaderResponseMap);\n    }\n  }\n\n  /**\n   * Get data from all loaders using multi request\n   * @function\n   * @returns {Promise} Promise\n   */\n  fetchData(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this._multiRequest.execute().then(\n        data => {\n          this._multiResponse = data.response;\n          let preparedData: Object = this.prepareData(data.response);\n          if (preparedData.success) {\n            resolve(this._loaders);\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.API_RESPONSE_MISMATCH, {\n                headers: data.headers\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n\n  /**\n   * Prepare fetched data\n   * @function\n   * @param {MultiRequestResult} response - The multi request result\n   * @returns {Object} - The prepared data\n   */\n  prepareData(response: MultiRequestResult): Object {\n    this._loaders.forEach((loader, name) => {\n      let loaderDataIndexes = this._loadersResponseMap.get(name);\n      try {\n        if (loaderDataIndexes && loaderDataIndexes.length > 0) {\n          loader.response = response.results.slice(loaderDataIndexes[0], loaderDataIndexes[loaderDataIndexes.length - 1] + 1);\n        }\n      } catch (err) {\n        return {success: false, error: err};\n      }\n    });\n    return {success: true, data: this._loaders};\n  }\n}\n","//@flow\nimport RequestBuilder from '../../util/request-builder';\nimport getLogger from '../../util/logger';\nimport ServiceResult from './base-service-result';\nimport Error from '../../util/error/error';\n\nexport default class MultiRequestBuilder extends RequestBuilder {\n  static _logger = getLogger('MultiRequestBuilder');\n  /**\n   * @memberof - MultiRequestBuilder\n   * @type {Array<RequestBuilder>}\n   */\n  requests: Array<RequestBuilder> = [];\n  /**\n   * Adds request to requests array\n   * @function add\n   * @param {RequestBuilder} request The request\n   * @returns {MultiRequestBuilder} The multiRequest\n   */\n  add(request: RequestBuilder): MultiRequestBuilder {\n    this.requests.push(request);\n    const requestParams = {};\n    const serviceDef: Object = {service: request.service, action: request.action};\n    Object.assign(requestParams, {[this.requests.length]: Object.assign(serviceDef, request.params)});\n    Object.assign(requestParams, this.params);\n    this.params = requestParams;\n    return this;\n  }\n\n  /**\n   * Executes a multi request\n   * @function execute\n   * @returns {Promise} The multirequest execution promise\n   */\n  execute(): Promise<Object> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.params = JSON.stringify(this.params);\n      } catch (err) {\n        MultiRequestBuilder._logger.error(`${err.message}`);\n        reject(\n          new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.FAILED_PARSING_REQUEST, {\n            error: err,\n            params: this.params\n          })\n        );\n      }\n      this.doHttpRequest().then(\n        data => {\n          const multiRequestResult = new MultiRequestResult(data);\n          if (multiRequestResult.success) {\n            resolve({\n              headers: this.responseHeaders,\n              response: multiRequestResult\n            });\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MULTIREQUEST_API_ERROR, {\n                url: this.url,\n                headers: this.responseHeaders,\n                results: multiRequestResult.results\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n}\n\nexport class MultiRequestResult {\n  static _logger = getLogger('MultiRequestResult');\n  /**\n   * @memberof MultiRequestResult\n   * @type {boolean}\n   */\n  success: boolean;\n  /**\n   * @memberof MultiRequestResult\n   * @type {Object}\n   */\n  results: Array<ServiceResult> = [];\n  /**\n   * @constructor\n   * @param {Object} response data\n   */\n  constructor(response: Object) {\n    this.success = true;\n    const responseArr = response.result ? response.result : response;\n    responseArr.forEach(result => {\n      const serviceResult: ServiceResult = new ServiceResult(result);\n      this.results.push(serviceResult);\n      if (serviceResult.hasError) {\n        MultiRequestResult._logger.error(\n          `Service returned an error with error code: ${serviceResult.error.code} and message: ${serviceResult.error.message}.`\n        );\n        this.success = false;\n        return;\n      }\n    });\n  }\n}\n","//@flow\nexport default class KalturaAccessControlMessage {\n  /**\n   * @member - The access control message\n   * @type {string}\n   */\n  message: string;\n  /**\n   *  @member - The access control message code\n   * @@type {string}\n   */\n  code: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The json response\n   */\n  constructor(data: Object) {\n    this.message = data.message;\n    this.code = data.code;\n  }\n}\n","//@flow\nexport default class Drm {\n  /**\n   * @member - license url\n   * @type {string}\n   */\n  licenseUrl: string;\n  /**\n   * @member - drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - drm certificate\n   * @type {string}\n   */\n  certificate: string;\n\n  /**\n   * @constructor\n   * @param {string} licenseUrl - the license url\n   * @param {string} scheme - the drm scheme\n   * @param {?string} certificate - the drm certificate\n   */\n  constructor(licenseUrl: string, scheme: string, certificate: ?string) {\n    this.licenseUrl = licenseUrl;\n    this.scheme = scheme;\n    if (certificate) {\n      this.certificate = certificate;\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderDrmDataObject} - The json class object.\n   */\n  toJSON(): ProviderDrmDataObject {\n    const response: ProviderDrmDataObject = {\n      licenseUrl: this.licenseUrl,\n      scheme: this.scheme\n    };\n    if (this.certificate) response.certificate = this.certificate;\n    return response;\n  }\n}\n","// @flow\nimport {getLogLevel, setLogLevel, setLogger, type LogLevelType, LogLevel} from '../../util/logger';\nimport DataLoaderManager from './data-loader-manager';\nimport Error from '../../util/error/error';\n\nexport default class BaseProvider<MI> {\n  _partnerId: number;\n  _widgetId: ?string;\n  _ks: string;\n  _uiConfId: ?number;\n  _dataLoader: DataLoaderManager;\n  _playerVersion: string;\n  _logger: any;\n  _isAnonymous: boolean;\n  _networkRetryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  get partnerId(): number {\n    return this._partnerId;\n  }\n\n  get widgetId(): string {\n    return this._widgetId || this.defaultWidgetId;\n  }\n\n  get defaultWidgetId(): string {\n    return '_' + this._partnerId;\n  }\n\n  get uiConfId(): ?number {\n    return this._uiConfId;\n  }\n\n  get ks(): string {\n    return this._ks;\n  }\n\n  set ks(value: string): void {\n    this._ks = value;\n  }\n\n  get playerVersion(): string {\n    return this._playerVersion;\n  }\n\n  get isAnonymous(): boolean {\n    return this._isAnonymous;\n  }\n\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    setLogger(options.logger);\n    this._partnerId = options.partnerId;\n    this._widgetId = options.widgetId;\n    this._uiConfId = options.uiConfId;\n    this._isAnonymous = !options.ks;\n    this._ks = options.ks || '';\n    this._playerVersion = playerVersion;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getMediaConfig(mediaInfo: MI): Promise<ProviderMediaConfigObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'getMediaConfig method must be implement by the derived class'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getPlaylistConfig(playlistInfo: ProviderPlaylistInfoObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading playlist by id'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading entry list'\n      })\n    );\n  }\n\n  _verifyHasSources(sources: ProviderMediaConfigSourcesObject) {\n    if (sources.hls.concat(sources.dash, sources.progressive).length === 0) {\n      throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.MISSING_PLAY_SOURCE, {\n        action: '',\n        messages: `No play source for entry id: ${sources.id}`\n      });\n    }\n  }\n\n  get LogLevel(): LogLevelType {\n    return LogLevel;\n  }\n\n  getLogLevel(name?: string): Object {\n    return getLogLevel(name);\n  }\n\n  setLogLevel(level: Object, name?: string): void {\n    setLogLevel(level, name);\n  }\n}\n","const clone = data => {\n  let node;\n  if (Array.isArray(data)) {\n    node = data.length > 0 ? data.slice(0) : [];\n    node.forEach((e, i) => {\n      if ((typeof e === 'object' && e !== {}) || (Array.isArray(e) && e.length > 0)) {\n        node[i] = clone(e);\n      }\n    });\n  } else if (typeof data === 'object') {\n    node = Object.assign({}, data);\n    Object.keys(node).forEach(key => {\n      if ((typeof node[key] === 'object' && node[key] !== {}) || (Array.isArray(node[key]) && node[key].length > 0)) {\n        node[key] = clone(node[key]);\n      }\n    });\n  } else {\n    node = data;\n  }\n  return node;\n};\n\nexport {clone};\n","//@flow\n\nimport MediaEntry from '../entities/media-entry';\n\nexport default class EntryList {\n  /**\n   * @member - entry list items\n   * @type {Array<MediaEntry>}\n   */\n  items: Array<MediaEntry>;\n\n  constructor() {\n    this.items = [];\n  }\n}\n","//@flow\n\nexport default class Bumper {\n  /**\n   * @member - bumper url\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - bumper click through url\n   * @type {string}\n   */\n  clickThroughUrl: string;\n\n  /**\n   * @constructor\n   * @param {Object} data - The bumper response\n   */\n  constructor(data: Object) {\n    this.url = data.url;\n    this.clickThroughUrl = data.clickThroughUrl;\n  }\n}\n","//@flow\nimport {clone} from '../../util/clone';\n\nconst defaultConfig: Object = {\n  serviceUrl: 'https://cdnapisec.kaltura.com/api_v3',\n  cdnUrl: 'https://cdnapisec.kaltura.com',\n  serviceParams: {\n    apiVersion: '3.3.0',\n    format: 1\n  },\n  useApiCaptions: true\n};\n\nexport default class OVPConfiguration {\n  static set(clientConfig?: ProviderEnvConfigObject) {\n    if (clientConfig) {\n      Object.assign(defaultConfig, clientConfig);\n    }\n  }\n\n  static get(): Object {\n    return clone(defaultConfig);\n  }\n}\n\nexport {OVPConfiguration};\n","//@flow\nimport KalturaDrmPlaybackPluginData from '../../common/response-types/kaltura-drm-playback-plugin-data';\n\nexport type OVPKalturaPlaybackSource = KalturaPlaybackSource;\n\nexport default class KalturaPlaybackSource {\n  /**\n   * @member - source format according to delivery profile streamer type (applehttp, mpegdash etc.)\n   * @type {string}\n   */\n  format: string;\n  /**\n   * @member - delivery profile Id\n   * @type {string}\n   */\n  deliveryProfileId: string;\n  /**\n   * @member - The source URL\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - comma separated string according to deliveryProfile media protocols ('http,https' etc.)\n   * @type {string}\n   */\n  protocols: string;\n  /**\n   * @member - comma separated string of flavor ids\n   * @type {string}\n   */\n  flavorIds: string;\n  /**\n   * @member - drm data object containing relevant license url ,scheme name and certificate\n   * @type {Array<KalturaDrmPlaybackPluginData>}\n   */\n  drm: Array<KalturaDrmPlaybackPluginData> = [];\n\n  /**\n   * @constructor\n   * @param {Object} source The response\n   */\n  constructor(source: Object) {\n    this.format = source.format;\n    this.deliveryProfileId = source.deliveryProfileId;\n    this.url = source.url;\n    this.protocols = source.protocols;\n    this.flavorIds = source.flavorIds;\n    if (source.drm) {\n      source.drm.map(drm => this.drm.push(new KalturaDrmPlaybackPluginData(drm)));\n    }\n  }\n\n  /**\n   * Checks if source has DRM data\n   * @function hasDrmData\n   * @returns {boolean} Is source has DRM\n   */\n  hasDrmData(): boolean {\n    return this.drm && this.drm.length > 0;\n  }\n\n  /**\n   * Checks if source has flavor IDs\n   * @function hasFlavorIds\n   * @returns {boolean} Is source ha flavor IDs\n   */\n  hasFlavorIds(): boolean {\n    return !!this.flavorIds && this.flavorIds.length > 0;\n  }\n\n  /**\n   * Returns source desired protocol if supported\n   * @param {string} protocol - the desired protocol for the source (base play url protocol)\n   * @returns {string} - protocol if protocol is in the protocols list - if not empty string returned\n   */\n  getProtocol(protocol: string): string {\n    let returnValue: string = '';\n    if (this.protocols && this.protocols.length > 0) {\n      let protocolsArr: Array<string> = this.protocols.split(',');\n      protocolsArr.forEach(p => {\n        if (p === protocol) {\n          returnValue = p;\n        }\n      });\n    } else if (protocol === 'http') {\n      return protocol;\n    }\n    return returnValue;\n  }\n}\n","//@flow\nexport default class KalturaRuleAction {\n  static Type: {[type: string]: string | number} = {\n    DRM_POLICY: 'drm.DRM_POLICY',\n    BLOCK: 1,\n    PREVIEW: 2,\n    LIMIT_FLAVORS: 3,\n    ADD_TO_STORAGE: 4,\n    LIMIT_DELIVERY_PROFILES: 5,\n    SERVE_FROM_REMOTE_SERVER: 6,\n    REQUEST_HOST_REGEX: 7,\n    LIMIT_THUMBNAIL_CAPTURE: 8\n  };\n\n  /**\n   * @member - The type of the action\n   * @type {string|number}\n   */\n  type: string | number;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    this.type = data.type;\n  }\n}\n","//@flow\nimport KalturaRuleAction from './kaltura-rule-action';\n\nexport default class KalturaAccessControlModifyRequestHostRegexAction extends KalturaRuleAction {\n  /**\n   * @member - Request host regex pattern\n   * @type {string}\n   */\n  pattern: string;\n  /**\n   * @member - Request host regex replacement\n   * @type {string}\n   */\n  replacement: string;\n  /**\n   * @member - serverNodeId to generate replacment host from\n   * @type {number}\n   */\n  replacmenServerNodeId: number;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    super(data);\n    this.pattern = data.pattern;\n    this.replacement = data.replacement;\n    this.replacmenServerNodeId = data.replacmenServerNodeId;\n  }\n}\n","//@flow\nexport default class KalturaFlavorAsset {\n  static Status: {[status: string]: number} = {\n    ERROR: -1,\n    QUEUED: 0,\n    CONVERTING: 1,\n    READY: 2,\n    DELETED: 3,\n    NOT_APPLICABLE: 4,\n    TEMP: 5,\n    WAIT_FOR_CONVERT: 6,\n    IMPORTING: 7,\n    VALIDATING: 8,\n    EXPORTING: 9\n  };\n\n  /**\n   * @member - The ID of the Flavor Asset\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member -The Flavor Params used to create this Flavor Asset\n   * @type {string}\n   */\n  flavorParamsId: string;\n  /**\n   * @member -The file extension\n   * @type {string}\n   */\n  fileExt: string;\n  /**\n   * @member - The overall bitrate (in KBits) of the Flavor Asset\n   *  @type {string}\n   */\n  bitrate: number;\n  /**\n   * @member - The width of the Flavor Asset\n   * @type {number}\n   */\n  width: number;\n  /**\n   * @member - The height of the Flavor Asset\n   * @type {number}\n   */\n  height: number;\n  /**\n   * @member - The frame rate (in FPS) of the Flavor Asset\n   * @type {number}\n   */\n  frameRate: number;\n  /**\n   * @member - True if this Flavor Asset is the original source\n   * @type {number}\n   */\n  isOriginal: boolean;\n  /**\n   * @member - True if this Flavor Asset is playable in KDP\n   * @type {boolean}\n   */\n  isWeb: boolean;\n  /**\n   * @member - The container format\n   * @type {boolean}\n   */\n  containerFormat: string;\n  /**\n   *@member - The video codec\n   * @type {boolean}\n   */\n  videoCodecId: string;\n  /**\n   * @member - The status of the Flavor Asset\n   * @type {number}\n   */\n  status: number;\n  /**\n   * @member - The language of the flavor asset\n   * @type {Status}\n   */\n  language: string;\n  /**\n   * @member - The label of the flavor asset\n   * @type {string}\n   */\n  label: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The json response\n   */\n  constructor(data: any) {\n    this.id = data.id;\n    this.flavorParamsId = data.flavorParamsId;\n    this.fileExt = data.fileExt;\n    this.bitrate = data.bitrate;\n    this.width = data.width;\n    this.height = data.height;\n    this.id = data.id;\n    this.frameRate = data.frameRate;\n    this.isOriginal = data.isOriginal;\n    this.isWeb = data.isWeb;\n    this.containerFormat = data.containerFormat;\n    this.videoCodecId = data.videoCodecId;\n    this.status = data.status;\n    this.language = data.language;\n    this.label = data.label;\n  }\n}\n","//@flow\nimport KalturaPlaybackSource from './kaltura-playback-source';\n\nexport default class KalturaBumper {\n  /**\n   * @member - The bumper entry ID\n   * @type {string}\n   */\n  entryId: string;\n  /**\n   * @member - The bumper click through url\n   * @type {string}\n   */\n  clickThroughUrl: string;\n  /**\n   * @member - The bumper sources\n   * @type {Array<KalturaPlaybackSource>}\n   */\n  sources: Array<KalturaPlaybackSource>;\n\n  constructor(data: any) {\n    this.entryId = data.entryId;\n    this.clickThroughUrl = data.url;\n    this.sources = data.sources.map(source => new KalturaPlaybackSource(source));\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaAccessControlMessage from '../../common/response-types/kaltura-access-control-message';\nimport KalturaPlaybackSource from './kaltura-playback-source';\nimport KalturaAccessControlModifyRequestHostRegexAction from './kaltura-access-control-modify-request-host-regex-action';\nimport KalturaRuleAction from './kaltura-rule-action';\nimport KalturaFlavorAsset from './kaltura-flavor-asset';\nimport KalturaBumper from './kaltura-bumper';\n\nexport default class KalturaPlaybackContext extends ServiceResult {\n  /**\n   * @member - The playback sources\n   * @type {Array<KalturaPlaybackSource>}\n   */\n  sources: Array<KalturaPlaybackSource> = [];\n  /**\n   * @member - Array of actions as received from the rules that invalidated\n   * @type {Array<KalturaRuleAction>}\n   */\n  actions: Array<KalturaRuleAction> = [];\n  /**\n   * @member - Array of actions as received from the rules that invalidated\n   * @type {Array<KalturaAccessControlMessage>}\n   */\n  messages: Array<KalturaAccessControlMessage> = [];\n  /**\n   * @member - The flavor assets\n   * @type {Array<KalturaFlavorAsset>}\n   */\n  flavorAssets: Array<KalturaFlavorAsset> = [];\n  /**\n   * @member - The bumper data\n   * @type {Array<KalturaBumper>}\n   */\n  bumperData: Array<KalturaBumper> = [];\n\n  /**\n   * @constructor\n   * @param {Object} response The response\n   */\n  constructor(response: Object) {\n    super(response);\n    if (!this.hasError) {\n      const messages = response.messages;\n      if (messages) {\n        messages.map(message => this.messages.push(new KalturaAccessControlMessage(message)));\n      }\n      const actions = response.actions;\n      if (actions) {\n        actions.map(action => {\n          if (action.type === KalturaRuleAction.Type.REQUEST_HOST_REGEX) {\n            this.actions.push(new KalturaAccessControlModifyRequestHostRegexAction(action));\n          } else {\n            this.actions.push(new KalturaRuleAction(action));\n          }\n        });\n      }\n      const sources = response.sources;\n      if (sources) {\n        sources.map(source => this.sources.push(new KalturaPlaybackSource(source)));\n      }\n      const flavorAssets = response.flavorAssets;\n      if (flavorAssets) {\n        flavorAssets.map(flavor => this.flavorAssets.push(new KalturaFlavorAsset(flavor)));\n      }\n      const bumperData = response.bumperData;\n      if (bumperData) {\n        bumperData.map(bumper => this.bumperData.push(new KalturaBumper(bumper)));\n      }\n    }\n  }\n\n  hasBlockAction(): boolean {\n    return this.getBlockAction() !== undefined;\n  }\n\n  getBlockAction(): ?KalturaRuleAction {\n    return this.actions.find(action => action.type === KalturaRuleAction.Type.BLOCK);\n  }\n\n  getErrorMessages(): Array<KalturaAccessControlMessage> {\n    return this.messages;\n  }\n\n  /**\n   * Get the KalturaAccessControlModifyRequestHostRegexAction action\n   * @function getRequestHostRegexAction\n   * @returns {?KalturaAccessControlModifyRequestHostRegexAction} The action\n   * */\n  getRequestHostRegexAction(): ?KalturaAccessControlModifyRequestHostRegexAction {\n    const action = this.actions.find(action => action.type === KalturaRuleAction.Type.REQUEST_HOST_REGEX);\n    if (action instanceof KalturaAccessControlModifyRequestHostRegexAction) {\n      return action;\n    }\n  }\n}\n","//@flow\nexport default class KalturaMetadata {\n  static ObjectType: {[type: string]: string | number} = {\n    AD_CUE_POINT: 'adCuePointMetadata.AdCuePoint',\n    ANNOTATION: 'annotationMetadata.Annotation',\n    CODE_CUE_POINT: 'codeCuePointMetadata.CodeCuePoint',\n    THUMB_CUE_POINT: 'thumbCuePointMetadata.thumbCuePoint',\n    ENTRY: 1,\n    CATEGORY: 2,\n    USER: 3,\n    PARTNER: 4,\n    DYNAMIC_OBJECT: 5\n  };\n\n  static Status: {[status: string]: number} = {\n    VALID: 1,\n    INVALID: 2,\n    DELETED: 3\n  };\n\n  id: number;\n  metadataProfileId: number;\n  metadataProfileVersion: number;\n  metadataObjectType: string | number;\n  objectId: string;\n  version: number;\n  created: Date;\n  updated: Date;\n  status: number;\n  xml: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The response\n   */\n  constructor(data: Object) {\n    this.id = data.id;\n    this.metadataProfileId = data.metadataProfileId;\n    this.metadataProfileVersion = data.metadataProfileVersion;\n    this.metadataProfileId = data.metadataProfileId;\n    this.metadataObjectType = data.metadataObjectType;\n    this.objectId = data.objectId;\n    this.version = data.version;\n    this.created = new Date(0);\n    this.created.setUTCSeconds(data.createdAt);\n    this.updated = new Date(0);\n    this.updated.setUTCSeconds(data.updatedAt);\n    this.status = data.status;\n    this.xml = data.xml;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaMetadata from './kaltura-metadata';\n\nexport default class KalturaMetadataListResponse extends ServiceResult {\n  totalCount: number;\n  metas: Array<KalturaMetadata>;\n\n  /**\n   * @constructor\n   * @param {Object} responseObj The response\n   */\n  constructor(responseObj: Object) {\n    super(responseObj);\n    if (!this.hasError) {\n      this.totalCount = responseObj.totalCount;\n      if (this.totalCount > 0) {\n        this.metas = [];\n        responseObj.objects.map(meta => this.metas.push(new KalturaMetadata(meta)));\n      }\n    }\n  }\n}\n","//@flow\nexport default class KalturaMediaEntry {\n  static EntryType: {[entryType: string]: {value: number | string}} = {\n    AUTOMATIC: {value: -1},\n    EXTERNAL_MEDIA: {value: 'externalMedia.externalMedia'},\n    MEDIA_CLIP: {value: 1},\n    MIX: {value: 2},\n    PLAYLIST: {value: 5},\n    DATA: {value: 6},\n    LIVE_STREAM: {value: 7},\n    LIVE_CHANNEL: {value: 8},\n    DOCUMENT: {value: 10}\n  };\n\n  static MediaType: {[mediaType: string]: {value: number}} = {\n    VIDEO: {value: 1},\n    IMAGE: {value: 2},\n    AUDIO: {value: 5},\n    LIVE_STREAM_FLASH: {value: 201},\n    LIVE_STREAM_WINDOWS_MEDIA: {value: 202},\n    LIVE_STREAM_REAL_MEDIA: {value: 203},\n    LIVE_STREAM_QUICK_TIME: {value: 204}\n  };\n\n  static EntryStatus: {[status: string]: string | number} = {\n    ERROR_IMPORTING: -2,\n    ERROR_CONVERTING: -1,\n    SCAN_FAILURE: 'virusScan.ScanFailure',\n    IMPORT: 0,\n    INFECTED: 'virusScan.Infected',\n    PRECONVERT: 1,\n    READY: 2,\n    DELETED: 3,\n    PENDING: 4,\n    MODERATE: 5,\n    BLOCKED: 6,\n    NO_CONTENT: 7\n  };\n\n  static EntryModerationStatus: {[status: string]: number} = {\n    PENDING_MODERATION: 1,\n    APPROVED: 2,\n    REJECTED: 3,\n    FLAGGED_FOR_REVIEW: 4,\n    MODERATE: 5,\n    AUTO_APPROVED: 6\n  };\n\n  /**\n   * @member - The entry id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - The entry referenceId\n   * @type {string}\n   */\n  referenceId: string;\n  /**\n   * @member - The entry externalSourceType\n   * @type {string}\n   */\n  externalSourceType: string;\n  /**\n   * @member - Entry name (Min 1 chars)\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - Entry description\n   * @type {string}\n   */\n  description: string;\n  /**\n   * @member - The URL used for playback. This is not the download URL.\n   * @type {string}\n   */\n  dataUrl: string;\n  /**\n   * @member - Comma separated flavor params ids that exists for this media entry\n   * @type {string}\n   */\n  flavorParamsIds: string;\n  /**\n   * @member - The entry duration\n   * @type {number}\n   */\n  duration: number;\n  /**\n   * @member - The type of the entry, this is auto filled by the derived entry object\n   * @type {string | number}\n   */\n  type: string | number;\n  /**\n   * @member - The type of the entry, this is auto filled by the derived entry object (Image, Audio etc.)\n   * @type {number}\n   */\n  entryType: number;\n  /**\n   * @member - Entry poster image\n   * @type {string}\n   */\n  poster: string;\n  /**\n   * @member - DVR status\n   * @type {number}\n   */\n  dvrStatus: number;\n  /**\n   * @member - Entry tags\n   * @type {string}\n   */\n  tags: string;\n\n  /**\n   * @member - Entry status\n   * @type {number}\n   */\n  status: number;\n\n  /**\n   * @constructor\n   * @param {Object} entry The json response\n   */\n  constructor(entry: Object) {\n    this.id = entry.id;\n    this.referenceId = entry.referenceId;\n    this.externalSourceType = entry.externalSourceType;\n    this.name = entry.name;\n    this.description = entry.description;\n    this.dataUrl = entry.dataUrl;\n    this.type = entry.type;\n    this.entryType = entry.mediaType;\n    this.flavorParamsIds = entry.flavorParamsIds;\n    this.duration = entry.duration;\n    this.poster = entry.thumbnailUrl;\n    this.status = entry.status;\n    this.dvrStatus = entry.dvrStatus;\n    this.tags = entry.tags;\n  }\n}\n","//@flow\nimport OVPConfiguration from './config';\n\ntype urlParamsType = {\n  partnerId: number,\n  entryId: string,\n  ks: string,\n  uiConfId: ?number,\n  format: string,\n  protocol: string,\n  extension: string,\n  flavorIds: ?string\n};\n\nexport default class PlaySourceUrlBuilder {\n  /**\n   * Returns source url by given url params\n   * @function build\n   * @param {urlParamsType} urlParams The params\n   * @returns {string} The URL\n   * @static\n   */\n  static build(urlParams: urlParamsType): string {\n    const config = OVPConfiguration.get();\n    const serviceUrlOrigin: string = config.serviceUrl.substr(0, config.serviceUrl.lastIndexOf('/'));\n    const {partnerId, entryId, ks, uiConfId, format, protocol, extension, flavorIds} = urlParams;\n\n    //verify mandatory params\n    if (!serviceUrlOrigin || !partnerId || !entryId || !format || !protocol) {\n      return '';\n    }\n\n    let playUrl = serviceUrlOrigin;\n    if (!serviceUrlOrigin.endsWith('/')) {\n      playUrl += '/';\n    }\n    playUrl += 'p/' + partnerId + '/sp/' + partnerId + '00' + '/playManifest/entryId/' + entryId + '/protocol/' + protocol + '/format/' + format;\n\n    if (flavorIds) {\n      playUrl += '/flavorIds/' + flavorIds;\n    } else if (uiConfId) {\n      playUrl += '/uiConfId/' + uiConfId;\n    }\n\n    if (ks !== '') {\n      playUrl += '/ks/' + ks;\n    }\n\n    if (extension !== '') {\n      playUrl += '/a.' + extension;\n    }\n\n    if (uiConfId && flavorIds !== '') {\n      playUrl += '?uiConfId=' + uiConfId;\n    }\n\n    return playUrl;\n  }\n}\n","//@flow\nexport default class XmlParser {\n  /**\n   * Parses xml string to json object\n   * @param {string} xml The xml to parse\n   * @returns {{}} The parsed xml as Json object\n   * @static\n   */\n  static xmlToJson(xml: Object) {\n    let obj = {};\n    if (xml.nodeType === 1) {\n      if (xml.attributes.length > 0) {\n        obj['@attributes'] = {};\n        for (let j = 0; j < xml.attributes.length; j++) {\n          let attribute = xml.attributes.item(j);\n          obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\n        }\n      }\n    } else if (xml.nodeType === 3) {\n      obj = xml.nodeValue;\n    }\n    if (xml.hasChildNodes()) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        let item = xml.childNodes.item(i);\n        let nodeName = item.nodeName;\n        if (typeof obj[nodeName] === 'undefined') {\n          obj[nodeName] = this.xmlToJson(item);\n        } else {\n          if (typeof obj[nodeName].push === 'undefined') {\n            let old = obj[nodeName];\n            obj[nodeName] = [];\n            obj[nodeName].push(old);\n          }\n          obj[nodeName].push(this.xmlToJson(item));\n        }\n      }\n    }\n    return obj;\n  }\n}\n","//@flow\n\nimport MediaEntry from '../entities/media-entry';\n\nexport default class Playlist {\n  /**\n   * @member - playlist id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - playlist name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - playlist description\n   * @type {string}\n   */\n  description: string;\n\n  /**\n   * @member - playlist poster\n   * @type {string}\n   */\n  poster: string;\n\n  /**\n   * @member - playlist items\n   * @type {Array<MediaEntry>}\n   */\n  items: Array<MediaEntry>;\n\n  constructor() {\n    this.items = [];\n  }\n}\n","// @flow\n\nconst KalturaCaptionType: CaptionType = {\n  SRT: '1',\n  DFXP: '2',\n  WEBVTT: '3',\n  CAP: '4'\n};\n\nconst CaptionsFormatsMap: {[format: string]: string} = {\n  '3': 'vtt',\n  '1': 'srt'\n};\n\nclass ExternalCaptionsBuilder {\n  static createConfig(captions: Array<Object>): Array<PKExternalCaptionObject> {\n    return captions.map(caption => {\n      let url = caption.url;\n      let type = CaptionsFormatsMap[caption.format];\n      if ([KalturaCaptionType.DFXP, KalturaCaptionType.CAP].includes(caption.format)) {\n        url = caption.webVttUrl;\n        type = CaptionsFormatsMap[KalturaCaptionType.WEBVTT];\n      }\n      return {\n        default: !!caption.isDefault,\n        type: type,\n        language: caption.languageCode,\n        label: caption.label,\n        url: url\n      };\n    });\n  }\n}\n\nexport {ExternalCaptionsBuilder};\n","//@flow\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport KalturaMetadataListResponse from './response-types/kaltura-metadata-list-response';\nimport KalturaMediaEntry from './response-types/kaltura-media-entry';\nimport KalturaPlaybackSource from './response-types/kaltura-playback-source';\nimport KalturaBumper from './response-types/kaltura-bumper';\nimport KalturaDrmPlaybackPluginData from '../common/response-types/kaltura-drm-playback-plugin-data';\nimport PlaySourceUrlBuilder from './play-source-url-builder';\nimport XmlParser from '../../util/xml-parser';\nimport getLogger from '../../util/logger';\nimport OVPConfiguration from './config';\nimport MediaEntry from '../../entities/media-entry';\nimport Drm from '../../entities/drm';\nimport MediaSource from '../../entities/media-source';\nimport MediaSources from '../../entities/media-sources';\nimport {SupportedStreamFormat, isProgressiveSource} from '../../entities/media-format';\nimport Playlist from '../../entities/playlist';\nimport EntryList from '../../entities/entry-list';\nimport Bumper from '../../entities/bumper';\nimport KalturaRuleAction from './response-types/kaltura-rule-action';\nimport KalturaAccessControlMessage from '../common/response-types/kaltura-access-control-message';\nimport type {OVPMediaEntryLoaderResponse} from './loaders/media-entry-loader';\nimport {ExternalCaptionsBuilder} from './external-captions-builder';\n\nexport default class OVPProviderParser {\n  static _logger = getLogger('OVPProviderParser');\n\n  /**\n   * Returns parsed media entry by given OVP response objects\n   * @function getMediaEntry\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {any} mediaEntryResponse - The media entry response\n   * @returns {MediaEntry} - The media entry\n   * @static\n   * @public\n   */\n  static getMediaEntry(ks: string, partnerId: number, uiConfId: ?number, mediaEntryResponse: any): MediaEntry {\n    const mediaEntry = new MediaEntry();\n    const entry = mediaEntryResponse.entry;\n    const playbackContext = mediaEntryResponse.playBackContextResult;\n    const metadataList = mediaEntryResponse.metadataListResult;\n    const kalturaSources = playbackContext.sources;\n\n    mediaEntry.sources = OVPProviderParser._getParsedSources(kalturaSources, ks, partnerId, uiConfId, entry, playbackContext);\n    if (OVPConfiguration.get().useApiCaptions && playbackContext.data.playbackCaptions) {\n      mediaEntry.sources.captions = ExternalCaptionsBuilder.createConfig(playbackContext.data.playbackCaptions);\n    }\n    OVPProviderParser._fillBaseData(mediaEntry, entry, metadataList);\n    return mediaEntry;\n  }\n\n  /**\n   * Returns parsed playlist by given OVP response objects\n   * @function getPlaylist\n   * @param {any} playlistResponse - The playlist response\n   * @returns {Playlist} - The playlist\n   * @static\n   * @public\n   */\n  static getPlaylist(playlistResponse: any): Playlist {\n    const playlist = new Playlist();\n    const playlistData = playlistResponse.playlistData;\n    const playlistItems = playlistResponse.playlistItems.entries;\n    playlist.id = playlistData.id;\n    playlist.name = playlistData.name;\n    playlist.description = playlistData.description;\n    playlist.poster = playlistData.poster;\n    playlistItems.forEach((entry: KalturaMediaEntry) => {\n      const mediaEntry = new MediaEntry();\n      OVPProviderParser._fillBaseData(mediaEntry, entry);\n      playlist.items.push(mediaEntry);\n    });\n    return playlist;\n  }\n\n  /**\n   * Returns parsed entry list by given OVP response objects\n   * @function getEntryList\n   * @param {any} playlistResponse - response\n   * @returns {Playlist} - The entry list\n   * @static\n   * @public\n   */\n  static getEntryList(playlistResponse: any): EntryList {\n    const entryList = new EntryList();\n    const playlistItems = playlistResponse.playlistItems.entries;\n    playlistItems.forEach(entry => {\n      const mediaEntry = new MediaEntry();\n      OVPProviderParser._fillBaseData(mediaEntry, entry);\n      entryList.items.push(mediaEntry);\n    });\n    return entryList;\n  }\n\n  /**\n   * Returns parsed bumper by given OTT response objects.\n   * @function getBumper\n   * @param {any} assetResponse - The asset response.\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @returns {?Bumper} - The bumper\n   * @static\n   * @public\n   */\n  static getBumper(assetResponse: any, ks: string, partnerId: number): ?Bumper {\n    const playbackContext = assetResponse.playBackContextResult;\n    const bumperData: KalturaBumper = playbackContext.bumperData[0];\n    if (bumperData) {\n      const bumperSources = bumperData && bumperData.sources;\n      const progressiveBumper = bumperSources.find(bumper => isProgressiveSource(bumper.format));\n      if (progressiveBumper) {\n        const parsedSources = OVPProviderParser._parseProgressiveSources(progressiveBumper, playbackContext, ks, partnerId, 0, bumperData.entryId);\n        if (parsedSources[0]) {\n          return new Bumper({url: parsedSources[0].url, clickThroughUrl: bumperData.clickThroughUrl});\n        }\n      }\n    }\n  }\n\n  static _fillBaseData(mediaEntry: MediaEntry, entry: KalturaMediaEntry, metadataList: ?KalturaMetadataListResponse) {\n    mediaEntry.poster = entry.poster;\n    mediaEntry.id = entry.id;\n    mediaEntry.duration = entry.duration;\n    mediaEntry.metadata = OVPProviderParser._parseMetadata(metadataList);\n    mediaEntry.metadata.description = entry.description || '';\n    mediaEntry.metadata.name = entry.name || '';\n    mediaEntry.metadata.tags = entry.tags || '';\n    mediaEntry.status = entry.status;\n\n    mediaEntry.type = OVPProviderParser._getEntryType(entry.entryType, entry.type);\n    if (mediaEntry.type === MediaEntry.Type.LIVE) {\n      mediaEntry.dvrStatus = entry.dvrStatus;\n    }\n\n    return mediaEntry;\n  }\n\n  static _getEntryType(entryTypeEnum: number, typeEnum: number | string): string {\n    let type = MediaEntry.Type.UNKNOWN;\n    switch (entryTypeEnum) {\n      case KalturaMediaEntry.MediaType.IMAGE.value:\n        type = MediaEntry.Type.IMAGE;\n        break;\n      case KalturaMediaEntry.MediaType.AUDIO.value:\n        type = MediaEntry.Type.AUDIO;\n        break;\n      default:\n        switch (typeEnum) {\n          case KalturaMediaEntry.EntryType.MEDIA_CLIP.value:\n            type = MediaEntry.Type.VOD;\n            break;\n          case KalturaMediaEntry.EntryType.LIVE_STREAM.value:\n          case KalturaMediaEntry.EntryType.LIVE_CHANNEL.value:\n            type = MediaEntry.Type.LIVE;\n            break;\n          default:\n            type = MediaEntry.Type.UNKNOWN;\n        }\n    }\n    return type;\n  }\n\n  /**\n   * Returns the parsed sources\n   * @function _getParsedSources\n   * @param {Array<KalturaPlaybackSource>} kalturaSources - The kaltura sources\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {Object} entry - The entry\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @return {MediaSources} - A media sources\n   * @static\n   * @private\n   */\n  static _getParsedSources(\n    kalturaSources: Array<KalturaPlaybackSource>,\n    ks: string,\n    partnerId: number,\n    uiConfId: ?number,\n    entry: Object,\n    playbackContext: KalturaPlaybackContext\n  ): MediaSources {\n    const sources = new MediaSources();\n    const addAdaptiveSource = (source: KalturaPlaybackSource) => {\n      const parsedSource = OVPProviderParser._parseAdaptiveSource(source, playbackContext, ks, partnerId, uiConfId, entry.id);\n      if (parsedSource) {\n        const sourceFormat = SupportedStreamFormat.get(source.format);\n        sources.map(parsedSource, sourceFormat);\n      }\n    };\n    const parseAdaptiveSources = () => {\n      kalturaSources.filter(source => !isProgressiveSource(source.format)).forEach(addAdaptiveSource);\n    };\n    const parseProgressiveSources = () => {\n      const progressiveSource = kalturaSources.find(source => {\n        //match progressive source with supported protocol(http/s)\n        return isProgressiveSource(source.format) && source.getProtocol(OVPProviderParser._getBaseProtocol()) !== '';\n      });\n      sources.progressive = OVPProviderParser._parseProgressiveSources(progressiveSource, playbackContext, ks, partnerId, uiConfId, entry.id);\n    };\n\n    const parseExternalMedia = () => {\n      const mediaSource = new MediaSource();\n      mediaSource.mimetype = 'video/youtube';\n      mediaSource.url = entry.referenceId;\n      mediaSource.id = entry.id + '_youtube';\n      sources.progressive.push(mediaSource);\n    };\n\n    if (entry.type === KalturaMediaEntry.EntryType.EXTERNAL_MEDIA.value) {\n      parseExternalMedia();\n    } else if (kalturaSources && kalturaSources.length > 0) {\n      parseAdaptiveSources();\n      parseProgressiveSources();\n    }\n    return sources;\n  }\n\n  /**\n   * Returns a parsed adaptive source\n   * @function _parseAdaptiveSource\n   * @param {KalturaPlaybackSource} kalturaSource - A kaltura source\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {string} entryId - The entry id\n   * @returns {?MediaSource} - The parsed adaptive kalturaSource\n   * @static\n   * @private\n   */\n  static _parseAdaptiveSource(\n    kalturaSource: ?KalturaPlaybackSource,\n    playbackContext: KalturaPlaybackContext,\n    ks: string,\n    partnerId: number,\n    uiConfId: ?number,\n    entryId: string\n  ): ?MediaSource {\n    const mediaSource: MediaSource = new MediaSource();\n    if (kalturaSource) {\n      let playUrl: string = '';\n      const mediaFormat = SupportedStreamFormat.get(kalturaSource.format);\n      const protocol = kalturaSource.getProtocol(OVPProviderParser._getBaseProtocol());\n      const deliveryProfileId = kalturaSource.deliveryProfileId;\n      const format = kalturaSource.format;\n      let extension: string = '';\n      if (mediaFormat) {\n        extension = mediaFormat.pathExt;\n        mediaSource.mimetype = mediaFormat.mimeType;\n      }\n      // in case playbackSource doesn't have flavors we don't need to build the url and we'll use the provided one.\n      if (kalturaSource.hasFlavorIds()) {\n        if (!extension && playbackContext.flavorAssets && playbackContext.flavorAssets.length > 0) {\n          extension = playbackContext.flavorAssets[0].fileExt;\n        }\n        playUrl = PlaySourceUrlBuilder.build({\n          entryId,\n          flavorIds: kalturaSource.flavorIds,\n          format,\n          ks,\n          partnerId,\n          uiConfId,\n          extension,\n          protocol\n        });\n      } else {\n        playUrl = kalturaSource.url;\n      }\n      if (!playUrl) {\n        const message = `failed to create play url from source, discarding source: (${entryId}_${deliveryProfileId}), ${format}`;\n        OVPProviderParser._logger.warn(message);\n        return null;\n      }\n      mediaSource.url = OVPProviderParser._applyRegexAction(playbackContext, playUrl);\n      mediaSource.id = entryId + '_' + deliveryProfileId + ',' + format;\n      if (kalturaSource.hasDrmData()) {\n        const drmParams: Array<Drm> = [];\n        kalturaSource.drm.forEach(drm => {\n          drmParams.push(new Drm(drm.licenseURL, KalturaDrmPlaybackPluginData.Scheme[drm.scheme], drm.certificate));\n        });\n        mediaSource.drmData = drmParams;\n      }\n    }\n    return mediaSource;\n  }\n\n  /**\n   * Returns parsed progressive sources\n   * @function _parseProgressiveSources\n   * @param {KalturaPlaybackSource} kalturaSource - A kaltura source\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {string} entryId - The entry id\n   * @returns {Array<MediaSource>} - The parsed progressive kalturaSources\n   * @static\n   * @private\n   */\n  static _parseProgressiveSources(\n    kalturaSource: ?KalturaPlaybackSource,\n    playbackContext: KalturaPlaybackContext,\n    ks: string,\n    partnerId: number,\n    uiConfId: ?number,\n    entryId: string\n  ): Array<MediaSource> {\n    const videoSources: Array<MediaSource> = [];\n    const audioSources: Array<MediaSource> = [];\n    if (kalturaSource) {\n      const protocol = kalturaSource.getProtocol(OVPProviderParser._getBaseProtocol());\n      const format = kalturaSource.format;\n      const deliveryProfileId = kalturaSource.deliveryProfileId;\n      const sourceId = deliveryProfileId + ',' + format;\n      playbackContext.flavorAssets.map(flavor => {\n        const mediaSource: MediaSource = new MediaSource();\n        mediaSource.id = flavor.id + sourceId;\n        mediaSource.mimetype = flavor.fileExt === 'mp3' ? 'audio/mp3' : 'video/mp4';\n        mediaSource.height = flavor.height;\n        mediaSource.width = flavor.width;\n        mediaSource.bandwidth = flavor.bitrate * 1024;\n        mediaSource.label = flavor.label || flavor.language;\n        const playUrl = PlaySourceUrlBuilder.build({\n          entryId,\n          flavorIds: flavor.id,\n          format,\n          ks,\n          partnerId: partnerId,\n          uiConfId: uiConfId,\n          extension: flavor.fileExt,\n          protocol\n        });\n        if (playUrl === '') {\n          OVPProviderParser._logger.warn(`failed to create play url from source, discarding source: (${entryId}_${deliveryProfileId}), ${format}.`);\n          return null;\n        } else {\n          mediaSource.url = OVPProviderParser._applyRegexAction(playbackContext, playUrl);\n          if (flavor.height && flavor.width) {\n            videoSources.push(mediaSource);\n          } else {\n            audioSources.push(mediaSource);\n          }\n        }\n      });\n    }\n    //If we have only audio flavors return them, otherwise return video flavors\n    return audioSources.length && !videoSources.length ? audioSources : videoSources;\n  }\n\n  /**\n   * Ovp metadata parser\n   * @function _parseMetaData\n   * @param {KalturaMetadataListResponse} metadataList The metadata list\n   * @returns {Object} Parsed metadata\n   * @static\n   * @private\n   */\n  static _parseMetadata(metadataList: ?KalturaMetadataListResponse): Object {\n    const metadata = {};\n    if (metadataList && metadataList.metas && metadataList.metas.length > 0) {\n      metadataList.metas.forEach(meta => {\n        if (meta.xml) {\n          let metaXml: Object;\n          const domParser: DOMParser = new DOMParser();\n          meta.xml = meta.xml.replace(/\\r?\\n|\\r/g, '');\n          meta.xml = meta.xml.replace(/>\\s*/g, '>');\n          meta.xml = meta.xml.replace(/>\\s*/g, '>');\n          metaXml = domParser.parseFromString(meta.xml, 'text/xml');\n          const metasObj: Object = XmlParser.xmlToJson(metaXml);\n          const metaKeys = Object.keys(metasObj.metadata);\n          metaKeys.forEach(key => {\n            metadata[key] = metasObj.metadata[key]['#text'];\n          });\n        }\n      });\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the base protocol\n   * @function _getBaseProtocol\n   * @returns {string} - The base protocol\n   * @static\n   * @private\n   */\n  static _getBaseProtocol(): string {\n    const config = OVPConfiguration.get();\n    const protocolRegex = /^https?:/;\n    const result = protocolRegex.exec(config.cdnUrl);\n    const protocol = result ? result[0] : document.location.protocol;\n    if (typeof protocol === 'string') {\n      return protocol.slice(0, -1); // remove ':' from the end\n    }\n    return 'https';\n  }\n\n  static hasBlockAction(response: OVPMediaEntryLoaderResponse): boolean {\n    return response.playBackContextResult.hasBlockAction();\n  }\n\n  static getBlockAction(response: OVPMediaEntryLoaderResponse): ?KalturaRuleAction {\n    return response.playBackContextResult.getBlockAction();\n  }\n\n  static getErrorMessages(response: OVPMediaEntryLoaderResponse): Array<KalturaAccessControlMessage> {\n    return response.playBackContextResult.getErrorMessages();\n  }\n\n  /**\n   * Applies the request host regex on the url\n   * @function _applyRegexAction\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @param {string} playUrl - The original url\n   * @returns {string} - The request host regex applied url\n   * @static\n   * @private\n   */\n  static _applyRegexAction(playbackContext: KalturaPlaybackContext, playUrl: string): string {\n    const regexAction = playbackContext.getRequestHostRegexAction();\n    if (regexAction) {\n      const regex = new RegExp(regexAction.pattern, 'i');\n      if (playUrl.match(regex)) {\n        return playUrl.replace(regex, regexAction.replacement + '/');\n      }\n    }\n    return playUrl;\n  }\n}\n","//@flow\nimport MultiRequestBuilder from '../../common/multi-request-builder';\nimport OVPConfiguration from '../config';\n\nconst SERVICE_NAME: string = 'multirequest';\n\nexport default class OVPService {\n  /**\n   * Gets a new instance of MultiRequestBuilder with ovp params\n   * @function getMultiRequest\n   * @param {string} playerVersion The player version\n   * @param {string} ks The ks\n   * @param {string} partnerId The partner ID\n   * @returns {MultiRequestBuilder} The multi request builder\n   * @static\n   */\n  static getMultiRequest(playerVersion: string, ks: string, partnerId?: number): MultiRequestBuilder {\n    const config = OVPConfiguration.get();\n    const ovpParams = config.serviceParams;\n    Object.assign(ovpParams, {ks: ks, clientTag: 'html5:v' + playerVersion});\n    if (partnerId) {\n      Object.assign(ovpParams, {partnerId: partnerId});\n    }\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const multiReq = new MultiRequestBuilder(headers);\n    multiReq.method = 'POST';\n    multiReq.service = SERVICE_NAME;\n    multiReq.url = multiReq.getUrl(config.serviceUrl);\n    multiReq.params = ovpParams;\n    return multiReq;\n  }\n}\n","//@flow\nconst FIELDS =\n  'id,referenceId,name,description,thumbnailUrl,dataUrl,duration,msDuration,flavorParamsIds,mediaType,type,tags,dvrStatus,externalSourceType,status';\n\nexport default class BaseEntryResponseProfile {\n  static Type: {[type: string]: number} = {\n    INCLUDE_FIELDS: 1,\n    EXCLUDE_FIELDS: 2\n  };\n  /**\n   * @member - the response profile type\n   * @type {number}\n   */\n  type: number;\n  /**\n   * @member - Comma separated fields list to be included or excluded\n   * @type {string}\n   */\n  fields: string;\n\n  /**\n   * @constructor\n   * @param {Object} responseProfile -\n   */\n  constructor(responseProfile: Object = {}) {\n    this.type = responseProfile.type || BaseEntryResponseProfile.Type.INCLUDE_FIELDS;\n    this.fields = responseProfile.fields || FIELDS;\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\nimport BaseEntryResponseProfile from '../request-params/base-entry-response-profile';\n\nconst SERVICE_NAME: string = 'baseEntry';\n\nexport default class OVPBaseEntryService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for baseentry.getPlaybackContext\n   * @function getPlaybackContext\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static getPlaybackContext(serviceUrl: string, ks: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    const serviceEntryId = ks === '{1:result:ks}' ? '{2:result:objects:0:id}' : '{1:result:objects:0:id}';\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'getPlaybackContext';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'baseEntry-getPlaybackContext';\n    const contextDataParams = {objectType: 'KalturaContextDataParams', flavorTags: 'all'};\n    request.params = {entryId: serviceEntryId, ks: ks, contextDataParams: contextDataParams};\n    return request;\n  }\n\n  /**\n   * Creates an instance of RequestBuilder for baseentry.list\n   * @function list\n   * @param {string} serviceUrl The base URL\n   * @param {string} ks The ks\n   * @param {string} entryId The entry ID\n   * @param {boolean} redirectFromEntryId whether the live entry should continue and play the VOD one after the live stream ends.\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static list(serviceUrl: string, ks: string, entryId: string, redirectFromEntryId: boolean): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'list';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'list';\n    request.params = OVPBaseEntryService.getEntryListReqParams(entryId, ks, redirectFromEntryId);\n    return request;\n  }\n\n  /**\n   * Gets  baseentry.list service params\n   * @function getEntryListReqParams\n   * @param {string} entryId The entry ID\n   * @param {string} ks The ks\n   * @param {boolean} redirectFromEntryId whether the live entry should continue and play the VOD one after the live stream ends.\n   * @returns {{ks: string, filter: {redirectFromEntryId: string}, responseProfile: {fields: string, type: number}}} The service params object\n   * @static\n   */\n  static getEntryListReqParams(entryId: string, ks: string, redirectFromEntryId: boolean): any {\n    const filterParams = redirectFromEntryId ? {redirectFromEntryId: entryId} : {idEqual: entryId};\n    return {ks: ks, filter: filterParams, responseProfile: new BaseEntryResponseProfile()};\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'metadata_metadata';\n\nexport default class OVPMetadataService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for metadata_metadata.list\n   * @function getPlaybackContext\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @param {string} entryId The entry ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static list(serviceUrl: string, ks: string, entryId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'list';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'metadata_metadata-list';\n    const filter = {objectType: 'KalturaMetadataFilter', objectIdEqual: entryId, metadataObjectTypeEqual: '1'};\n    request.params = {filter: filter, ks: ks};\n    return request;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaMediaEntry from './kaltura-media-entry';\n\nexport default class KalturaBaseEntryListResponse extends ServiceResult {\n  /**\n   * @member - The total count\n   * @type {number}\n   */\n  totalCount: number;\n  /**\n   * @member - The entries\n   * @type {Array<KalturaMediaEntry>}\n   */\n  entries: Array<KalturaMediaEntry>;\n\n  /**\n   * @constructor\n   * @param {Object} responseObj The json response\n   */\n  constructor(responseObj: Object) {\n    super(responseObj);\n    if (!this.hasError) {\n      this.totalCount = responseObj.totalCount;\n      if (this.totalCount > 0) {\n        this.entries = [];\n        responseObj.objects.map(entry => this.entries.push(new KalturaMediaEntry(entry)));\n      }\n    }\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPBaseEntryService from '../services/base-entry-service';\nimport OVPMetadataService from '../services/meta-data-service';\nimport OVPConfiguration from '../config';\nimport KalturaPlaybackContext from '../response-types/kaltura-playback-context';\nimport KalturaMetadataListResponse from '../response-types/kaltura-metadata-list-response';\nimport KalturaBaseEntryListResponse from '../response-types/kaltura-base-entry-list-response';\nimport KalturaMediaEntry from '../response-types/kaltura-media-entry';\n\ntype OVPMediaEntryLoaderResponse = {\n  entry: KalturaMediaEntry,\n  playBackContextResult: KalturaPlaybackContext,\n  metadataListResult: KalturaMetadataListResponse\n};\nexport type {OVPMediaEntryLoaderResponse};\n\nexport default class OVPMediaEntryLoader implements ILoader {\n  _entryId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'media';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   * @boolean {boolean} useExternalCaptions - if we should add captions request to the multirequests.\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entryId = params.entryId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    let mediaEntryResponse: KalturaBaseEntryListResponse = new KalturaBaseEntryListResponse(response[0].data);\n    this._response.entry = mediaEntryResponse.entries[0];\n    this._response.playBackContextResult = new KalturaPlaybackContext(response[1].data);\n    this._response.metadataListResult = new KalturaMetadataListResponse(response[2].data);\n  }\n\n  get response(): OVPMediaEntryLoaderResponse {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPBaseEntryService.list(config.serviceUrl, params.ks, params.entryId, params.redirectFromEntryId));\n    requests.push(OVPBaseEntryService.getPlaybackContext(config.serviceUrl, params.ks));\n    requests.push(OVPMetadataService.list(config.serviceUrl, params.ks, params.entryId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._entryId;\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'session';\n\nexport default class OVPSessionService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for session.startWidgetSession\n   * @function anonymousSession\n   * @param {string} serviceUrl The service base URL\n   * @param {string} widgetId The widget ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static anonymousSession(serviceUrl: string, widgetId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'startWidgetSession';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'session-startWidget';\n    request.params = {widgetId};\n    return request;\n  }\n}\n","//@flow\nimport OVPSessionService from '../services/session-service';\nimport OVPConfiguration from '../config';\nimport RequestBuilder from '../../../util/request-builder';\n\nexport default class OVPSessionLoader implements ILoader {\n  _widgetId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'session';\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.ks = response[0].data.ks;\n  }\n\n  get response(): any {\n    return this._response.ks;\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._widgetId = params.widgetId;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPSessionService.anonymousSession(config.serviceUrl, params.widgetId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._widgetId;\n  }\n}\n","// @flow\nimport DataLoaderManager from '../../common/data-loader-manager';\nimport OVPService from '../services/ovp-service';\n\n/**\n * OTTDataLoaderManager is a class that handles the OVP data loading\n * @param {string} playerVersion - player version\n * @param {string} partnerId - partner id\n * @param {string} ks - ks\n * @param {ProviderNetworkRetryParameters} [networkRetryConfig] - network retry configuration\n */\nexport default class OVPDataLoaderManager extends DataLoaderManager {\n  constructor(playerVersion: string, partnerId: number, ks: string = '', networkRetryConfig: ProviderNetworkRetryParameters) {\n    super(networkRetryConfig);\n    this._multiRequest = OVPService.getMultiRequest(playerVersion, ks, partnerId);\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\nimport BaseEntryResponseProfile from '../request-params/base-entry-response-profile';\n\nconst SERVICE_NAME: string = 'playlist';\n\nexport default class OVPPlaylistService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for playlist.getPlaybackContext\n   * @function getPlaybackContext\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @param {string} playlistId The playlist ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static execute(serviceUrl: string, ks: string, playlistId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'execute';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = `${SERVICE_NAME}-execute`;\n    request.params = {\n      ks: ks,\n      id: playlistId,\n      responseProfile: new BaseEntryResponseProfile()\n    };\n    return request;\n  }\n\n  /**\n   * Creates an instance of RequestBuilder for playlist.list\n   * @function list\n   * @param {string} serviceUrl The base URL\n   * @param {string} ks The ks\n   * @param {string} playlistId The playlist ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static get(serviceUrl: string, ks: string, playlistId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'get';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = `${SERVICE_NAME}-get`;\n    request.params = {\n      ks: ks,\n      id: playlistId,\n      responseProfile: {\n        fields: 'id,name,description,thumbnailUrl',\n        type: 1\n      }\n    };\n    return request;\n  }\n}\n","//@flow\n\nexport default class KalturaPlaylist {\n  /**\n   * @member - playlist id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - playlist name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - playlist description\n   * @type {string}\n   */\n  description: string;\n  /**\n   * @member - playlist poster image\n   * @type {string}\n   */\n  poster: string;\n\n  /**\n   * @constructor\n   * @param {Object} playlist - The json response\n   */\n  constructor(playlist: Object) {\n    this.id = playlist.id;\n    this.name = playlist.name;\n    this.description = playlist.description;\n    this.poster = playlist.thumbnailUrl;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaMediaEntry from './kaltura-media-entry';\n\nexport default class KalturaMediaEntries extends ServiceResult {\n  /**\n   * @member - The entries\n   * @type {Array<KalturaMediaEntry>}\n   */\n  entries: Array<KalturaMediaEntry>;\n\n  /**\n   * @constructor\n   * @param {Object} responseObj The json response\n   */\n  constructor(responseObj: Object) {\n    super(responseObj);\n    if (!this.hasError) {\n      this.entries = [];\n      responseObj.map(entry => this.entries.push(new KalturaMediaEntry(entry)));\n    }\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPPlaylistService from '../services/playlist-service';\nimport OVPConfiguration from '../config';\nimport KalturaPlaylist from '../response-types/kaltura-playlist';\nimport KalturaMediaEntries from '../response-types/kaltura-media-entries';\n\nexport default class OVPPlaylistLoader implements ILoader {\n  _playlistId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'playlist';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._playlistId = params.playlistId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.playlistData = new KalturaPlaylist(response[0].data);\n    this._response.playlistItems = new KalturaMediaEntries(response[1].data);\n  }\n\n  get response(): any {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPPlaylistService.get(config.serviceUrl, params.ks, params.playlistId));\n    requests.push(OVPPlaylistService.execute(config.serviceUrl, params.ks, params.playlistId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._playlistId;\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPConfiguration from '../config';\nimport OVPBaseEntryService from '../services/base-entry-service';\nimport KalturaBaseEntryListResponse from '../response-types/kaltura-base-entry-list-response';\n\nexport default class OVPEntryListLoader implements ILoader {\n  _entries: Array<string>;\n  _requests: Array<RequestBuilder>;\n  _response: any = {playlistItems: {entries: []}};\n\n  static get id(): string {\n    return 'entry_list';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entries = params.entries;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    let mediaEntryResponse: KalturaBaseEntryListResponse;\n    response.forEach(item => {\n      mediaEntryResponse = new KalturaBaseEntryListResponse(item.data);\n      this._response.playlistItems.entries.push(mediaEntryResponse.entries[0]);\n    });\n  }\n\n  get response(): any {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    params.entries.forEach(entry => {\n      requests.push(OVPBaseEntryService.list(config.serviceUrl, params.ks, entry.entryId || entry, params.redirectFromEntryId));\n    });\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!(this._entries && this._entries.length);\n  }\n}\n","//@flow\nimport getLogger from '../../util/logger';\nimport OVPConfiguration from './config';\nimport OVPProviderParser from './provider-parser';\nimport KalturaMediaEntry from './response-types/kaltura-media-entry';\nimport OVPMediaEntryLoader from './loaders/media-entry-loader';\nimport OVPSessionLoader from './loaders/session-loader';\nimport OVPDataLoaderManager from './loaders/data-loader-manager';\nimport OVPPlaylistLoader from './loaders/playlist-loader';\nimport BaseProvider from '../common/base-provider';\nimport MediaEntry from '../../entities/media-entry';\nimport OVPEntryListLoader from './loaders/entry-list-loader';\nimport Error from '../../util/error/error';\n\nexport default class OVPProvider extends BaseProvider<OVPProviderMediaInfoObject> {\n  _filterOptionsConfig: ProviderFilterOptionsObject = {redirectFromEntryId: true};\n  /**\n   * @constructor\n   * @param {ProviderOptionsObject} options - provider options\n   * @param {string} playerVersion - player version\n   */\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    super(options, playerVersion);\n    this._logger = getLogger('OVPProvider');\n    OVPConfiguration.set(options.env);\n    this._setFilterOptionsConfig(options.filterOptions);\n    this._networkRetryConfig = Object.assign(this._networkRetryConfig, options.networkRetryParameters);\n  }\n\n  /**\n   * Gets the backend media config.\n   * @param {OVPProviderMediaInfoObject} mediaInfo - ovp media info\n   * @returns {Promise<ProviderMediaConfigObject>} - The provider media config\n   */\n  getMediaConfig(mediaInfo: OVPProviderMediaInfoObject): Promise<ProviderMediaConfigObject> {\n    if (mediaInfo.ks) {\n      this.ks = mediaInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entryId = mediaInfo.entryId;\n      if (entryId) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        const redirectFromEntryId = this._getEntryRedirectFilter(mediaInfo);\n        this._dataLoader.add(OVPMediaEntryLoader, {entryId, ks, redirectFromEntryId});\n        return this._dataLoader.fetchData().then(\n          response => {\n            try {\n              resolve(this._parseDataFromResponse(response));\n            } catch (err) {\n              reject(err);\n            }\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject(new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.MISSING_MANDATORY_PARAMS, {message: 'missing entry id'}));\n      }\n    });\n  }\n\n  _getEntryRedirectFilter(mediaInfo: Object): boolean {\n    return typeof mediaInfo.redirectFromEntryId === 'boolean'\n      ? mediaInfo.redirectFromEntryId\n      : typeof this._filterOptionsConfig.redirectFromEntryId === 'boolean'\n      ? this._filterOptionsConfig.redirectFromEntryId\n      : true;\n  }\n\n  _setFilterOptionsConfig(options?: ProviderFilterOptionsObject): void {\n    if (options && typeof options.redirectFromEntryId == 'boolean') {\n      this._filterOptionsConfig.redirectFromEntryId = options.redirectFromEntryId;\n    }\n  }\n\n  _parseDataFromResponse(data: Map<string, Function>): ProviderMediaConfigObject {\n    this._logger.debug('Data parsing started');\n    const mediaConfig: ProviderMediaConfigObject = {\n      session: {\n        isAnonymous: this._isAnonymous,\n        partnerId: this.partnerId\n      },\n      sources: this._getDefaultSourcesObject(),\n      plugins: {}\n    };\n\n    if (this.uiConfId) {\n      mediaConfig.session.uiConfId = this.uiConfId;\n    }\n    if (data) {\n      if (data.has(OVPSessionLoader.id)) {\n        const sessionLoader = data.get(OVPSessionLoader.id);\n        if (sessionLoader && sessionLoader.response) {\n          mediaConfig.session.ks = sessionLoader.response;\n          if (this.widgetId !== this.defaultWidgetId) {\n            this.ks = mediaConfig.session.ks;\n          }\n        }\n      } else {\n        mediaConfig.session.ks = this.ks;\n      }\n      if (data.has(OVPMediaEntryLoader.id)) {\n        const mediaLoader = data.get(OVPMediaEntryLoader.id);\n        if (mediaLoader && mediaLoader.response) {\n          const response = (mediaLoader: OVPMediaEntryLoader).response;\n          if (OVPProviderParser.hasBlockAction(response)) {\n            throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.BLOCK_ACTION, {\n              action: OVPProviderParser.getBlockAction(response),\n              messages: OVPProviderParser.getErrorMessages(response)\n            });\n          }\n          const mediaEntry = OVPProviderParser.getMediaEntry(this.isAnonymous ? '' : this.ks, this.partnerId, this.uiConfId, response);\n          Object.assign(mediaConfig.sources, this._getSourcesObject(mediaEntry));\n          this._verifyMediaStatus(mediaEntry);\n          this._verifyHasSources(mediaConfig.sources);\n          const bumper = OVPProviderParser.getBumper(response, this.isAnonymous ? '' : this.ks, this.partnerId);\n          if (bumper) {\n            Object.assign(mediaConfig.plugins, {bumper});\n          }\n        }\n      }\n    }\n    this._logger.debug('Data parsing finished', mediaConfig);\n    return mediaConfig;\n  }\n\n  /**\n   * Checks media is ready for playback (not being imported or converted)\n   * @param {MediaEntry} mediaEntry - the media entry info\n   * @returns {void}\n   */\n  _verifyMediaStatus(mediaEntry: MediaEntry) {\n    if ([KalturaMediaEntry.EntryStatus.IMPORT, KalturaMediaEntry.EntryStatus.PRECONVERT].includes(mediaEntry.status)) {\n      throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.MEDIA_STATUS_NOT_READY, {\n        messages: `Status of entry id ${mediaEntry.id} is ${mediaEntry.status} and is still being imported or converted`,\n        data: {status}\n      });\n    }\n  }\n  /**\n   * Gets the backend playlist config.\n   * @param {ProviderPlaylistInfoObject} playlistInfo - ovp playlist info\n   * @returns {Promise<ProviderPlaylistObject>} - The provider playlist config\n   */\n  getPlaylistConfig(playlistInfo: ProviderPlaylistInfoObject): Promise<ProviderPlaylistObject> {\n    if (playlistInfo.ks) {\n      this.ks = playlistInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const playlistId = playlistInfo.playlistId;\n      if (playlistId) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        this._dataLoader.add(OVPPlaylistLoader, {playlistId, ks});\n        this._dataLoader.fetchData().then(\n          response => {\n            resolve(this._parsePlaylistDataFromResponse(response));\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject({success: false, data: 'Missing mandatory parameter'});\n      }\n    });\n  }\n\n  _parsePlaylistDataFromResponse(data: Map<string, Function>): ProviderPlaylistObject {\n    this._logger.debug('Data parsing started');\n    const playlistConfig: ProviderPlaylistObject = this._getPlaylistObject();\n    if (data && data.has(OVPPlaylistLoader.id)) {\n      const playlistLoader = data.get(OVPPlaylistLoader.id);\n      if (playlistLoader && playlistLoader.response) {\n        const playlist = OVPProviderParser.getPlaylist(playlistLoader.response);\n        playlistConfig.id = playlist.id;\n        playlistConfig.poster = playlist.poster;\n        playlistConfig.metadata.name = playlist.name;\n        playlistConfig.metadata.description = playlist.description;\n        playlist.items.forEach(i => playlistConfig.items.push({sources: this._getSourcesObject(i)}));\n      }\n    }\n    this._logger.debug('Data parsing finished', playlistConfig);\n    return playlistConfig;\n  }\n\n  /**\n   * Gets playlist config from entry list.\n   * @param {ProviderEntryListObject} entryListInfo - ovp entry list info\n   * @returns {Promise<ProviderPlaylistObject>} - The provider playlist config\n   */\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    if (entryListInfo.ks) {\n      this.ks = entryListInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entries = entryListInfo.entries;\n      if (entries && entries.length) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        const redirectFromEntryId = this._getEntryRedirectFilter(entryListInfo);\n        this._dataLoader.add(OVPEntryListLoader, {entries, ks, redirectFromEntryId});\n        this._dataLoader.fetchData().then(\n          response => {\n            resolve(this._parseEntryListDataFromResponse(response));\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject({success: false, data: 'Missing mandatory parameter'});\n      }\n    });\n  }\n\n  _parseEntryListDataFromResponse(data: Map<string, Function>): ProviderPlaylistObject {\n    this._logger.debug('Data parsing started');\n    const playlistConfig: ProviderPlaylistObject = this._getPlaylistObject();\n    if (data && data.has(OVPEntryListLoader.id)) {\n      const playlistLoader = data.get(OVPEntryListLoader.id);\n      if (playlistLoader && playlistLoader.response) {\n        const entryList = OVPProviderParser.getEntryList(playlistLoader.response);\n        entryList.items.forEach(i => playlistConfig.items.push({sources: this._getSourcesObject(i)}));\n      }\n    }\n    this._logger.debug('Data parsing finished', playlistConfig);\n    return playlistConfig;\n  }\n\n  _getPlaylistObject(): ProviderPlaylistObject {\n    return {\n      id: '',\n      metadata: {\n        name: '',\n        description: ''\n      },\n      poster: '',\n      items: []\n    };\n  }\n\n  _getDefaultSourcesObject(): ProviderMediaConfigSourcesObject {\n    return {\n      hls: [],\n      dash: [],\n      progressive: [],\n      id: '',\n      duration: 0,\n      type: MediaEntry.Type.UNKNOWN,\n      poster: '',\n      dvr: false,\n      vr: null,\n      metadata: {\n        name: '',\n        description: '',\n        tags: ''\n      }\n    };\n  }\n\n  _getSourcesObject(mediaEntry: MediaEntry) {\n    const sourcesObject: ProviderMediaConfigSourcesObject = this._getDefaultSourcesObject();\n    const mediaSources = mediaEntry.sources.toJSON();\n    sourcesObject.hls = mediaSources.hls;\n    sourcesObject.dash = mediaSources.dash;\n    sourcesObject.progressive = mediaSources.progressive;\n    sourcesObject.id = mediaEntry.id;\n    sourcesObject.duration = mediaEntry.duration;\n    sourcesObject.type = mediaEntry.type;\n    sourcesObject.dvr = !!mediaEntry.dvrStatus;\n    sourcesObject.poster = mediaEntry.poster;\n    if (mediaEntry.sources.captions) {\n      sourcesObject.captions = mediaEntry.sources.captions;\n    }\n    if (mediaEntry.metadata && typeof mediaEntry.metadata.tags === 'string' && mediaEntry.metadata.tags.indexOf('360') > -1) {\n      sourcesObject.vr = {};\n    }\n    Object.assign(sourcesObject.metadata, mediaEntry.metadata);\n    return sourcesObject;\n  }\n}\n","// @flow\nimport OVPProvider from './provider';\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nconst NAME = __NAME__ + '-ovp';\nconst VERSION = __VERSION__;\n\nexport {OVPProvider as Provider, NAME, VERSION};\n"],"sourceRoot":""}