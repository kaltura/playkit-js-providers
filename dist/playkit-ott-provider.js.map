{"version":3,"sources":["./providers/webpack/universalModuleDefinition","./providers/webpack/bootstrap","./providers/./entities/bumper.js","./providers/./entities/drm.js","./providers/./entities/entry-list.js","./providers/./entities/media-entry.js","./providers/./entities/media-format.js","./providers/./entities/media-source.js","./providers/./entities/media-sources.js","./providers/./k-provider/common/base-provider.js","./providers/./k-provider/common/base-service-result.js","./providers/./k-provider/common/data-loader-manager.js","./providers/./k-provider/common/multi-request-builder.js","./providers/./k-provider/common/response-types/kaltura-access-control-message.js","./providers/./k-provider/common/response-types/kaltura-drm-playback-plugin-data.js","./providers/./k-provider/ott/config.js","./providers/./k-provider/ott/index.js","./providers/./k-provider/ott/loaders/asset-list-loader.js","./providers/./k-provider/ott/loaders/asset-loader.js","./providers/./k-provider/ott/loaders/data-loader-manager.js","./providers/./k-provider/ott/loaders/session-loader.js","./providers/./k-provider/ott/provider-parser.js","./providers/./k-provider/ott/provider.js","./providers/./k-provider/ott/response-types/kaltura-asset.js","./providers/./k-provider/ott/response-types/kaltura-bumper-playback-plugin-data.js","./providers/./k-provider/ott/response-types/kaltura-playback-context.js","./providers/./k-provider/ott/response-types/kaltura-playback-source.js","./providers/./k-provider/ott/response-types/kaltura-rule-action.js","./providers/./k-provider/ott/services/asset-service.js","./providers/./k-provider/ott/services/ott-service.js","./providers/./k-provider/ott/services/user-service.js","./providers/./util/clone.js","./providers/./util/error/category.js","./providers/./util/error/code.js","./providers/./util/error/error.js","./providers/./util/error/severity.js","./providers/./util/logger.js","./providers/./util/request-builder.js"],"names":["Bumper","data","url","clickThroughUrl","Drm","licenseUrl","scheme","certificate","toJSON","response","EntryList","items","MediaEntry","metadata","Map","sources","MediaSources","type","Type","UNKNOWN","id","name","duration","dvrStatus","status","poster","assetReferenceType","VOD","LIVE","IMAGE","AUDIO","ON","OFF","MediaFormat","DASH","mimeType","pathExt","HLS","WVM","MP4","MP3","SupportedStreamFormat","isProgressiveSource","formatName","sourceFormat","get","MediaSource","mimetype","bandwidth","width","height","label","drmData","length","forEach","d","Array","isArray","push","progressive","dash","hls","map","source","mediaFormat","p","h","BaseProvider","_partnerId","_widgetId","defaultWidgetId","_uiConfId","_ks","value","_playerVersion","_isAnonymous","options","playerVersion","async","timeout","maxAttempts","setLogger","logger","partnerId","widgetId","uiConfId","ks","getMediaConfig","mediaInfo","Promise","reject","Error","Severity","CRITICAL","Category","PROVIDER","Code","METHOD_NOT_IMPLEMENTED","message","getPlaylistConfig","playlistInfo","getEntryListConfig","entryListInfo","_verifyHasSources","concat","SERVICE","MISSING_PLAY_SOURCE","action","messages","getLogLevel","setLogLevel","level","LogLevel","ServiceResult","objectType","hasError","error","ServiceError","code","DataLoaderManager","networkRetryConfig","_networkRetryConfig","add","loader","params","execution_loader","isValid","_loaders","set","startIndex","_multiRequest","requests","retryConfig","request","executionLoaderResponseMap","from","val","index","_loadersResponseMap","fetchData","resolve","execute","then","_multiResponse","preparedData","prepareData","success","NETWORK","API_RESPONSE_MISMATCH","headers","err","loaderDataIndexes","results","slice","MultiRequestBuilder","requestParams","serviceDef","service","Object","assign","JSON","stringify","_logger","FAILED_PARSING_REQUEST","doHttpRequest","multiRequestResult","MultiRequestResult","responseHeaders","MULTIREQUEST_API_ERROR","RequestBuilder","getLogger","result","responseArr","serviceResult","KalturaAccessControlMessage","KalturaDrmPlaybackPluginData","drm","licenseURL","WIDEVINE_CENC","PLAYREADY_CENC","FAIRPLAY","defaultConfig","serviceParams","apiVersion","OTTConfiguration","clientConfig","clone","NAME","__NAME__","VERSION","__VERSION__","ContextType","KalturaPlaybackContext","MediaType","KalturaAsset","OTTAssetListLoader","playlistItems","entries","buildRequests","_entries","config","entry","AssetReferenceType","MEDIA","OTTAssetService","serviceUrl","entryId","_requests","item","_response","mediaDataResult","OTTAssetLoader","_entryId","getPlaybackContext","playbackContext","playBackContextResult","OTTDataLoaderManager","OTTService","getMultiRequest","OTTSessionLoader","UserService","anonymousLogin","udid","LIVE_ASST_OBJECT_TYPE","MediaTypeCombinations","TRAILER","PLAYBACK","mediaAssetData","enableTrickPlay","DvrStatus","parseInt","externalIds","EPG","CATCHUP","START_OVER","RECORDING","OTTProviderParser","getMediaEntry","assetResponse","requestData","mediaEntry","_fillBaseData","mediaAsset","kalturaSources","filteredKalturaSources","_filterSourcesByFormats","formats","_getParsedSources","typeData","_getMediaType","mediaType","contextType","Math","max","apply","getEntryList","playlistResponse","requestEntries","entryList","find","requestEntry","getBumper","progressiveBumper","plugins","bumper","streamertype","KalturaBumpersPlaybackPluginData","StreamerType","PROGRESSIVE","metaData","reconstructMetadata","description","epgId","recordingId","_getPoster","pictures","metas","addToMetaObject","tags","list","categoryObj","key","picObj","regex","test","pic","filter","includes","addAdaptiveSource","parsedSource","_parseAdaptiveSource","format","parseAdaptiveSources","parseProgressiveSources","kalturaSource","mediaSource","playUrl","fileId","hasDrmData","drmParams","Scheme","hasBlockAction","getBlockAction","getErrorMessages","OTTProvider","env","networkRetryParameters","_dataLoader","mediaProtocol","protocol","assetFileIds","fileIds","context","streamerType","urlType","adapterData","_parseDataFromResponse","MISSING_MANDATORY_PARAMS","debug","mediaConfig","session","isAnonymous","_getDefaultSourcesObject","has","sessionLoader","assetLoader","keys","BLOCK_ACTION","_getSourcesObject","_parseEntryListDataFromResponse","playlistConfig","playlistLoader","i","dvr","vr","sourcesObject","mediaSources","indexOf","_formatTagsMetas","images","objectToParse","parsed","objects","object","EPG_INTERNAL","EPG_EXTERNAL","NPVR","actions","KalturaRuleAction","KalturaPlaybackSource","plugin","undefined","BLOCK","adsPolicy","adsParam","protocols","getProtocol","returnValue","protocolsArr","split","START_DATE_OFFSET","END_DATE_OFFSET","USER_BLOCK","ALLOW_PLAYBACK","BLOCK_PLAYBACK","APPLY_DISCOUNT_MODULE","SERVICE_NAME","assetId","playbackContextOptions","method","getUrl","contextDataParams","assetType","ottParams","multiReq","OTTUserService","node","e","UNSUPPORTED_SCHEME","BAD_HTTP_STATUS","HTTP_ERROR","TIMEOUT","MALFORMED_DATA_URI","BAD_SERVER_RESPONSE","ERROR","MEDIA_STATUS_NOT_READY","CLASS_NAME","severity","category","RECOVERABLE","JsLogger","DEBUG","INFO","TIME","TRACE","WARN","createDefaultHandler","enabledFor","getLevel","info","log","setHandler","setLevel","time","timeEnd","trace","useDefaults","warn","KALTURA_HEADER_PREFIX","promise","_requestPromise","_createXHR","XMLHttpRequest","onreadystatechange","readyState","parse","responseText","_getResponseHeaders","_createError","text","open","requestTime","performance","now","ontimeout","_handleError","statusText","onerror","onabort","setRequestHeader","send","getAllResponseHeaders","header","toLowerCase","_attemptCounter","attempt"],"mappings":"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","file":"playkit-ott-provider.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ott\"] = factory();\n\telse\n\t\troot[\"playkit\"] = root[\"playkit\"] || {}, root[\"playkit\"][\"providers\"] = root[\"playkit\"][\"providers\"] || {}, root[\"playkit\"][\"providers\"][\"ott\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./k-provider/ott/index.js\");\n","//@flow\n\nexport default class Bumper {\n  /**\n   * @member - bumper url\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - bumper click through url\n   * @type {string}\n   */\n  clickThroughUrl: string;\n\n  /**\n   * @constructor\n   * @param {Object} data - The bumper response\n   */\n  constructor(data: Object) {\n    this.url = data.url;\n    this.clickThroughUrl = data.clickThroughUrl;\n  }\n}\n","//@flow\nexport default class Drm {\n  /**\n   * @member - license url\n   * @type {string}\n   */\n  licenseUrl: string;\n  /**\n   * @member - drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - drm certificate\n   * @type {string}\n   */\n  certificate: string;\n\n  /**\n   * @constructor\n   * @param {string} licenseUrl - the license url\n   * @param {string} scheme - the drm scheme\n   * @param {?string} certificate - the drm certificate\n   */\n  constructor(licenseUrl: string, scheme: string, certificate: ?string) {\n    this.licenseUrl = licenseUrl;\n    this.scheme = scheme;\n    if (certificate) {\n      this.certificate = certificate;\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderDrmDataObject} - The json class object.\n   */\n  toJSON(): ProviderDrmDataObject {\n    const response: ProviderDrmDataObject = {\n      licenseUrl: this.licenseUrl,\n      scheme: this.scheme\n    };\n    if (this.certificate) response.certificate = this.certificate;\n    return response;\n  }\n}\n","//@flow\n\nimport MediaEntry from '../entities/media-entry';\n\nexport default class EntryList {\n  /**\n   * @member - entry list items\n   * @type {Array<MediaEntry>}\n   */\n  items: Array<MediaEntry>;\n\n  constructor() {\n    this.items = [];\n  }\n}\n","//@flow\nimport MediaSources from './media-sources';\n\nexport default class MediaEntry {\n  static Type: {[type: string]: string} = {\n    VOD: 'Vod',\n    LIVE: 'Live',\n    IMAGE: 'Image',\n    AUDIO: 'Audio',\n    UNKNOWN: 'Unknown'\n  };\n  static DvrStatus: {[type: string]: number} = {\n    ON: 1,\n    OFF: 0\n  };\n\n  /**\n   * @member - entry id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - entry name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - entry sources\n   * @type {MediaSources}\n   */\n  sources: MediaSources;\n  /**\n   * @member - entry duration\n   * @type {number}\n   */\n  duration: number;\n  /**\n   * @member - entry type\n   * @type {string}\n   */\n  type: string;\n  /**\n   * @member - entry metadata\n   * @type {Object}\n   */\n  metadata: Object;\n  /**\n   * @member - DVR status\n   * @type {number}\n   */\n  dvrStatus: number;\n  /**\n   * @member - media status\n   * @type {number}\n   */\n  status: number;\n  /**\n   * @member - media poster\n   * @type {string | Array<Object>}\n   */\n  poster: string | Array<Object>;\n\n  /**\n   * @member - assetReferenceType\n   * @type {string }\n   */\n  assetReferenceType: string;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.metadata = new Map();\n    this.sources = new MediaSources();\n    this.type = MediaEntry.Type.UNKNOWN;\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaEntryObject} - The json class object.\n   */\n  toJSON(): ProviderMediaEntryObject {\n    return {\n      id: this.id,\n      name: this.name,\n      sources: this.sources.toJSON(),\n      duration: this.duration,\n      dvrStatus: this.dvrStatus,\n      status: this.status,\n      metadata: this.metadata,\n      type: this.type,\n      poster: this.poster,\n      assetReferenceType: this.assetReferenceType\n    };\n  }\n}\n","//@flow\nexport const MediaFormat: {[name: string]: ProviderMediaFormatType} = {\n  DASH: {\n    name: 'dash',\n    mimeType: 'application/dash+xml',\n    pathExt: 'mpd'\n  },\n  HLS: {\n    name: 'hls',\n    mimeType: 'application/x-mpegURL',\n    pathExt: 'm3u8'\n  },\n  WVM: {\n    name: 'wvm',\n    mimeType: 'video/wvm',\n    pathExt: 'wvm'\n  },\n  MP4: {\n    name: 'mp4',\n    mimeType: 'video/mp4',\n    pathExt: 'mp4'\n  },\n  MP3: {\n    name: 'mp3',\n    mimeType: 'audio/mpeg',\n    pathExt: 'mp3'\n  }\n};\n\nexport const SupportedStreamFormat: Map<string, ProviderMediaFormatType> = new Map([\n  ['mpegdash', MediaFormat.DASH],\n  ['applehttp', MediaFormat.HLS],\n  ['url', MediaFormat.MP4]\n]);\n\n/**\n * returns a boolean whether a source is progressive or not\n * @param {string} formatName - the format name\n * @returns {boolean} - if source is progressive or not\n */\nfunction isProgressiveSource(formatName: string): boolean {\n  const sourceFormat = SupportedStreamFormat.get(formatName);\n  return !!sourceFormat && sourceFormat.name === MediaFormat.MP4.name;\n}\n\nexport {isProgressiveSource};\n","//@flow\nimport Drm from './drm';\n\nexport default class MediaSource {\n  /**\n   * @member - media source id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - media source url\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - media source mimetype\n   * @type {string}\n   */\n  mimetype: string;\n  /**\n   * @member - media source drm data\n   * @type {Array<Drm>}\n   */\n  drmData: Array<Drm>;\n  /**\n   * @member - media source bandwidth\n   * @type {number}\n   */\n  bandwidth: number;\n  /**\n   * @member - media source width\n   * @type {number}\n   */\n  width: number;\n  /**\n   * @member - media source height\n   * @type {number}\n   */\n  height: number;\n  /**\n   * @member - media source label\n   * @type {string}\n   */\n  label: string;\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourceObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourceObject {\n    const response: ProviderMediaSourceObject = {\n      id: this.id,\n      url: this.url,\n      mimetype: this.mimetype\n    };\n    if (this.bandwidth) response.bandwidth = this.bandwidth;\n    if (this.width) response.width = this.width;\n    if (this.height) response.height = this.height;\n    if (this.label) response.label = this.label;\n    if (this.drmData && this.drmData.length > 0) {\n      response.drmData = [];\n      this.drmData.forEach(d => {\n        if (Array.isArray(response.drmData)) {\n          response.drmData.push(d.toJSON());\n        }\n      });\n    }\n    return response;\n  }\n}\n","// @flow\nimport MediaSource from './media-source';\nimport {MediaFormat} from './media-format';\n\nexport default class MediaSources {\n  /**\n   * Progressive download media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  progressive: Array<MediaSource>;\n  /**\n   * Dash media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  dash: Array<MediaSource>;\n  /**\n   * Hls media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  hls: Array<MediaSource>;\n  captions: Array<PKExternalCaptionObject>;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.progressive = [];\n    this.dash = [];\n    this.hls = [];\n  }\n\n  /**\n   * Maps the source to one of the containers according to his media format.\n   * @param {MediaSource} source - The source to add to one of the containers.\n   * @param {MediaFormat} mediaFormat - The media format of the source.\n   * @returns {void}\n   */\n  map(source: MediaSource, mediaFormat: ?ProviderMediaFormatType) {\n    if (mediaFormat) {\n      switch (mediaFormat.name) {\n        case MediaFormat.MP4.name:\n          this.progressive.push(source);\n          break;\n        case MediaFormat.DASH.name:\n          this.dash.push(source);\n          break;\n        case MediaFormat.HLS.name:\n          this.hls.push(source);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourcesObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourcesObject {\n    const response: ProviderMediaSourcesObject = {\n      progressive: [],\n      dash: [],\n      hls: []\n    };\n    this.progressive.forEach(p => response.progressive.push(p.toJSON()));\n    this.hls.forEach(h => response.hls.push(h.toJSON()));\n    this.dash.forEach(d => response.dash.push(d.toJSON()));\n    return response;\n  }\n}\n","// @flow\nimport {getLogLevel, setLogLevel, setLogger, type LogLevelType, LogLevel} from '../../util/logger';\nimport DataLoaderManager from './data-loader-manager';\nimport Error from '../../util/error/error';\n\nexport default class BaseProvider<MI> {\n  _partnerId: number;\n  _widgetId: ?string;\n  _ks: string;\n  _uiConfId: ?number;\n  _dataLoader: DataLoaderManager;\n  _playerVersion: string;\n  _logger: any;\n  _isAnonymous: boolean;\n  _networkRetryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  get partnerId(): number {\n    return this._partnerId;\n  }\n\n  get widgetId(): string {\n    return this._widgetId || this.defaultWidgetId;\n  }\n\n  get defaultWidgetId(): string {\n    return '_' + this._partnerId;\n  }\n\n  get uiConfId(): ?number {\n    return this._uiConfId;\n  }\n\n  get ks(): string {\n    return this._ks;\n  }\n\n  set ks(value: string): void {\n    this._ks = value;\n  }\n\n  get playerVersion(): string {\n    return this._playerVersion;\n  }\n\n  get isAnonymous(): boolean {\n    return this._isAnonymous;\n  }\n\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    setLogger(options.logger);\n    this._partnerId = options.partnerId;\n    this._widgetId = options.widgetId;\n    this._uiConfId = options.uiConfId;\n    this._isAnonymous = !options.ks;\n    this._ks = options.ks || '';\n    this._playerVersion = playerVersion;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getMediaConfig(mediaInfo: MI): Promise<ProviderMediaConfigObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'getMediaConfig method must be implement by the derived class'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getPlaylistConfig(playlistInfo: ProviderPlaylistInfoObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading playlist by id'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading entry list'\n      })\n    );\n  }\n\n  _verifyHasSources(sources: ProviderMediaConfigSourcesObject) {\n    if (sources.hls.concat(sources.dash, sources.progressive).length === 0) {\n      throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.MISSING_PLAY_SOURCE, {\n        action: '',\n        messages: `No play source for entry id: ${sources.id}`\n      });\n    }\n  }\n\n  get LogLevel(): LogLevelType {\n    return LogLevel;\n  }\n\n  getLogLevel(name?: string): Object {\n    return getLogLevel(name);\n  }\n\n  setLogLevel(level: Object, name?: string): void {\n    setLogLevel(level, name);\n  }\n}\n","//@flow\nexport default class ServiceResult {\n  /**\n   * @member - Is service returned an error\n   * @type {boolean}\n   */\n  hasError: boolean = false;\n  /**\n   * @member - The service error\n   * @type {ServiceError}\n   */\n  error: ServiceError;\n  /**\n   * @member - The service result data\n   * @type {Object}\n   */\n  data: Object;\n\n  /**\n   * @constructor\n   * @param {Object} response - Service response\n   */\n  constructor(response: Object) {\n    if (response.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.code, response.message);\n    } else if (response.error && response.error.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.error.code, response.error.message);\n    } else {\n      this.data = response;\n    }\n  }\n}\n\nclass ServiceError {\n  /**\n   * @member - The error code\n   * @type {string}\n   */\n  code: string;\n  /**\n   * @member - The error message\n   * @type {string}\n   */\n  message: string;\n\n  /**\n   * @constructor\n   * @param {string} code - The result code\n   * @param {string} message - The result message\n   */\n  constructor(code: string, message: string) {\n    this.code = code;\n    this.message = message;\n  }\n}\n","// @flow\nimport MultiRequestBuilder, {MultiRequestResult} from './multi-request-builder';\nimport Error from '../../util/error/error';\n\nexport default class DataLoaderManager {\n  /**\n   * @member - Loaders response map index\n   * @type {Map<string,Array<number>>}\n   * @private\n   */\n  _loadersResponseMap: Map<string, Array<number>> = new Map();\n  /**\n   * @member - Loaders multi request\n   * @type {MultiRequestBuilder}\n   * @protected\n   */\n  _multiRequest: MultiRequestBuilder;\n  /**\n   * @member - Loaders multi response\n   * @type {MultiRequestResult}\n   * @private\n   */\n  _multiResponse: MultiRequestResult;\n  /**\n   * @member - Loaders to execute\n   * @type {Map<string,Function>}\n   * @private\n   */\n  _loaders: Map<string, ILoader> = new Map();\n\n  _networkRetryConfig: ProviderNetworkRetryParameters;\n\n  constructor(networkRetryConfig: ProviderNetworkRetryParameters) {\n    this._networkRetryConfig = networkRetryConfig;\n  }\n\n  /**\n   * Add loader to execution loaders map\n   * @function\n   * @param {Function} loader Loader to add\n   * @param {Object} params Loader params\n   * @returns {void}\n   */\n  add(loader: Function, params: Object): void {\n    let execution_loader = new loader(params);\n    if (execution_loader.isValid()) {\n      this._loaders.set(loader.id, execution_loader);\n      // Get the start index from the multiReqeust before adding current execution_loader requests\n      let startIndex = this._multiRequest.requests.length;\n      // Get the requests\n      let requests = execution_loader.requests;\n      this._multiRequest.retryConfig = this._networkRetryConfig;\n      // Add requests to muktiRequest queue\n      requests.forEach(request => {\n        this._multiRequest.add(request);\n      });\n      // Create range array of current execution_loader requests\n      let executionLoaderResponseMap = Array.from(new Array(requests.length), (val, index) => index + startIndex);\n      // Add to map\n      this._loadersResponseMap.set(loader.id, executionLoaderResponseMap);\n    }\n  }\n\n  /**\n   * Get data from all loaders using multi request\n   * @function\n   * @returns {Promise} Promise\n   */\n  fetchData(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this._multiRequest.execute().then(\n        data => {\n          this._multiResponse = data.response;\n          let preparedData: Object = this.prepareData(data.response);\n          if (preparedData.success) {\n            resolve(this._loaders);\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.API_RESPONSE_MISMATCH, {\n                headers: data.headers\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n\n  /**\n   * Prepare fetched data\n   * @function\n   * @param {MultiRequestResult} response - The multi request result\n   * @returns {Object} - The prepared data\n   */\n  prepareData(response: MultiRequestResult): Object {\n    this._loaders.forEach((loader, name) => {\n      let loaderDataIndexes = this._loadersResponseMap.get(name);\n      try {\n        if (loaderDataIndexes && loaderDataIndexes.length > 0) {\n          loader.response = response.results.slice(loaderDataIndexes[0], loaderDataIndexes[loaderDataIndexes.length - 1] + 1);\n        }\n      } catch (err) {\n        return {success: false, error: err};\n      }\n    });\n    return {success: true, data: this._loaders};\n  }\n}\n","//@flow\nimport RequestBuilder from '../../util/request-builder';\nimport getLogger from '../../util/logger';\nimport ServiceResult from './base-service-result';\nimport Error from '../../util/error/error';\n\nexport default class MultiRequestBuilder extends RequestBuilder {\n  static _logger = getLogger('MultiRequestBuilder');\n  /**\n   * @memberof - MultiRequestBuilder\n   * @type {Array<RequestBuilder>}\n   */\n  requests: Array<RequestBuilder> = [];\n  /**\n   * Adds request to requests array\n   * @function add\n   * @param {RequestBuilder} request The request\n   * @returns {MultiRequestBuilder} The multiRequest\n   */\n  add(request: RequestBuilder): MultiRequestBuilder {\n    this.requests.push(request);\n    const requestParams = {};\n    const serviceDef: Object = {service: request.service, action: request.action};\n    Object.assign(requestParams, {[this.requests.length]: Object.assign(serviceDef, request.params)});\n    Object.assign(requestParams, this.params);\n    this.params = requestParams;\n    return this;\n  }\n\n  /**\n   * Executes a multi request\n   * @function execute\n   * @returns {Promise} The multirequest execution promise\n   */\n  execute(): Promise<Object> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.params = JSON.stringify(this.params);\n      } catch (err) {\n        MultiRequestBuilder._logger.error(`${err.message}`);\n        reject(\n          new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.FAILED_PARSING_REQUEST, {\n            error: err,\n            params: this.params\n          })\n        );\n      }\n      this.doHttpRequest().then(\n        data => {\n          const multiRequestResult = new MultiRequestResult(data);\n          if (multiRequestResult.success) {\n            resolve({\n              headers: this.responseHeaders,\n              response: multiRequestResult\n            });\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MULTIREQUEST_API_ERROR, {\n                url: this.url,\n                headers: this.responseHeaders,\n                results: multiRequestResult.results\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n}\n\nexport class MultiRequestResult {\n  static _logger = getLogger('MultiRequestResult');\n  /**\n   * @memberof MultiRequestResult\n   * @type {boolean}\n   */\n  success: boolean;\n  /**\n   * @memberof MultiRequestResult\n   * @type {Object}\n   */\n  results: Array<ServiceResult> = [];\n  /**\n   * @constructor\n   * @param {Object} response data\n   */\n  constructor(response: Object) {\n    this.success = true;\n    const result = response.result ? response.result : response;\n    const responseArr = Array.isArray(result) ? result : [result];\n    responseArr.forEach(result => {\n      const serviceResult: ServiceResult = new ServiceResult(result);\n      this.results.push(serviceResult);\n      if (serviceResult.hasError) {\n        MultiRequestResult._logger.error(\n          `Service returned an error with error code: ${serviceResult.error.code} and message: ${serviceResult.error.message}.`\n        );\n        this.success = false;\n        return;\n      }\n    });\n  }\n}\n","//@flow\nexport class KalturaAccessControlMessage {\n  /**\n   * @member - The access control message\n   * @type {string}\n   */\n  message: string;\n  /**\n   *  @member - The access control message code\n   * @@type {string}\n   */\n  code: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The json response\n   */\n  constructor(data: Object) {\n    this.message = data.message;\n    this.code = data.code;\n  }\n}\n","//@flow\nexport class KalturaDrmPlaybackPluginData {\n  static Scheme: {[scheme: string]: string} = {\n    'drm.PLAYREADY_CENC': 'com.microsoft.playready',\n    'drm.WIDEVINE_CENC': 'com.widevine.alpha',\n    'fairplay.FAIRPLAY': 'com.apple.fairplay',\n    WIDEVINE_CENC: 'com.widevine.alpha',\n    PLAYREADY_CENC: 'com.microsoft.playready',\n    FAIRPLAY: 'com.apple.fairplay'\n  };\n\n  /**\n   * @member - The drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - The license URL\n   * @type {string}\n   */\n  licenseURL: string;\n\n  /**\n   * @member - The drm certificate\n   * @type {?string}\n   */\n  certificate: ?string;\n\n  /**\n   * @constructor\n   * @param {Object} drm The json response\n   */\n  constructor(drm: any) {\n    this.scheme = drm.scheme;\n    this.licenseURL = drm.licenseURL;\n    this.certificate = drm.certificate;\n  }\n}\n","//@flow\nimport {clone} from '../../util/clone';\n\nconst defaultConfig: Object = {\n  serviceParams: {\n    apiVersion: '5.2.6'\n  }\n};\n\nexport default class OTTConfiguration {\n  static set(clientConfig?: ProviderEnvConfigObject) {\n    if (clientConfig) {\n      Object.assign(defaultConfig, clientConfig);\n    }\n  }\n\n  static get(): Object {\n    return clone(defaultConfig);\n  }\n}\n\nexport {OTTConfiguration};\n","// @flow\nimport OTTProvider from './provider';\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport KalturaAsset from './response-types/kaltura-asset';\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nconst NAME = __NAME__ + '-ott';\nconst VERSION = __VERSION__;\n\nconst ContextType = KalturaPlaybackContext.Type;\nconst MediaType = KalturaAsset.Type;\n\nexport {OTTProvider as Provider, ContextType, MediaType, NAME, VERSION};\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OTTConfiguration from '../config';\nimport OTTAssetService from '../services/asset-service';\nimport KalturaAsset from '../response-types/kaltura-asset';\n\nexport default class OTTAssetListLoader implements ILoader {\n  _entries: Array<string>;\n  _requests: Array<RequestBuilder>;\n  _response: any = {playlistItems: {entries: []}};\n\n  static get id(): string {\n    return 'asset_list';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entries = params.entries;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    response.forEach(item => {\n      this._response.playlistItems.entries.push({mediaDataResult: new KalturaAsset(item.data)});\n    });\n  }\n\n  get response(): any {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OTTConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    params.entries.forEach(entry => {\n      const assetReferenceType = entry.assetReferenceType || KalturaAsset.AssetReferenceType.MEDIA;\n      requests.push(OTTAssetService.get(config.serviceUrl, params.ks, entry.entryId || entry, assetReferenceType));\n    });\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!(this._entries && this._entries.length);\n  }\n}\n","//@flow\nimport OTTAssetService from '../services/asset-service';\nimport OTTConfiguration from '../config';\nimport RequestBuilder from '../../../util/request-builder';\nimport KalturaPlaybackContext from '../response-types/kaltura-playback-context';\nimport KalturaAsset from '../response-types/kaltura-asset';\n\ntype OTTAssetLoaderResponse = {mediaDataResult: KalturaAsset, playBackContextResult: KalturaPlaybackContext};\nexport type {OTTAssetLoaderResponse};\n\nexport default class OTTAssetLoader implements ILoader {\n  _entryId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'asset';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entryId = params.entryId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.mediaDataResult = new KalturaAsset(response[0].data);\n    this._response.playBackContextResult = new KalturaPlaybackContext(response[1].data);\n  }\n\n  get response(): OTTAssetLoaderResponse {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OTTConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OTTAssetService.get(config.serviceUrl, params.ks, params.entryId, params.assetReferenceType));\n    requests.push(OTTAssetService.getPlaybackContext(config.serviceUrl, params.ks, params.entryId, params.type, params.playbackContext));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._entryId;\n  }\n}\n","// @flow\nimport DataLoaderManager from '../../common/data-loader-manager';\nimport OTTService from '../services/ott-service';\n/**\n * OTTDataLoaderManager is a class that handles the OTT data loading\n * @param {string} partnerId - partner id\n * @param {string} ks - ks\n * @param {ProviderNetworkRetryParameters} [networkRetryConfig] - network retry configuration\n */\nexport default class OTTDataLoaderManager extends DataLoaderManager {\n  constructor(partnerId: number, ks: string = '', networkRetryConfig: ProviderNetworkRetryParameters) {\n    super(networkRetryConfig);\n    this._multiRequest = OTTService.getMultiRequest(ks, partnerId);\n  }\n}\n","//@flow\nimport UserService from '../services/user-service';\nimport OTTConfiguration from '../config';\nimport RequestBuilder from '../../../util/request-builder';\n\nexport default class OTTSessionLoader implements ILoader {\n  _partnerId: number;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'session';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._partnerId = params.partnerId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.ks = response[0].data.ks;\n  }\n\n  get response(): any {\n    return this._response.ks;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OTTConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(UserService.anonymousLogin(config.serviceUrl, params.partnerId, params.udid));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._partnerId;\n  }\n}\n","//@flow\nimport getLogger from '../../util/logger';\nimport KalturaPlaybackSource from './response-types/kaltura-playback-source';\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport KalturaAsset from './response-types/kaltura-asset';\nimport MediaEntry from '../../entities/media-entry';\nimport Drm from '../../entities/drm';\nimport MediaSource from '../../entities/media-source';\nimport MediaSources from '../../entities/media-sources';\nimport EntryList from '../../entities/entry-list';\nimport Bumper from '../../entities/bumper';\nimport {SupportedStreamFormat, isProgressiveSource} from '../../entities/media-format';\nimport {KalturaDrmPlaybackPluginData} from '../common/response-types/kaltura-drm-playback-plugin-data';\nimport KalturaRuleAction from './response-types/kaltura-rule-action';\nimport {KalturaAccessControlMessage} from '../common/response-types/kaltura-access-control-message';\nimport type {OTTAssetLoaderResponse} from './loaders/asset-loader';\nimport KalturaBumpersPlaybackPluginData from './response-types/kaltura-bumper-playback-plugin-data';\n\nconst LIVE_ASST_OBJECT_TYPE: string = 'KalturaLiveAsset';\n\nconst MediaTypeCombinations: {[mediaType: string]: Object} = {\n  [KalturaAsset.Type.MEDIA]: {\n    [KalturaPlaybackContext.Type.TRAILER]: () => ({type: MediaEntry.Type.VOD}),\n    [KalturaPlaybackContext.Type.PLAYBACK]: mediaAssetData => {\n      if (mediaAssetData.objectType === LIVE_ASST_OBJECT_TYPE) {\n        return {type: MediaEntry.Type.LIVE, dvrStatus: mediaAssetData.enableTrickPlay ? MediaEntry.DvrStatus.ON : MediaEntry.DvrStatus.OFF};\n      } else if (parseInt(mediaAssetData.externalIds) > 0) {\n        return {type: MediaEntry.Type.LIVE, dvrStatus: MediaEntry.DvrStatus.OFF};\n      }\n      return {type: MediaEntry.Type.VOD};\n    }\n  },\n  [KalturaAsset.Type.EPG]: {\n    [KalturaPlaybackContext.Type.CATCHUP]: () => ({type: MediaEntry.Type.VOD}),\n    [KalturaPlaybackContext.Type.START_OVER]: () => ({type: MediaEntry.Type.LIVE, dvrStatus: MediaEntry.DvrStatus.ON})\n  },\n  [KalturaAsset.Type.RECORDING]: {\n    [KalturaPlaybackContext.Type.PLAYBACK]: () => ({type: MediaEntry.Type.VOD})\n  }\n};\n\nexport default class OTTProviderParser {\n  static _logger = getLogger('OTTProviderParser');\n\n  /**\n   * Returns parsed media entry by given OTT response objects.\n   * @function getMediaEntry\n   * @param {any} assetResponse - The asset response.\n   * @param {Object} requestData - The request data object.\n   * @returns {MediaEntry} - The media entry\n   * @static\n   * @public\n   */\n  static getMediaEntry(assetResponse: any, requestData: Object): MediaEntry {\n    const mediaEntry = new MediaEntry();\n    OTTProviderParser._fillBaseData(mediaEntry, assetResponse, requestData);\n    const playbackContext = assetResponse.playBackContextResult;\n    const mediaAsset = assetResponse.mediaDataResult;\n    const kalturaSources = playbackContext.sources;\n    const filteredKalturaSources = OTTProviderParser._filterSourcesByFormats(kalturaSources, requestData.formats);\n    mediaEntry.sources = OTTProviderParser._getParsedSources(filteredKalturaSources);\n    const typeData = OTTProviderParser._getMediaType(mediaAsset.data, requestData.mediaType, requestData.contextType);\n    mediaEntry.type = typeData.type;\n    mediaEntry.dvrStatus = typeData.dvrStatus;\n    mediaEntry.duration = Math.max.apply(\n      Math,\n      kalturaSources.map(source => source.duration)\n    );\n    return mediaEntry;\n  }\n\n  /**\n   * Returns parsed entry list by given OTT response objects\n   * @function getEntryList\n   * @param {any} playlistResponse - response\n   * @param {Array<ProviderMediaInfoObject>} requestEntries - entries list\n   * @returns {Playlist} - The entry list\n   * @static\n   * @public\n   */\n  static getEntryList(playlistResponse: any, requestEntries: Array<ProviderMediaInfoObject>): EntryList {\n    const entryList = new EntryList();\n    const playlistItems = playlistResponse.playlistItems.entries;\n    playlistItems.forEach(entry => {\n      const mediaEntry = new MediaEntry();\n      const requestData = requestEntries.find(requestEntry => requestEntry.entryId === entry.mediaDataResult.id);\n      OTTProviderParser._fillBaseData(mediaEntry, entry, requestData);\n      entryList.items.push(mediaEntry);\n    });\n    return entryList;\n  }\n\n  /**\n   * Returns parsed bumper by given OTT response objects.\n   * @function getBumper\n   * @param {any} assetResponse - The asset response.\n   * @returns {?Bumper} - The bumper\n   * @static\n   * @public\n   */\n  static getBumper(assetResponse: any): ?Bumper {\n    const playbackContext = assetResponse.playBackContextResult;\n    const progressiveBumper = playbackContext.plugins.find(\n      bumper => bumper.streamertype === KalturaBumpersPlaybackPluginData.StreamerType.PROGRESSIVE\n    );\n    if (progressiveBumper) {\n      return new Bumper(progressiveBumper);\n    }\n  }\n\n  static _fillBaseData(mediaEntry: MediaEntry, assetResponse: any, requestData: any) {\n    const mediaAsset = assetResponse.mediaDataResult;\n    const metaData = OTTProviderParser.reconstructMetadata(mediaAsset);\n    metaData.description = mediaAsset.description;\n    metaData.name = mediaAsset.name;\n    if (mediaAsset.data.epgId) metaData.epgId = mediaAsset.data.epgId;\n    if (mediaAsset.data.recordingId) metaData.recordingId = mediaAsset.data.recordingId;\n    if (requestData && requestData.mediaType) metaData.mediaType = requestData.mediaType;\n    mediaEntry.metadata = metaData;\n    mediaEntry.poster = OTTProviderParser._getPoster(mediaAsset.pictures);\n    mediaEntry.id = mediaAsset.id;\n    return mediaEntry;\n  }\n\n  /**\n   * reconstruct the metadata\n   * @param {Object} mediaAsset the mediaAsset that contains the response with the metadata.\n   * @returns {Object} reconstructed metadata object\n   */\n  static reconstructMetadata(mediaAsset: Object): Object {\n    const metadata = {\n      metas: OTTProviderParser.addToMetaObject(mediaAsset.metas),\n      tags: OTTProviderParser.addToMetaObject(mediaAsset.tags)\n    };\n    return metadata;\n  }\n\n  /**\n   * transform an array of [{key: value},{key: value}...] to an object\n   * @param {Array<Object>} list a list of objects\n   * @returns {Object} an mapped object of the arrayed list.\n   */\n  static addToMetaObject(list: Array<Object>): Object {\n    let categoryObj = {};\n    if (list) {\n      list.forEach(item => {\n        categoryObj[item.key] = item.value;\n      });\n    }\n    return categoryObj;\n  }\n\n  /**\n   * Gets the poster url without width and height.\n   * @param {Array<Object>} pictures - Media pictures.\n   * @returns {string | Array<Object>} - Poster base url or array of poster candidates.\n   * @private\n   */\n  static _getPoster(pictures: Array<Object>): string | Array<Object> {\n    if (pictures && pictures.length > 0) {\n      const picObj = pictures[0];\n      const url = picObj.url;\n      // Search for thumbnail service\n      const regex = /.*\\/thumbnail\\/.*(?:width|height)\\/\\d+\\/(?:height|width)\\/\\d+/;\n      if (regex.test(url)) {\n        return url;\n      }\n      return pictures.map(pic => ({url: pic.url, width: pic.width, height: pic.height}));\n    }\n    return '';\n  }\n\n  /**\n   * Gets the media type (LIVE/VOD)\n   * @param {Object} mediaAssetData - The media asset data.\n   * @param {string} mediaType - The asset media type.\n   * @param {string} contextType - The asset context type.\n   * @returns {Object} - The type data object.\n   * @private\n   */\n  static _getMediaType(mediaAssetData: Object, mediaType: string, contextType: string): Object {\n    let typeData = {type: MediaEntry.Type.UNKNOWN};\n    if (MediaTypeCombinations[mediaType] && MediaTypeCombinations[mediaType][contextType]) {\n      typeData = MediaTypeCombinations[mediaType][contextType](mediaAssetData);\n    }\n    return typeData;\n  }\n\n  /**\n   * Filtered the kalturaSources array by device type.\n   * @param {Array<KalturaPlaybackSource>} kalturaSources - The kaltura sources.\n   * @param {Array<string>} formats - Partner device formats.\n   * @returns {Array<KalturaPlaybackSource>} - Filtered kalturaSources array.\n   * @private\n   */\n  static _filterSourcesByFormats(kalturaSources: Array<KalturaPlaybackSource>, formats: Array<string>): Array<KalturaPlaybackSource> {\n    if (formats.length > 0) {\n      kalturaSources = kalturaSources.filter(source => formats.includes(source.type));\n    }\n    return kalturaSources;\n  }\n\n  /**\n   * Returns the parsed sources\n   * @function _getParsedSources\n   * @param {Array<KalturaPlaybackSource>} kalturaSources - The kaltura sources\n   * @param {Object} playbackContext - The playback context\n   * @return {MediaSources} - A media sources\n   * @static\n   * @private\n   */\n  static _getParsedSources(kalturaSources: Array<KalturaPlaybackSource>): MediaSources {\n    const sources = new MediaSources();\n    const addAdaptiveSource = (source: KalturaPlaybackSource) => {\n      const parsedSource = OTTProviderParser._parseAdaptiveSource(source);\n      if (parsedSource) {\n        const sourceFormat = SupportedStreamFormat.get(source.format);\n        sources.map(parsedSource, sourceFormat);\n      }\n    };\n    const parseAdaptiveSources = () => {\n      kalturaSources.filter(source => !isProgressiveSource(source.format)).forEach(addAdaptiveSource);\n    };\n    const parseProgressiveSources = () => {\n      kalturaSources.filter(source => isProgressiveSource(source.format)).forEach(addAdaptiveSource);\n    };\n    if (kalturaSources && kalturaSources.length > 0) {\n      parseAdaptiveSources();\n      parseProgressiveSources();\n    }\n    return sources;\n  }\n\n  /**\n   * Returns a parsed adaptive source\n   * @function _parseAdaptiveSource\n   * @param {KalturaPlaybackSource} kalturaSource - A kaltura source\n   * @returns {?MediaSource} - The parsed adaptive kalturaSource\n   * @static\n   * @private\n   */\n  static _parseAdaptiveSource(kalturaSource: ?KalturaPlaybackSource): ?MediaSource {\n    const mediaSource = new MediaSource();\n    if (kalturaSource) {\n      const playUrl = kalturaSource.url;\n      const mediaFormat = SupportedStreamFormat.get(kalturaSource.format);\n      if (mediaFormat) {\n        mediaSource.mimetype = mediaFormat.mimeType;\n      }\n      if (!playUrl) {\n        OTTProviderParser._logger.error(\n          `failed to create play url from source, discarding source: (${kalturaSource.fileId}), ${kalturaSource.format}.`\n        );\n        return null;\n      }\n      mediaSource.url = playUrl;\n      mediaSource.id = kalturaSource.fileId + ',' + kalturaSource.format;\n      if (kalturaSource.hasDrmData()) {\n        const drmParams: Array<Drm> = [];\n        kalturaSource.drm.forEach(drm => {\n          drmParams.push(new Drm(drm.licenseURL, KalturaDrmPlaybackPluginData.Scheme[drm.scheme], drm.certificate));\n        });\n        mediaSource.drmData = drmParams;\n      }\n    }\n    return mediaSource;\n  }\n\n  static hasBlockAction(response: OTTAssetLoaderResponse): boolean {\n    return response.playBackContextResult.hasBlockAction();\n  }\n\n  static getBlockAction(response: OTTAssetLoaderResponse): ?KalturaRuleAction {\n    return response.playBackContextResult.getBlockAction();\n  }\n\n  static getErrorMessages(response: OTTAssetLoaderResponse): Array<KalturaAccessControlMessage> {\n    return response.playBackContextResult.getErrorMessages();\n  }\n}\n","// @flow\nimport BaseProvider from '../common/base-provider';\nimport getLogger from '../../util/logger';\nimport OTTConfiguration from './config';\nimport OTTDataLoaderManager from './loaders/data-loader-manager';\nimport OTTSessionLoader from './loaders/session-loader';\nimport OTTAssetLoader from './loaders/asset-loader';\nimport OTTAssetListLoader from './loaders/asset-list-loader';\nimport OTTProviderParser from './provider-parser';\nimport KalturaAsset from './response-types/kaltura-asset';\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport MediaEntry from '../../entities/media-entry';\nimport Error from '../../util/error/error';\n\nexport default class OTTProvider extends BaseProvider<OTTProviderMediaInfoObject> {\n  /**\n   * @constructor\n   * @param {ProviderOptionsObject} options - provider options\n   * @param {string} playerVersion - player version\n   */\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    super(options, playerVersion);\n    this._logger = getLogger('OTTProvider');\n    OTTConfiguration.set(options.env);\n    this._networkRetryConfig = Object.assign(this._networkRetryConfig, options.networkRetryParameters);\n  }\n\n  /**\n   * Gets the backend media config.\n   * @param {OTTProviderMediaInfoObject} mediaInfo - ott media info\n   * @returns {Promise<ProviderMediaConfigObject>} - The provider media config\n   */\n  getMediaConfig(mediaInfo: OTTProviderMediaInfoObject): Promise<ProviderMediaConfigObject> {\n    if (mediaInfo.ks) {\n      this.ks = mediaInfo.ks;\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OTTDataLoaderManager(this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entryId = mediaInfo.entryId;\n      if (entryId) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OTTSessionLoader, {partnerId: this.partnerId});\n        }\n        const contextType = mediaInfo.contextType || KalturaPlaybackContext.Type.PLAYBACK;\n        const mediaType = mediaInfo.mediaType || KalturaAsset.Type.MEDIA;\n        const assetReferenceType = mediaInfo.assetReferenceType || KalturaAsset.AssetReferenceType.MEDIA;\n        const playbackContext: ProviderPlaybackContextOptions = {\n          mediaProtocol: mediaInfo.protocol,\n          assetFileIds: mediaInfo.fileIds,\n          context: contextType\n        };\n        if (mediaInfo.streamerType) {\n          playbackContext.streamerType = mediaInfo.streamerType;\n        }\n        if (mediaInfo.urlType) {\n          playbackContext.urlType = mediaInfo.urlType;\n        }\n        if (mediaInfo.adapterData) {\n          playbackContext.adapterData = mediaInfo.adapterData;\n        }\n        this._dataLoader.add(OTTAssetLoader, {\n          entryId: entryId,\n          ks: ks,\n          type: mediaType,\n          playbackContext: playbackContext,\n          assetReferenceType: assetReferenceType\n        });\n        const requestData = {\n          contextType: contextType,\n          mediaType: mediaType,\n          formats: mediaInfo.formats || []\n        };\n        return this._dataLoader.fetchData().then(\n          response => {\n            try {\n              resolve(this._parseDataFromResponse(response, requestData));\n            } catch (err) {\n              reject(err);\n            }\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject(new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.MISSING_MANDATORY_PARAMS, {message: 'missing entry id'}));\n      }\n    });\n  }\n\n  _parseDataFromResponse(data: Map<string, Function>, requestData: Object): ProviderMediaConfigObject {\n    this._logger.debug('Data parsing started');\n    const mediaConfig: ProviderMediaConfigObject = {\n      session: {\n        isAnonymous: this._isAnonymous,\n        partnerId: this.partnerId\n      },\n      sources: this._getDefaultSourcesObject(),\n      plugins: {}\n    };\n    if (this.uiConfId) {\n      mediaConfig.session.uiConfId = this.uiConfId;\n    }\n    if (data) {\n      if (data.has(OTTSessionLoader.id)) {\n        const sessionLoader = data.get(OTTSessionLoader.id);\n        if (sessionLoader && sessionLoader.response) {\n          mediaConfig.session.ks = sessionLoader.response;\n        }\n      } else {\n        mediaConfig.session.ks = this.ks;\n      }\n      if (data.has(OTTAssetLoader.id)) {\n        const assetLoader = data.get(OTTAssetLoader.id);\n        if (assetLoader && assetLoader.response && Object.keys(assetLoader.response).length) {\n          const response = (assetLoader: OTTAssetLoader).response;\n          if (OTTProviderParser.hasBlockAction(response)) {\n            throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.BLOCK_ACTION, {\n              action: OTTProviderParser.getBlockAction(response),\n              messages: OTTProviderParser.getErrorMessages(response)\n            });\n          }\n          const mediaEntry = OTTProviderParser.getMediaEntry(response, requestData);\n          Object.assign(mediaConfig.sources, this._getSourcesObject(mediaEntry));\n          this._verifyHasSources(mediaConfig.sources);\n          const bumper = OTTProviderParser.getBumper(response);\n          if (bumper) {\n            Object.assign(mediaConfig.plugins, {bumper});\n          }\n        }\n      }\n    }\n    this._logger.debug('Data parsing finished', mediaConfig);\n    return mediaConfig;\n  }\n\n  /**\n   * Gets playlist config from entry list.\n   * @param {ProviderEntryListObject} entryListInfo - ott entry list info\n   * @returns {Promise<ProviderPlaylistObject>} - The provider playlist config\n   */\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    if (entryListInfo.ks) {\n      this.ks = entryListInfo.ks;\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OTTDataLoaderManager(this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entries = entryListInfo.entries;\n      if (entries && entries.length) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OTTSessionLoader, {partnerId: this.partnerId});\n        }\n        this._dataLoader.add(OTTAssetListLoader, {entries, ks});\n        this._dataLoader.fetchData().then(\n          response => {\n            resolve(this._parseEntryListDataFromResponse(response, entries));\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject({success: false, data: 'Missing mandatory parameter'});\n      }\n    });\n  }\n\n  _parseEntryListDataFromResponse(data: Map<string, Function>, requestEntries: Array<ProviderMediaInfoObject>): ProviderPlaylistObject {\n    this._logger.debug('Data parsing started');\n    const playlistConfig: ProviderPlaylistObject = {\n      id: '',\n      metadata: {\n        name: '',\n        description: ''\n      },\n      poster: '',\n      items: []\n    };\n    if (data && data.has(OTTAssetListLoader.id)) {\n      const playlistLoader = data.get(OTTAssetListLoader.id);\n      if (playlistLoader && playlistLoader.response) {\n        const entryList = OTTProviderParser.getEntryList(playlistLoader.response, requestEntries);\n        entryList.items.forEach(i => playlistConfig.items.push({sources: this._getSourcesObject(i)}));\n      }\n    }\n    this._logger.debug('Data parsing finished', playlistConfig);\n    return playlistConfig;\n  }\n\n  _getDefaultSourcesObject(): ProviderMediaConfigSourcesObject {\n    return {\n      hls: [],\n      dash: [],\n      progressive: [],\n      id: '',\n      duration: 0,\n      type: MediaEntry.Type.UNKNOWN,\n      poster: '',\n      dvr: false,\n      vr: null,\n      metadata: {\n        name: '',\n        description: '',\n        tags: ''\n      }\n    };\n  }\n\n  _getSourcesObject(mediaEntry: MediaEntry) {\n    const sourcesObject: ProviderMediaConfigSourcesObject = this._getDefaultSourcesObject();\n    const mediaSources = mediaEntry.sources.toJSON();\n    sourcesObject.hls = mediaSources.hls;\n    sourcesObject.dash = mediaSources.dash;\n    sourcesObject.progressive = mediaSources.progressive;\n    sourcesObject.id = mediaEntry.id;\n    sourcesObject.duration = mediaEntry.duration;\n    sourcesObject.type = mediaEntry.type;\n    sourcesObject.dvr = !!mediaEntry.dvrStatus;\n    sourcesObject.poster = mediaEntry.poster;\n    if (\n      mediaEntry.metadata &&\n      mediaEntry.metadata.metas &&\n      typeof mediaEntry.metadata.metas.tags === 'string' &&\n      mediaEntry.metadata.metas.tags.indexOf('360') > -1\n    ) {\n      sourcesObject.vr = {};\n    }\n    Object.assign(sourcesObject.metadata, mediaEntry.metadata);\n    return sourcesObject;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\n\nexport default class KalturaAsset extends ServiceResult {\n  static Type: {[type: string]: string} = {\n    MEDIA: 'media',\n    RECORDING: 'recording',\n    EPG: 'epg'\n  };\n\n  static AssetReferenceType: {[type: string]: string} = {\n    MEDIA: 'media',\n    EPG_INTERNAL: 'epg_internal',\n    EPG_EXTERNAL: 'epg_external',\n    NPVR: 'nPVR'\n  };\n  /**\n   * @member - The asset id\n   * @type {number}\n   */\n  id: number;\n  /**\n   * @member - The asset name\n   * @type {string}\n   */\n  name: string = '';\n  /**\n   * @member - The asset name description\n   * @type {string}\n   */\n  description: string = '';\n  /**\n   * @member - The asset tags\n   * @type {Array<Object>}\n   */\n  tags: Array<Object> = [];\n  /**\n   * @member - The asset metas\n   * @type {Array<Object>}\n   */\n  metas: Array<Object> = [];\n  /**\n   * @member - The asset images\n   * @type {Array<any>}\n   */\n  pictures: Array<any> = [];\n\n  /**\n   * @constructor\n   * @param {Object} response The response\n   */\n  constructor(response: Object) {\n    super(response);\n    if (!this.hasError) {\n      this.id = response.id;\n      this.name = response.name;\n      this.description = response.description;\n      this.metas = this._formatTagsMetas(response.metas);\n      this.tags = this._formatTagsMetas(response.tags);\n      this.pictures = response.images;\n    }\n  }\n\n  _formatTagsMetas(objectToParse: any): Array<Object> {\n    const parsed = [];\n    Object.keys(objectToParse).forEach(function (key) {\n      if (objectToParse[key].objects) {\n        let value = '';\n        objectToParse[key].objects.forEach(function (object) {\n          value += object.value + '|';\n        });\n        parsed.push({key: key, value: value});\n      } else {\n        parsed.push({key: key, value: objectToParse[key].value});\n      }\n    });\n    return parsed;\n  }\n}\n","//@flow\nexport default class KalturaBumpersPlaybackPluginData {\n  static StreamerType: {[type: string]: string} = {\n    HLS: 'hls',\n    DASH: 'dash',\n    PROGRESSIVE: 'progressive'\n  };\n\n  /**\n   * @member - The streamer type\n   * @type {string}\n   */\n  streamertype: string;\n  /**\n   * @member - The url\n   * @type {string}\n   */\n  url: string;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    this.streamertype = data.streamertype;\n    this.url = data.url;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport {KalturaAccessControlMessage} from '../../common/response-types/kaltura-access-control-message';\nimport KalturaRuleAction from './kaltura-rule-action';\nimport KalturaPlaybackSource from './kaltura-playback-source';\nimport KalturaBumpersPlaybackPluginData from './kaltura-bumper-playback-plugin-data';\n\nexport default class KalturaPlaybackContext extends ServiceResult {\n  static Type: {[type: string]: string} = {\n    TRAILER: 'TRAILER',\n    CATCHUP: 'CATCHUP',\n    START_OVER: 'START_OVER',\n    PLAYBACK: 'PLAYBACK'\n  };\n  /**\n   * @member - The playback sources\n   * @type {Array<KalturaPlaybackSource>}\n   */\n  sources: Array<KalturaPlaybackSource> = [];\n  /**\n   * @member - Array of actions as received from the rules that invalidated\n   * @type {Array<KalturaRuleAction>}\n   */\n  actions: Array<KalturaRuleAction> = [];\n  /**\n   * @member - Array of access control massages\n   * @type {Array<KalturaAccessControlMessage>}\n   */\n  messages: Array<KalturaAccessControlMessage> = [];\n  /**\n   * @member - Array of bumper plugins\n   * @type {Array<KalturaBumpersPlaybackPluginData>}\n   */\n  plugins: Array<KalturaBumpersPlaybackPluginData> = [];\n\n  /**\n   * @constructor\n   * @param {Object} response The response\n   */\n  constructor(response: Object) {\n    super(response);\n    if (!this.hasError) {\n      const messages = response.messages;\n      if (messages) {\n        messages.map(message => this.messages.push(new KalturaAccessControlMessage(message)));\n      }\n      const actions = response.actions;\n      if (actions) {\n        actions.map(action => this.actions.push(new KalturaRuleAction(action)));\n      }\n      const sources = response.sources;\n      if (sources) {\n        sources.map(source => this.sources.push(new KalturaPlaybackSource(source)));\n      }\n      const plugins = response.plugins;\n      if (plugins) {\n        plugins.map(plugin => this.plugins.push(new KalturaBumpersPlaybackPluginData(plugin)));\n      }\n    }\n  }\n\n  hasBlockAction(): boolean {\n    return this.getBlockAction() !== undefined;\n  }\n\n  getBlockAction(): ?KalturaRuleAction {\n    return this.actions.find(action => action.type === KalturaRuleAction.Type.BLOCK);\n  }\n\n  getErrorMessages(): Array<KalturaAccessControlMessage> {\n    return this.messages;\n  }\n}\n","//@flow\nimport {KalturaDrmPlaybackPluginData} from '../../common/response-types/kaltura-drm-playback-plugin-data';\n\nexport type OTTKalturaPlaybackSource = KalturaPlaybackSource;\n\nexport default class KalturaPlaybackSource {\n  format: string;\n  protocols: string;\n  drm: Array<KalturaDrmPlaybackPluginData> = [];\n  adsPolicy: string;\n  adsParam: string;\n  duration: number;\n  url: string;\n  type: string;\n  fileId: number;\n\n  /**\n   * @constructor\n   * @param {Object} source The response\n   */\n  constructor(source: Object) {\n    this.format = source.format;\n    this.adsPolicy = source.adsPolicy;\n    this.adsParam = source.adsParam;\n    this.duration = source.duration;\n    this.url = source.url;\n    this.type = source.type;\n    this.fileId = source.id;\n    this.protocols = source.protocols;\n    if (source.drm) {\n      source.drm.map(drm => this.drm.push(new KalturaDrmPlaybackPluginData(drm)));\n    }\n  }\n\n  /**\n   * Checks if source has DRM data\n   * @function hasDrmData\n   * @returns {boolean} Is source has DRM\n   */\n  hasDrmData(): boolean {\n    return this.drm && this.drm.length > 0;\n  }\n\n  /**\n   * Returns source desired protocol if supported\n   * @param {string} protocol - the desired protocol for the source (base play url protocol)\n   * @returns {string} - protocol if protocol is in the protocols list - if not empty string returned\n   */\n  getProtocol(protocol: string): string {\n    let returnValue: string = '';\n    if (this.protocols && this.protocols.length > 0) {\n      let protocolsArr: Array<string> = this.protocols.split(',');\n      protocolsArr.forEach(p => {\n        if (p === protocol) {\n          returnValue = p;\n        }\n      });\n    } else if (protocol === 'http') {\n      return protocol;\n    }\n    return returnValue;\n  }\n}\n","//@flow\nexport default class KalturaRuleAction {\n  static Type: {[type: string]: string | number} = {\n    BLOCK: 'BLOCK',\n    START_DATE_OFFSET: 'START_DATE_OFFSET',\n    END_DATE_OFFSET: 'END_DATE_OFFSET',\n    USER_BLOCK: 'USER_BLOCK',\n    ALLOW_PLAYBACK: 'ALLOW_PLAYBACK',\n    BLOCK_PLAYBACK: 'BLOCK_PLAYBACK',\n    APPLY_DISCOUNT_MODULE: 'APPLY_DISCOUNT_MODULE'\n  };\n\n  /**\n   * @member - The type of the action\n   * @type {string|number}\n   */\n  type: string | number;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    this.type = data.type;\n  }\n}\n","//@flow\nimport OTTService from './ott-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'asset';\n\nexport default class OTTAssetService extends OTTService {\n  /**\n   * Creates an instance of RequestBuilder for session.startWidgetSession\n   * @function anonymousSession\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The partner ID\n   * @param {string} assetId The asset ID\n   * @param {string} type The asset type (media/recording/epg)\n   * @param {ProviderPlaybackContextOptions} playbackContextOptions The playbackContextOptions\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static getPlaybackContext(\n    serviceUrl: string,\n    ks: string,\n    assetId: string,\n    type: string,\n    playbackContextOptions: ProviderPlaybackContextOptions\n  ): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'getPlaybackContext';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    const contextDataParams: Object = {objectType: 'KalturaPlaybackContextOptions'};\n    Object.assign(contextDataParams, playbackContextOptions);\n    request.params = {assetId: assetId, assetType: type, contextDataParams: contextDataParams, ks: ks};\n    return request;\n  }\n\n  static get(serviceUrl: string, ks: string, assetId: string, assetReferenceType: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'get';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.params = {id: assetId, assetReferenceType: assetReferenceType, ks: ks};\n    return request;\n  }\n}\n","//@flow\nimport MultiRequestBuilder from '../../common/multi-request-builder';\nimport OTTConfiguration from '../config';\n\nconst SERVICE_NAME: string = 'multirequest';\n\nexport default class OTTService {\n  /**\n   * Gets a new instance of MultiRequestBuilder with ott params\n   * @function getMultiRequest\n   * @param {string} ks The ks\n   * @param {string} partnerId The partner ID\n   * @returns {MultiRequestBuilder} The multi request builder\n   * @static\n   */\n  static getMultiRequest(ks: string, partnerId?: number): MultiRequestBuilder {\n    const config = OTTConfiguration.get();\n    const ottParams = config.serviceParams;\n    if (ks) {\n      Object.assign(ottParams, {ks: ks});\n    }\n    if (partnerId) {\n      Object.assign(ottParams, {partnerId: partnerId});\n    }\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const multiReq = new MultiRequestBuilder(headers);\n    multiReq.method = 'POST';\n    multiReq.service = SERVICE_NAME;\n    multiReq.url = multiReq.getUrl(config.serviceUrl);\n    multiReq.params = ottParams;\n    return multiReq;\n  }\n}\n","//@flow\nimport OTTService from './ott-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'ottuser';\n\nexport default class OTTUserService extends OTTService {\n  /**\n   * Creates an instance of RequestBuilder for session.startWidgetSession\n   * @function anonymousSession\n   * @param {string} serviceUrl The service base URL\n   * @param {string} partnerId The partner ID\n   * @param {string} udid The udid\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static anonymousLogin(serviceUrl: string, partnerId: number, udid?: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'anonymousLogin';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    const params: Object = {partnerId: partnerId};\n    if (udid) {\n      Object.assign(params, {udid: udid});\n    }\n    request.params = params;\n    return request;\n  }\n}\n","const clone = data => {\n  let node;\n  if (Array.isArray(data)) {\n    node = data.length > 0 ? data.slice(0) : [];\n    node.forEach((e, i) => {\n      if ((typeof e === 'object' && e !== {}) || (Array.isArray(e) && e.length > 0)) {\n        node[i] = clone(e);\n      }\n    });\n  } else if (typeof data === 'object') {\n    node = Object.assign({}, data);\n    Object.keys(node).forEach(key => {\n      if ((typeof node[key] === 'object' && node[key] !== {}) || (Array.isArray(node[key]) && node[key].length > 0)) {\n        node[key] = clone(node[key]);\n      }\n    });\n  } else {\n    node = data;\n  }\n  return node;\n};\n\nexport {clone};\n","//@flow\ntype CategoryType = {[category: string]: number};\n\nconst Category: CategoryType = {\n  /** Errors from the network stack. */\n  NETWORK: 1,\n  SERVICE: 2,\n  PROVIDER: 3\n};\n\nexport {Category};\nexport type {CategoryType};\n","//@flow\n\ntype CodeType = {[code: string]: number};\n\nconst Code: CodeType = {\n  /**\n   * A network request was made using an unsupported URI scheme.\n   */\n  UNSUPPORTED_SCHEME: 1000,\n\n  /**\n   * An HTTP network request returned an HTTP status that indicated a failure.\n   */\n  BAD_HTTP_STATUS: 1001,\n\n  /**\n   * An HTTP network request failed with an error, but not from the server.\n   */\n  HTTP_ERROR: 1002,\n\n  /**\n   * A network request timed out.\n   */\n  TIMEOUT: 1003,\n\n  /**\n   * A network request was made with a malformed data URI.\n   */\n  MALFORMED_DATA_URI: 1004,\n\n  /**\n   * The server responsded with 2xx response, but it couldn't be parsed\n   */\n  BAD_SERVER_RESPONSE: 1005,\n\n  /**\n   * The server response had a valid structure but contained an error from the API\n   */\n  MULTIREQUEST_API_ERROR: 1006,\n\n  /**\n   * The server response had a valid structure and valid API result, but it did not match the request\n   */\n  API_RESPONSE_MISMATCH: 1007,\n\n  /**\n   * The server responded with an error\n   */\n  ERROR: 2000,\n\n  /**\n   * The server responded with a block action\n   */\n  BLOCK_ACTION: 2001,\n\n  /**\n   * The server responded with status import or pre convert\n   */\n  MEDIA_STATUS_NOT_READY: 2002,\n\n  /**\n   * The provider is missing mandatory parameter/s\n   */\n\n  MISSING_MANDATORY_PARAMS: 3000,\n\n  /**\n   * The server responded with empty sources objects (for HLS, Dash and progressive)\n   */\n  MISSING_PLAY_SOURCE: 3001,\n\n  /**\n   * The provider doesn't implement the called api\n   */\n  METHOD_NOT_IMPLEMENTED: 3002\n};\n\nexport {Code};\nexport type {CodeType};\n","//@flow\nimport getLogger from '../logger';\nimport {Severity} from './severity';\nimport type {SeverityType} from './severity';\nimport {Code} from './code';\nimport type {CodeType} from './code';\nimport {Category} from './category';\nimport type {CategoryType} from './category';\n\nconst CLASS_NAME: string = 'Error';\n\n/**\n * @classdesc This is a description of the error class.\n */\nexport default class Error {\n  severity: number;\n  category: number;\n  code: number;\n  data: any;\n  /**\n   * @enum {number}\n   */\n  static Severity: SeverityType = Severity;\n  /**\n   * @enum {number}\n   */\n  static Category: CategoryType = Category;\n  /**\n   * @enum {number}\n   */\n  static Code: CodeType = Code;\n  static _logger: any = getLogger(CLASS_NAME);\n\n  /**\n   * @constructor\n   * @param {number} severity - error's severity\n   * @param {number} category - error's category.\n   * @param {number} code - error's code.\n   * @param {any} data - additional data for the error.\n   */\n  constructor(severity: number, category: number, code: number, data: any = {}) {\n    this.severity = severity;\n    this.category = category;\n    this.code = code;\n    this.data = data;\n    Error._logger.error(`Category:${category} | Code:${code} |`, data);\n  }\n}\n","//@flow\n\ntype SeverityType = {[severity: string]: number};\n\nconst Severity: SeverityType = {\n  /**\n   * An error occurred, but the Player is attempting to recover from the error.\n   *\n   * If the Player cannot ultimately recover, it still may not throw a CRITICAL\n   * error.  For example, retrying for a media segment will never result in\n   * a CRITICAL error (the Player will just retry forever).\n   */\n  RECOVERABLE: 1,\n  /**\n   * A critical error that the library cannot recover from.  These usually cause\n   * the Player to stop loading or updating.  A new manifest must be loaded\n   * to reset the library.\n   */\n  CRITICAL: 2\n};\n\nexport {Severity};\nexport type {SeverityType};\n","//@flow\nexport type LogLevelObject = {value: number, name: string};\nexport type LogLevelType = {[level: string]: LogLevelObject};\nexport type loggerFunctionType = {\n  VERSION: String,\n  DEBUG: LogLevelObject,\n  ERROR: LogLevelObject,\n  INFO: LogLevelObject,\n  OFF: LogLevelObject,\n  TIME: LogLevelObject,\n  TRACE: LogLevelObject,\n  WARN: LogLevelObject,\n  createDefaultHandler: Function,\n  debug: Function,\n  enabledFor: Function,\n  error: Function,\n  get: Function,\n  getLevel: Function,\n  info: Function,\n  log: Function,\n  setHandler: Function,\n  setLevel: Function,\n  time: Function,\n  timeEnd: Function,\n  trace: Function,\n  useDefaults: Function,\n  warn: Function\n};\n\nexport type LoggerType = {\n  getLogger: loggerFunctionType,\n  LogLevel: LogLevelType\n};\n\nlet JsLogger = {\n  get: () => ({\n    VERSION: '',\n    DEBUG: {value: '', name: ''},\n    ERROR: {value: '', name: ''},\n    INFO: {value: '', name: ''},\n    OFF: {value: '', name: ''},\n    TIME: {value: '', name: ''},\n    TRACE: {value: '', name: ''},\n    WARN: {value: '', name: ''},\n    createDefaultHandler: () => {},\n    debug: () => {},\n    enabledFor: () => {},\n    error: () => {},\n    get: () => {},\n    getLevel: () => {},\n    info: () => {},\n    log: () => {},\n    setHandler: () => {},\n    setLevel: () => {},\n    time: () => {},\n    timeEnd: () => {},\n    trace: () => {},\n    useDefaults: () => {},\n    warn: () => {}\n  })\n};\n\nlet LogLevel: LogLevelType = {};\n/**\n * set logger\n * @param {LoggerType} logger - the logger\n * @returns {void}\n */\nfunction setLogger(logger: ?LoggerType): void {\n  if (logger && typeof logger.getLogger === 'function') {\n    JsLogger.get = logger.getLogger;\n  }\n  if (logger && logger.LogLevel) {\n    LogLevel = logger.LogLevel;\n  }\n}\n\n/**\n * get a logger\n * @param {?string} name - the logger name\n * @returns {Object} - the logger class\n */\nfunction getLogger(name?: string): Object {\n  //$FlowFixMe\n  return JsLogger.get(name);\n}\n\n/**\n * get the log level\n * @param {?string} name - the logger name\n * @returns {LogLevelObject} - the log level\n */\nfunction getLogLevel(name?: string): LogLevelObject {\n  return getLogger(name).getLevel();\n}\n\n/**\n * sets the logger level\n * @param {LogLevelObject} level - the log level\n * @param {?string} name - the logger name\n * @returns {void}\n */\nfunction setLogLevel(level: LogLevelObject, name?: string): void {\n  getLogger(name).setLevel(level);\n}\n\nexport default getLogger;\nexport {getLogLevel, setLogLevel, setLogger, LogLevel};\n","//@flow\nimport Error from './error/error';\n\nconst KALTURA_HEADER_PREFIX: string = 'x-';\n\nexport default class RequestBuilder {\n  /**\n   * @member - Service name\n   * @type {string}\n   */\n  service: string;\n  /**\n   * @member - Service action\n   * @type {string}\n   */\n  action: string;\n  /**\n   * @member - Service params\n   * @type {any}\n   */\n  params: any;\n  /**\n   * @memberof - Service headers\n   * @type {Map<string, string>}\n   */\n  headers: Map<string, string>;\n  /**\n   * @memberof - Service URL\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @memberof - Service method (POST,GET,DELETE etc..)\n   * @type {string}\n   */\n  method: string;\n  /**\n   * @memberof - Service tag\n   * @type {string}\n   */\n  tag: string;\n  /**\n   * @memberof - the response headers of the arra\n   * @type {Array<string>}\n   */\n  responseHeaders: Array<string>;\n  /**\n   * @description network retry configuration\n   * @memberof RequestBuilder\n   * @type {ProviderNetworkRetryParameters}\n   */\n  retryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  /**\n   * @description number of xhr attempts for the same multi - request.\n   * @memberof RequestBuilder\n   * @type {number}\n   * @private\n   */\n  _attemptCounter: number = 1;\n\n  /**\n   * @description hold the promise result of the XHR request(s) - if all tries fails, it rejects with the error.\n   * @memberof RequestBuilder\n   * @type {Object}\n   * @private\n   */\n  _requestPromise: Object;\n\n  /**\n   * @constructor\n   * @param {Map<string, string>} headers The request headers\n   */\n  constructor(headers: Map<string, string> = new Map()) {\n    this.headers = headers;\n  }\n\n  /**\n   * Builds restful service URL\n   * @function getUrl\n   * @param {string} serviceUrl - The service base URL\n   * @returns {string} The service URL\n   */\n  getUrl(serviceUrl: string): string {\n    return serviceUrl + '/service/' + this.service + (this.action ? '/action/' + this.action : '');\n  }\n\n  /**\n   * Executes service\n   * @function doHttpRequest\n   * @returns {Promise.<any>} Service response as promise\n   */\n  doHttpRequest(): Promise<any> {\n    const promise = new Promise((resolve, reject) => {\n      this._requestPromise = {\n        resolve,\n        reject\n      };\n    });\n    if (!this.url) {\n      this._requestPromise.reject(\n        new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MALFORMED_DATA_URI, {\n          url: this.url\n        })\n      );\n    }\n    this._createXHR();\n    return promise;\n  }\n\n  _createXHR(): void {\n    let request = new XMLHttpRequest();\n    request.onreadystatechange = () => {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          try {\n            const response = JSON.parse(request.responseText);\n            this.responseHeaders = this._getResponseHeaders(request);\n            // the promise returns the response for backwards compatibility\n            return this._requestPromise.resolve(response);\n          } catch (error) {\n            this._requestPromise.reject(\n              this._createError(request, Error.Code.BAD_SERVER_RESPONSE, {\n                text: request.responseText\n              })\n            );\n          }\n        }\n      }\n    };\n    request.open(this.method, this.url, this.retryConfig.async);\n    if (this.retryConfig.async && this.retryConfig.timeout) {\n      request.timeout = this.retryConfig.timeout;\n    }\n    const requestTime = performance.now();\n    request.ontimeout = () => {\n      this._handleError(request, Error.Code.TIMEOUT, {\n        timeout: (performance.now() - requestTime) / 1000,\n        statusText: request.statusText\n      });\n    };\n    request.onerror = request.onabort = () => {\n      this._handleError(request, Error.Code.HTTP_ERROR, {\n        text: request.responseText,\n        statusText: request.statusText\n      });\n    };\n    this.headers.forEach((value, key) => {\n      request.setRequestHeader(key, value);\n    });\n    request.send(this.params);\n  }\n\n  _getResponseHeaders(request: XMLHttpRequest): Array<string> {\n    return request\n      .getAllResponseHeaders()\n      .split('\\n')\n      .filter(header => header.toLowerCase().indexOf(KALTURA_HEADER_PREFIX) === 0);\n  }\n\n  _handleError(request: XMLHttpRequest, code: number, data: Object): Promise<*> | void {\n    const error = this._createError(request, code, data);\n    request.onreadystatechange = function () {};\n    request.onerror = function () {};\n    request.ontimeout = function () {};\n    request.onabort = function () {};\n    if (this.retryConfig.maxAttempts && this._attemptCounter < this.retryConfig.maxAttempts) {\n      this._attemptCounter++;\n      this._createXHR();\n    } else {\n      return this._requestPromise.reject(error);\n    }\n  }\n\n  _createError(request: XMLHttpRequest, code: number, data: Object): Error {\n    Object.assign(data, {\n      url: this.url,\n      headers: this._getResponseHeaders(request),\n      attempt: this._attemptCounter\n    });\n    return new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, code, data);\n  }\n}\n"],"sourceRoot":""}